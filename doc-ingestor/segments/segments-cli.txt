
-------------------
TextSegment { text = "WildFly server
A server has a `name`, a `product-name`, a `version`, a `running-mode`, a `server-state` and a `suspend-state`.
get the server
get all the information on the server.
information on the server is composed of attributes and children.
operation: `/:read-resource(include-runtime=true)`" metadata = {parent=WildFly server, title=get the server} }
-------------------

-------------------
TextSegment { text = "WildFly server
A server has a `name`, a `product-name`, a `version`, a `running-mode`, a `server-state` and a `suspend-state`.
get the name
get the server `name` attribute.
operation: `/:read-attribute(name=name)`" metadata = {parent=WildFly server, title=get the name} }
-------------------

-------------------
TextSegment { text = "WildFly server
A server has a `name`, a `product-name`, a `version`, a `running-mode`, a `server-state` and a `suspend-state`.
get the product name
get the server `product-name` attribute.
operation: `/:read-attribute(name=product-name)`" metadata = {parent=WildFly server, title=get the product name} }
-------------------

-------------------
TextSegment { text = "WildFly server
A server has a `name`, a `product-name`, a `version`, a `running-mode`, a `server-state` and a `suspend-state`.
get the version
get the server `version` attribute.
operation: `/:read-attribute(name=version)`" metadata = {parent=WildFly server, title=get the version} }
-------------------

-------------------
TextSegment { text = "WildFly server
A server has a `name`, a `product-name`, a `version`, a `running-mode`, a `server-state` and a `suspend-state`.
get the running mode
In which mode the server is running.
get the server `running-mode` attribute.
operation: `/:read-attribute(name=running-mode)`" metadata = {parent=WildFly server, title=get the running mode} }
-------------------

-------------------
TextSegment { text = "WildFly server
A server has a `name`, a `product-name`, a `version`, a `running-mode`, a `server-state` and a `suspend-state`.
get the server state
What is the state of the server.
get the server `server-state` attribute.
operation: `/:read-attribute(name=server-state)`" metadata = {parent=WildFly server, title=get the server state} }
-------------------

-------------------
TextSegment { text = "WildFly server
A server has a `name`, a `product-name`, a `version`, a `running-mode`, a `server-state` and a `suspend-state`.
get the suspend state
get the server `suspend-state` attribute.
operation: `/:read-attribute(name=suspend-state)`" metadata = {parent=WildFly server, title=get the suspend state} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to add or create a system property
operation: `/system-property=<property name>:add(value=<value of the system property>)`" metadata = {parent=system property, title=syntax of the operation to add or create a system property} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to remove or delete a system property
operation: `/system-property=<property name>:remove()`" metadata = {parent=system property, title=syntax of the operation to remove or delete a system property} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to update a system property
operation: `/system-property=<property name>:write-attribute(name=value, value=<value of the system property>)`" metadata = {parent=system property, title=syntax of the operation to update a system property} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the value of a system property
operation: `/system-property=<property name>:read-attribute(name=value)`
To get the list of all the system property use '*' for `<property name>`.
An empty result returned by this operation means that no system properties are set." metadata = {parent=system property, title=syntax of the operation to get the value of a system property} }
-------------------

-------------------
TextSegment { text = "get or resolve the value of the expression
operation: `:resolve-expression(expression=<expression_value>)`
An `<expression_value>` can be an environment variable or a system property. Examples of expressions are `${JBOSS_HOME}` and `${jboss.node.name}`." metadata = {parent=expression, title=get or resolve the value of the expression} }
-------------------

-------------------
TextSegment { text = "interface
The interface references the IP address.
syntax of the operation to get an IP interface
operation: `/interface=<interface_name>:read-resource(include-runtime=true)`
To get the list of all the interfaces use '*' for `<interface_name>`." metadata = {parent=interface, title=syntax of the operation to get an IP interface} }
-------------------

-------------------
TextSegment { text = "interface
The interface references the IP address.
operation to get the public IP interface
operation: `/interface=public:read-resource(include-runtime=true)`" metadata = {parent=interface, title=operation to get the public IP interface} }
-------------------

-------------------
TextSegment { text = "interface
The interface references the IP address.
operation to get the management IP interface
operation: `/interface=management:read-resource(include-runtime=true)`" metadata = {parent=interface, title=operation to get the management IP interface} }
-------------------

-------------------
TextSegment { text = "operation to get the core management HTTP interface
The operation: `/core-service=management/management-interface=http-interface:read-resource`" metadata = {parent=core management, title=operation to get the core management HTTP interface} }
-------------------

-------------------
TextSegment { text = "core management HTTP interface interesting attributes
* `http-authentication-factory`: elytron `http-authentication-factory` name used to secure the access to the management interface.
* `socket-binding` : The name of the socket binding name used for the management interface socket." metadata = {parent=core management, title=core management HTTP interface interesting attributes} }
-------------------

-------------------
TextSegment { text = "socket binding
A socket-binding contains the IP socket information: the port on the interface the server is bound to.
If the `interface` attribute of the socket binding resource is not defined, the `interface` attribute value has to be retrieved
by calling the operation `/socket-binding-group=standard-sockets:read-attribute(name=default-interface)`
Some well known socket-bindings are: http, https, management-http and management-https.
syntax of the operation to get a socket binding
operation: `/socket-binding-group=standard-sockets/socket-binding=<socket binding name>:read-resource`
To get the list of all the interfaces use '*' for `<socket binding name>`." metadata = {parent=socket binding, title=syntax of the operation to get a socket binding} }
-------------------

-------------------
TextSegment { text = "deployment
A deployment is a user application deployed in the server.
Example for <deployment name> is `myapp.war`.
syntax of the operation to get a deployment
operation: `/deployment=<deployment name>:read-resource(include-runtime=true)`
The returned deployment contains all the attributes of the deployment, in particular its status.
To get the list of all the deployment use '*' for `<deployment name>`." metadata = {parent=deployment, title=syntax of the operation to get a deployment} }
-------------------

-------------------
TextSegment { text = "deployment
A deployment is a user application deployed in the server.
Example for <deployment name> is `myapp.war`.
syntax of the operation to get the files contained in a deployment
operation: `/deployment=<deployment name>:browse-content()`
Examples of returned paths: `WEB-INF/``web.xml`, `WEB-INF/``jboss-web.xml`, `WEB-INF/``classes/persistence.xml`.
syntax of the operation to get the content of a file contained in the deployment
operation: `/deployment=<deployment name>:read-content(path=<file path>)`" metadata = {parent=deployment, title=syntax of the operation to get the files contained in a deployment} }
-------------------

-------------------
TextSegment { text = "extension
extension references the JBoss Modules module name.
The name of an extension is composed of a list of words separated by a '.', for example `org.wildfly.extension.elytron`.
syntax of the operation to get a extension
operation: `/extension=<extension name>:read-resource(recursive=true, include-runtime=true)`
To get the list of all the extension use '*' for `<extension name>`." metadata = {parent=extension, title=syntax of the operation to get a extension} }
-------------------

-------------------
TextSegment { text = "path
The name of a path is composed of a list of words separated by a '.', for example `jboss.server.config.dir`.
syntax of the operation to get a path
operation: `/path=<path name>:read-resource(recursive=true)`
To get the list of all the path use '*' for `<path name>`." metadata = {parent=path, title=syntax of the operation to get a path} }
-------------------

-------------------
TextSegment { text = "subsystem
A subsystem has a name
a subsystem contains a set of attributes.
syntax of the operation to get a subsystem
operation: `/subsystem=<subsystem name>:read-resource()`
To get the list of all the subsystem use '*' for `<subsystem name>`." metadata = {parent=subsystem, title=syntax of the operation to get a subsystem} }
-------------------

-------------------
TextSegment { text = "operation to get the `bean-validation` subsystem
operation: `/subsystem=bean-validation:read-resource()`" metadata = {parent=`bean-validation` subsystem, title=operation to get the `bean-validation` subsystem} }
-------------------

-------------------
TextSegment { text = "datasources subsystem
Contains all the installed JDBC driver and all the defined `data-source` and `xa-data-source`.
syntax of the operation to get a JDBC driver
Well known JDBC drivers are: h2, postgresql, mariadb, mysql, oracle, mssqlserver.
operation: `/subsystem=datasources/jdbc-driver=<jdbc driver name>:read-resource`
To get the list of all the driver use '*' for `<jdbc driver name>`." metadata = {parent=datasources subsystem, title=syntax of the operation to get a JDBC driver} }
-------------------

-------------------
TextSegment { text = "datasources subsystem
Contains all the installed JDBC driver and all the defined `data-source` and `xa-data-source`.
syntax of the operation to get a data-source
operation: `/subsystem=datasources/data-source=<data-source name>:read-resource`
To get the list of all the `data-sources` use '*' for `<data-source name>`." metadata = {parent=datasources subsystem, title=syntax of the operation to get a data-source} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `add-component-via-interceptor`
indicates whether `ssl` components should be added by an `ior` interceptor (on) or not (off).
get the `iiop-openjdk` `add-component-via-interceptor` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=add-component-via-interceptor)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `add-component-via-interceptor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `auth-method`
the authentication method. valid values are 'none' and '`username_password`'.
get the `iiop-openjdk` `auth-method` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=auth-method)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `auth-method`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `authentication-context`
the name of the authentication context used when the security initializer is set to 'elytron'.
get the `iiop-openjdk` `authentication-context` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `caller-propagation`
indicates whether the caller identity should be propagated in the `sas` context or not. valid values are 'none' and 'supported'.
get the `iiop-openjdk` `caller-propagation` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=caller-propagation)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `caller-propagation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `client-requires`
value that indicates the client `ssl` required parameters (none, `serverauth`, `clientauth`, `mutualauth`).
get the `iiop-openjdk` `client-requires` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=client-requires)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `client-requires`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `client-requires-ssl`
indicates whether `iiop` connections from the server require `ssl`.
get the `iiop-openjdk` `client-requires-ssl` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=client-requires-ssl)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `client-requires-ssl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `client-ssl-context`
the name of the `ssl` context used to create client side `ssl` sockets.
get the `iiop-openjdk` `client-ssl-context` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=client-ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `client-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `client-supports`
value that indicates the client `ssl` supported parameters (none, `serverauth`, `clientauth`, `mutualauth`).
get the `iiop-openjdk` `client-supports` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=client-supports)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `client-supports`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `confidentiality`
indicates whether the transport must require confidentiality protection or not. valid values are 'none', 'supported' and 'required'.
get the `iiop-openjdk` `confidentiality` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=confidentiality)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `confidentiality`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `detect-misordering`
indicates whether the transport must require `misordering` detection or not. valid values are 'none', 'supported' and 'required'.
get the `iiop-openjdk` `detect-misordering` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=detect-misordering)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `detect-misordering`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `detect-replay`
indicates whether the transport must require replay detection or not. valid values are 'none', 'supported' and 'required'.
get the `iiop-openjdk` `detect-replay` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=detect-replay)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `detect-replay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `export-corbaloc`
indicates whether the root context should be exported as `corbaloc::address:port/nameservice` (on) or not (off).
get the `iiop-openjdk` `export-corbaloc` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=export-corbaloc)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `export-corbaloc`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `giop-version`
the `giop` version to be used.
get the `iiop-openjdk` `giop-version` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=giop-version)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `giop-version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `high-water-mark`
`tcp` connection cache parameter. each time the number of connections exceeds this value orb tries to reclaim connections. number of reclaimed connections is specified by `tcp-number-to-reclaim` property. if this property is not set then it is configured as `openjdk` orb default.
get the `iiop-openjdk` `high-water-mark` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=high-water-mark)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `high-water-mark`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `integrity`
indicates whether the transport must require integrity protection or not. valid values are 'none', 'supported' and 'required'.
get the `iiop-openjdk` `integrity` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=integrity)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `integrity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `iona`
indicates whether `interoperability` with `iona's` asp is enabled.
get the `iiop-openjdk` `iona` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=iona)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `iona`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `number-to-reclaim`
`tcp` connection cache parameter. each time number of connections exceeds `tcp-high-water-mark` property then orb tries to reclaim connections. number of reclaimed connections is specified by this property. if it is not set then it is configured as `openjdk` orb default.
get the `iiop-openjdk` `number-to-reclaim` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=number-to-reclaim)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `number-to-reclaim`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `persistent-server-id`
persistent id of the server. persistent object references are valid across many `activactions` of the server and they identify it using this property. as a result of that: many activations of the same server should have this property set to the same value, different server instances running on the same host should have different server ids.
get the `iiop-openjdk` `persistent-server-id` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=persistent-server-id)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `persistent-server-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `properties`
a list of generic `key/value` properties.
get the `iiop-openjdk` `properties` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `realm`
the authentication service (as) realm name.
get the `iiop-openjdk` `realm` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=realm)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `required`
indicates if authentication is required (true) or not (false).
get the `iiop-openjdk` `required` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=required)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `root-context`
the naming service root context.
get the `iiop-openjdk` `root-context` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=root-context)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `root-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `security`
`iiop-openjdk.security=indicates` whether the security interceptors are to be installed (elytron) or not (none). identity and client are legacy security configurations which are valid for compatibility reasons but are no longer supported.
get the `iiop-openjdk` `security` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=security)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `security`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `security-domain`
the name of the security domain that holds the key and trust stores that will be used to establish `ssl` connections.
get the `iiop-openjdk` `security-domain` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `server-requires`
value that indicates the server `ssl` required parameters (none, `serverauth`, `clientauth`, `mutualauth`).
get the `iiop-openjdk` `server-requires` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=server-requires)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `server-requires`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `server-requires-ssl`
indicates whether `iiop` connections to the server require `ssl`.
get the `iiop-openjdk` `server-requires-ssl` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=server-requires-ssl)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `server-requires-ssl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `server-ssl-context`
the name of the `ssl` context used to create server side `ssl` sockets.
get the `iiop-openjdk` `server-ssl-context` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=server-ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `server-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `server-supports`
value that indicates the server `ssl` supported parameters (none, `serverauth`, `clientauth`, `mutualauth`).
get the `iiop-openjdk` `server-supports` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=server-supports)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `server-supports`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `socket-binding`
the name of the socket binding configuration that specifies the orb port. at least one of `socket-binding`, `ssl-socket-binding` parameters have to be configured.
get the `iiop-openjdk` `socket-binding` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `ssl-socket-binding`
the name of the socket binding configuration that specifies the orb `ssl` port. at least one of `socket-binding`, `ssl-socket-binding` parameters have to be configured.
get the `iiop-openjdk` `ssl-socket-binding` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=ssl-socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `ssl-socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `support-ssl`
indicates whether `ssl` is to be supported (on) or not (off).
get the `iiop-openjdk` `support-ssl` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=support-ssl)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `support-ssl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `transactions`
indicates whether the transactions interceptors are to be installed (full or spec) or not (none). the value 'full' enabled `jts` while 'spec' enables a spec compliant mode (non `jts`) that rejects incoming transaction contexts.
get the `iiop-openjdk` `transactions` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=transactions)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `trust-in-client`
indicates if the transport must require trust in client to be established. valid values are 'none', 'supported' and 'required'.
get the `iiop-openjdk` `trust-in-client` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=trust-in-client)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `trust-in-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `iiop-openjdk` `trust-in-target`
indicates if the transport must require trust in target to be established. valid values are 'none' and 'supported'.
get the `iiop-openjdk` `trust-in-target` attribute.
operation: `/subsystem=iiop-openjdk:read-attribute(name=trust-in-target)`" metadata = {parent=, title=syntax of the operation to get the `iiop-openjdk` `trust-in-target`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `batch-delay`
the interval, in milliseconds, between two consecutive exports. default is `5000`.
get the `opentelemetry` `batch-delay` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=batch-delay)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `batch-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `endpoint`
the `url` for the exporter endpoint.
get the `opentelemetry` `endpoint` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=endpoint)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `endpoint`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `export-timeout`
the maximum allowed time, in milliseconds, to export data.
get the `opentelemetry` `export-timeout` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=export-timeout)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `export-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `exporter-type`
the name of the exporter to use
get the `opentelemetry` `exporter-type` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=exporter-type)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `exporter-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `max-export-batch-size`
the maximum number of traces to be exported in a given batch.
get the `opentelemetry` `max-export-batch-size` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=max-export-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `max-export-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `max-queue-size`
the maximum number of traces in the queue before they are exported.
get the `opentelemetry` `max-queue-size` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=max-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `max-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `ratio`
the ratio amount to use for the ratio sampler
get the `opentelemetry` `ratio` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=ratio)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `ratio`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `sampler-type`
the sampling strategy to use
get the `opentelemetry` `sampler-type` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=sampler-type)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `sampler-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `service-name`
service name reported to the trace collector
get the `opentelemetry` `service-name` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=service-name)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `service-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `opentelemetry` `span-processor-type`
the type of processor to use. valid values are 'simple' and 'batch'.
get the `opentelemetry` `span-processor-type` attribute.
operation: `/subsystem=opentelemetry:read-attribute(name=span-processor-type)`" metadata = {parent=, title=syntax of the operation to get the `opentelemetry` `span-processor-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jpa` `default-datasource`
the name of the default global `datasource`.
get the `jpa` `default-datasource` attribute.
operation: `/subsystem=jpa:read-attribute(name=default-datasource)`" metadata = {parent=, title=syntax of the operation to get the `jpa` `default-datasource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jpa` `default-extended-persistence-inheritance`
controls how jakarta persistence extended persistence context (`xpc`) inheritance is performed. 'deep' shares the extended persistence context at top bean level.  'shallow' the extended `persistece` context is only shared with the parent bean (never with sibling beans).
get the `jpa` `default-extended-persistence-inheritance` attribute.
operation: `/subsystem=jpa:read-attribute(name=default-extended-persistence-inheritance)`" metadata = {parent=, title=syntax of the operation to get the `jpa` `default-extended-persistence-inheritance`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-active-count`
the approximate number of threads used by all `activemq` clients that are actively executing tasks.
get the `messaging-activemq` `global-client-scheduled-thread-pool-active-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-scheduled-thread-pool-active-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-active-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-completed-task-count`
the approximate number of tasks that have been executed by all `activemq` clients.
get the `messaging-activemq` `global-client-scheduled-thread-pool-completed-task-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-scheduled-thread-pool-completed-task-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-completed-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-current-thread-count`
the current number of threads in the pool used by all `activemq` clients.
get the `messaging-activemq` `global-client-scheduled-thread-pool-current-thread-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-scheduled-thread-pool-current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-keepalive-time`
the amount of time that pool threads should be kept running when idle.
get the `messaging-activemq` `global-client-scheduled-thread-pool-keepalive-time` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-scheduled-thread-pool-keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool used by all `activemq` clients.
get the `messaging-activemq` `global-client-scheduled-thread-pool-largest-thread-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-scheduled-thread-pool-largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-max-size`
maximum size of the pool of threads used by all `activemq` clients running inside this server. if the attribute is undefined (by default), `activemq` will configure it to be `8` x the number of available processors.
get the `messaging-activemq` `global-client-scheduled-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-scheduled-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-task-count`
the approximate total number of tasks that have ever been scheduled by all `activemq` clients.
get the `messaging-activemq` `global-client-scheduled-thread-pool-task-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-scheduled-thread-pool-task-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-scheduled-thread-pool-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-active-count`
the approximate number of threads used by all `activemq` clients that are actively executing tasks.
get the `messaging-activemq` `global-client-thread-pool-active-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-thread-pool-active-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-active-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-completed-task-count`
the approximate number of tasks that have been executed by all `activemq` clients.
get the `messaging-activemq` `global-client-thread-pool-completed-task-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-thread-pool-completed-task-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-completed-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-current-thread-count`
the current number of threads in the pool used by all `activemq` clients.
get the `messaging-activemq` `global-client-thread-pool-current-thread-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-thread-pool-current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-keepalive-time`
the amount of time that pool threads should be kept running when idle.
get the `messaging-activemq` `global-client-thread-pool-keepalive-time` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-thread-pool-keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool used by all `activemq` clients.
get the `messaging-activemq` `global-client-thread-pool-largest-thread-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-thread-pool-largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-max-size`
maximum size of the pool of scheduled threads used by all `activemq` clients running inside this server.
get the `messaging-activemq` `global-client-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-task-count`
the approximate total number of tasks that have ever been scheduled by all `activemq` clients.
get the `messaging-activemq` `global-client-thread-pool-task-count` attribute.
operation: `/subsystem=messaging-activemq:read-attribute(name=global-client-thread-pool-task-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `global-client-thread-pool-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `discovery-group`
operation: `/subsystem=messaging-activemq/discovery-group=<discovery-group name>:read-resource()`
To get the list of all the `messaging-activemq` `discovery-group` use '*' for `<discovery-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `discovery-group` `initial-wait-timeout`
period, in ms, to wait for an initial broadcast to give us at least one node in the cluster.
get the `messaging-activemq` `discovery-group` `initial-wait-timeout` attribute.
operation: `/subsystem=messaging-activemq/discovery-group=<discovery-group name>:read-attribute(name=initial-wait-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `discovery-group` `initial-wait-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `discovery-group` `jgroups-channel`
references the name of a `jgroups` channel.  if undefined, the default channel will be used.
get the `messaging-activemq` `discovery-group` `jgroups-channel` attribute.
operation: `/subsystem=messaging-activemq/discovery-group=<discovery-group name>:read-attribute(name=jgroups-channel)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `discovery-group` `jgroups-channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `discovery-group` `jgroups-cluster`
the logical cluster name.
get the `messaging-activemq` `discovery-group` `jgroups-cluster` attribute.
operation: `/subsystem=messaging-activemq/discovery-group=<discovery-group name>:read-attribute(name=jgroups-cluster)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `discovery-group` `jgroups-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `discovery-group` `jgroups-stack`
references the name of a `jgroups` channel factory.
get the `messaging-activemq` `discovery-group` `jgroups-stack` attribute.
operation: `/subsystem=messaging-activemq/discovery-group=<discovery-group name>:read-attribute(name=jgroups-stack)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `discovery-group` `jgroups-stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `discovery-group` `refresh-timeout`
period the discovery group waits after receiving the last broadcast from a particular server before removing that `server's` connector pair entry from its list.
get the `messaging-activemq` `discovery-group` `refresh-timeout` attribute.
operation: `/subsystem=messaging-activemq/discovery-group=<discovery-group name>:read-attribute(name=refresh-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `discovery-group` `refresh-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `discovery-group` `socket-binding`
the discovery group socket binding.
get the `messaging-activemq` `discovery-group` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/discovery-group=<discovery-group name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `discovery-group` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `jgroups-discovery-group`
operation: `/subsystem=messaging-activemq/jgroups-discovery-group=<jgroups-discovery-group name>:read-resource()`
To get the list of all the `messaging-activemq` `jgroups-discovery-group` use '*' for `<jgroups-discovery-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `jgroups-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `initial-wait-timeout`
period, in ms, to wait for an initial broadcast to give us at least one node in the cluster.
get the `messaging-activemq` `jgroups-discovery-group` `initial-wait-timeout` attribute.
operation: `/subsystem=messaging-activemq/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=initial-wait-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `initial-wait-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `jgroups-channel`
references the name of a `jgroups` channel.  if undefined, the default channel will be used.
get the `messaging-activemq` `jgroups-discovery-group` `jgroups-channel` attribute.
operation: `/subsystem=messaging-activemq/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=jgroups-channel)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `jgroups-channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `jgroups-cluster`
the logical cluster name.
get the `messaging-activemq` `jgroups-discovery-group` `jgroups-cluster` attribute.
operation: `/subsystem=messaging-activemq/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=jgroups-cluster)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `jgroups-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `jgroups-stack`
references the name of a `jgroups` channel factory.
get the `messaging-activemq` `jgroups-discovery-group` `jgroups-stack` attribute.
operation: `/subsystem=messaging-activemq/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=jgroups-stack)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `jgroups-stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `refresh-timeout`
period the discovery group waits after receiving the last broadcast from a particular server before removing that `server's` connector pair entry from its list.
get the `messaging-activemq` `jgroups-discovery-group` `refresh-timeout` attribute.
operation: `/subsystem=messaging-activemq/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=refresh-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jgroups-discovery-group` `refresh-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `connection-factory`
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-resource()`
To get the list of all the `messaging-activemq` `connection-factory` use '*' for `<connection-factory name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `auto-group`
whether or not message grouping is automatically used
get the `messaging-activemq` `connection-factory` `auto-group` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=auto-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `auto-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `block-on-acknowledge`
true to set block on acknowledge.
get the `messaging-activemq` `connection-factory` `block-on-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=block-on-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `block-on-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `block-on-durable-send`
true to set block on durable send.
get the `messaging-activemq` `connection-factory` `block-on-durable-send` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=block-on-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `block-on-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `block-on-non-durable-send`
true to set block on non durable send.
get the `messaging-activemq` `connection-factory` `block-on-non-durable-send` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=block-on-non-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `block-on-non-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `cache-large-message-client`
true to cache large messages.
get the `messaging-activemq` `connection-factory` `cache-large-message-client` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=cache-large-message-client)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `cache-large-message-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `call-failover-timeout`
the timeout to use when fail over is in process (in ms).
get the `messaging-activemq` `connection-factory` `call-failover-timeout` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=call-failover-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `call-failover-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `call-timeout`
the call time out.
get the `messaging-activemq` `connection-factory` `call-timeout` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=call-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `call-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `client-failure-check-period`
the client failure check period.
get the `messaging-activemq` `connection-factory` `client-failure-check-period` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=client-failure-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `client-failure-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `client-id`
the client id.
get the `messaging-activemq` `connection-factory` `client-id` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `compress-large-messages`
whether large messages should be compressed.
get the `messaging-activemq` `connection-factory` `compress-large-messages` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=compress-large-messages)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `compress-large-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `confirmation-window-size`
the confirmation window size.
get the `messaging-activemq` `connection-factory` `confirmation-window-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=confirmation-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `confirmation-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `connection-load-balancing-policy-class-name`
name of a class implementing a `client-side` load balancing policy that a client can use to load balance sessions across different nodes in a cluster.
get the `messaging-activemq` `connection-factory` `connection-load-balancing-policy-class-name` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=connection-load-balancing-policy-class-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `connection-load-balancing-policy-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `connection-ttl`
the connection `ttl`.
get the `messaging-activemq` `connection-factory` `connection-ttl` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=connection-ttl)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `connection-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `connectors`
defines the connectors. these are stored in a map by connector name (with an undefined value). it is possible to pass a list of connector names when writing this attribute.
get the `messaging-activemq` `connection-factory` `connectors` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `consumer-max-rate`
the consumer max rate.
get the `messaging-activemq` `connection-factory` `consumer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=consumer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `consumer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `consumer-window-size`
the consumer window size.
get the `messaging-activemq` `connection-factory` `consumer-window-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=consumer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `consumer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-allow-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `connection-factory` `deserialization-allow-list` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=deserialization-allow-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-allow-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-black-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `connection-factory` `deserialization-black-list` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=deserialization-black-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-black-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-block-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `connection-factory` `deserialization-block-list` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=deserialization-block-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-block-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-white-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `connection-factory` `deserialization-white-list` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=deserialization-white-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `deserialization-white-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `discovery-group`
the discovery group name.
get the `messaging-activemq` `connection-factory` `discovery-group` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `dups-ok-batch-size`
the dups ok batch size.
get the `messaging-activemq` `connection-factory` `dups-ok-batch-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=dups-ok-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `dups-ok-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `enable-amq1-prefix`
enable the use of `activemq` `1.5.x` prefixes in the addresses.
get the `messaging-activemq` `connection-factory` `enable-amq1-prefix` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=enable-amq1-prefix)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `enable-amq1-prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `entries`
the `jndi` names the connection factory should be bound to.
get the `messaging-activemq` `connection-factory` `entries` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `factory-type`
the type of connection factory.
get the `messaging-activemq` `connection-factory` `factory-type` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=factory-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `factory-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `failover-on-initial-connection`
true to fail over on initial connection.
get the `messaging-activemq` `connection-factory` `failover-on-initial-connection` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=failover-on-initial-connection)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `failover-on-initial-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `group-id`
the group id.
get the `messaging-activemq` `connection-factory` `group-id` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=group-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `group-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `ha`
whether the connection factory supports high availability.
get the `messaging-activemq` `connection-factory` `ha` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=ha)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `ha`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `initial-message-packet-size`
the initial size of messages created through this factory.
get the `messaging-activemq` `connection-factory` `initial-message-packet-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=initial-message-packet-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `initial-message-packet-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `max-retry-interval`
the max retry interval.
get the `messaging-activemq` `connection-factory` `max-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=max-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `max-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `min-large-message-size`
the min large message size.
get the `messaging-activemq` `connection-factory` `min-large-message-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=min-large-message-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `min-large-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `pre-acknowledge`
true to `pre-acknowledge`.
get the `messaging-activemq` `connection-factory` `pre-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=pre-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `pre-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `producer-max-rate`
the producer max rate.
get the `messaging-activemq` `connection-factory` `producer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=producer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `producer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `producer-window-size`
the producer window size.
get the `messaging-activemq` `connection-factory` `producer-window-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=producer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `producer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `protocol-manager-factory`
the protocol manager factory used by this connection factory (it must implement `org.apache.activemq.artemis.spi.core.remoting.clientprotocolmanagerfactory`).
get the `messaging-activemq` `connection-factory` `protocol-manager-factory` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=protocol-manager-factory)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `protocol-manager-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `reconnect-attempts`
the reconnect attempts.
get the `messaging-activemq` `connection-factory` `reconnect-attempts` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `retry-interval`
the retry interval.
get the `messaging-activemq` `connection-factory` `retry-interval` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `retry-interval-multiplier`
the retry interval multiplier.
get the `messaging-activemq` `connection-factory` `retry-interval-multiplier` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=retry-interval-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `retry-interval-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `scheduled-thread-pool-max-size`
the scheduled thread pool max size.
get the `messaging-activemq` `connection-factory` `scheduled-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=scheduled-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `scheduled-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `thread-pool-max-size`
the thread pool max size.
get the `messaging-activemq` `connection-factory` `thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `transaction-batch-size`
the transaction batch size.
get the `messaging-activemq` `connection-factory` `transaction-batch-size` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=transaction-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `transaction-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `use-global-pools`
true to use global pools.
get the `messaging-activemq` `connection-factory` `use-global-pools` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=use-global-pools)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `use-global-pools`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connection-factory` `use-topology-for-load-balancing`
whether to use topology information from the cluster to connect to it. if set to 'false', only the initial connector will be used.
get the `messaging-activemq` `connection-factory` `use-topology-for-load-balancing` attribute.
operation: `/subsystem=messaging-activemq/connection-factory=<connection-factory name>:read-attribute(name=use-topology-for-load-balancing)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connection-factory` `use-topology-for-load-balancing`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `jms-bridge`
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-resource()`
To get the list of all the `messaging-activemq` `jms-bridge` use '*' for `<jms-bridge name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `jms-bridge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `aborted-message-count`
the number of messages `aborted/rolled` back.
get the `messaging-activemq` `jms-bridge` `aborted-message-count` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=aborted-message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `aborted-message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `add-messageID-in-header`
if true, then the original `message's` message id will be appended in the message sent to the destination in the header `amq_bridge_msg_id_list`. if the message is bridged more than once, each message id will be appended.
get the `messaging-activemq` `jms-bridge` `add-messageID-in-header` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=add-messageID-in-header)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `add-messageID-in-header`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `client-id`
the jakarta messaging client id to use when `creating/looking` up the subscription if it is durable and the source destination is a topic.
get the `messaging-activemq` `jms-bridge` `client-id` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `failure-retry-interval`
the amount of time in milliseconds to wait between trying to recreate connections to the source or target servers when the bridge has detected they have failed.
get the `messaging-activemq` `jms-bridge` `failure-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=failure-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `failure-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `max-batch-size`
the maximum number of messages to consume from the source destination before sending them in a batch to the target destination. its value must >= `1`.
get the `messaging-activemq` `jms-bridge` `max-batch-size` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `max-batch-time`
the maximum number of milliseconds to wait before sending a batch to target, even if the number of messages consumed has not reached `max-batch-size`. its value must be -`1` to represent 'wait forever', or >= `1` to specify an actual time.
get the `messaging-activemq` `jms-bridge` `max-batch-time` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=max-batch-time)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `max-batch-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `max-retries`
the number of times to attempt to recreate connections to the source or target servers when the bridge has detected they have failed. the bridge will give up after trying this number of times. -`1` represents 'try forever'.
get the `messaging-activemq` `jms-bridge` `max-retries` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=max-retries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `max-retries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `message-count`
the number of messages successfully committed.
get the `messaging-activemq` `jms-bridge` `message-count` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `module`
the name of `as7` module containing the resources required to lookup source and target jakarta messaging resources.
get the `messaging-activemq` `jms-bridge` `module` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `paused`
whether the jakarta messaging bridge is paused.
get the `messaging-activemq` `jms-bridge` `paused` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=paused)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `paused`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `quality-of-service`
the desired quality of service mode (`at_most_once`, `duplicates_ok` or `once_and_only_once`).
get the `messaging-activemq` `jms-bridge` `quality-of-service` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=quality-of-service)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `quality-of-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `selector`
a jakarta messaging selector expression used for consuming messages from the source destination. only messages that match the selector expression will be bridged from the source to the target destination.
get the `messaging-activemq` `jms-bridge` `selector` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=selector)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `selector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-connection-factory`
the name of the source connection factory to lookup on the source messaging server.
get the `messaging-activemq` `jms-bridge` `source-connection-factory` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=source-connection-factory)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-context`
the properties used to configure the source `jndi` initial context.
get the `messaging-activemq` `jms-bridge` `source-context` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=source-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-credential-reference`
credential (from credential store) to authenticate source connection
get the `messaging-activemq` `jms-bridge` `source-credential-reference` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=source-credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-destination`
the name of the source destination to lookup on the source messaging server.
get the `messaging-activemq` `jms-bridge` `source-destination` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=source-destination)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-destination`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-password`
the password for creating the source connection.
get the `messaging-activemq` `jms-bridge` `source-password` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=source-password)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-user`
the name of the user for creating the source connection.
get the `messaging-activemq` `jms-bridge` `source-user` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=source-user)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `source-user`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `started`
whether the jakarta messaging bridge is started.
get the `messaging-activemq` `jms-bridge` `started` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `subscription-name`
the name of the subscription if it is durable and the source destination is a topic.
get the `messaging-activemq` `jms-bridge` `subscription-name` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=subscription-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `subscription-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-connection-factory`
the name of the target connection factory to lookup on the target messaging server.
get the `messaging-activemq` `jms-bridge` `target-connection-factory` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=target-connection-factory)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-context`
the properties used to configure the target `jndi` initial context.
get the `messaging-activemq` `jms-bridge` `target-context` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=target-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-credential-reference`
credential (from credential store) to authenticate target connection
get the `messaging-activemq` `jms-bridge` `target-credential-reference` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=target-credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-destination`
the name of the target destination to lookup on the target messaging server.
get the `messaging-activemq` `jms-bridge` `target-destination` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=target-destination)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-destination`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-password`
the password for creating the target connection.
get the `messaging-activemq` `jms-bridge` `target-password` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=target-password)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-user`
the name of the user for creating the target connection.
get the `messaging-activemq` `jms-bridge` `target-user` attribute.
operation: `/subsystem=messaging-activemq/jms-bridge=<jms-bridge name>:read-attribute(name=target-user)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `jms-bridge` `target-user`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `http-connector`
operation: `/subsystem=messaging-activemq/http-connector=<http-connector name>:read-resource()`
To get the list of all the `messaging-activemq` `http-connector` use '*' for `<http-connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `http-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `http-connector` `endpoint`
the `http-acceptor` that serves as the endpoint of this `http-connector`.
get the `messaging-activemq` `http-connector` `endpoint` attribute.
operation: `/subsystem=messaging-activemq/http-connector=<http-connector name>:read-attribute(name=endpoint)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `http-connector` `endpoint`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `http-connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `http-connector` `params` attribute.
operation: `/subsystem=messaging-activemq/http-connector=<http-connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `http-connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `http-connector` `server-name`
the name of the `activemq` artemis server that will be connected to on the remote server. if undefined, the name of the parent `activemq` artemis server will be used (suitable if the `http-connector` is used to connect to the parent server)
get the `messaging-activemq` `http-connector` `server-name` attribute.
operation: `/subsystem=messaging-activemq/http-connector=<http-connector name>:read-attribute(name=server-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `http-connector` `server-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `http-connector` `socket-binding`
the socket binding that the connector will use to create connections
get the `messaging-activemq` `http-connector` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/http-connector=<http-connector name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `http-connector` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `http-connector` `ssl-context`
the `ssl` context that the connector will use to connect
get the `messaging-activemq` `http-connector` `ssl-context` attribute.
operation: `/subsystem=messaging-activemq/http-connector=<http-connector name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `http-connector` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `in-vm-connector`
operation: `/subsystem=messaging-activemq/in-vm-connector=<in-vm-connector name>:read-resource()`
To get the list of all the `messaging-activemq` `in-vm-connector` use '*' for `<in-vm-connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `in-vm-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `in-vm-connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `in-vm-connector` `params` attribute.
operation: `/subsystem=messaging-activemq/in-vm-connector=<in-vm-connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `in-vm-connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `in-vm-connector` `server-id`
the server id.
get the `messaging-activemq` `in-vm-connector` `server-id` attribute.
operation: `/subsystem=messaging-activemq/in-vm-connector=<in-vm-connector name>:read-attribute(name=server-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `in-vm-connector` `server-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `external-jms-topic`
operation: `/subsystem=messaging-activemq/external-jms-topic=<external-jms-topic name>:read-resource()`
To get the list of all the `messaging-activemq` `external-jms-topic` use '*' for `<external-jms-topic name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `external-jms-topic`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `external-jms-topic` `enable-amq1-prefix`
enable the use of `activemq` `1.x` prefixes in the addresses.
get the `messaging-activemq` `external-jms-topic` `enable-amq1-prefix` attribute.
operation: `/subsystem=messaging-activemq/external-jms-topic=<external-jms-topic name>:read-attribute(name=enable-amq1-prefix)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `external-jms-topic` `enable-amq1-prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `external-jms-topic` `entries`
the `jndi` names the topic will be bound to.
get the `messaging-activemq` `external-jms-topic` `entries` attribute.
operation: `/subsystem=messaging-activemq/external-jms-topic=<external-jms-topic name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `external-jms-topic` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server`
operation: `/subsystem=messaging-activemq/server=<server name>:read-resource()`
To get the list of all the `messaging-activemq` `server` use '*' for `<server name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `active`
whether the server is active (and accepting connections) or passive (in backup mode, waiting for `failover`).
get the `messaging-activemq` `server` `active` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=active)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `active`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-queue-scan-period`
how often to scan for addresses and queues which should be deleted.
get the `messaging-activemq` `server` `address-queue-scan-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=address-queue-scan-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-queue-scan-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `async-connection-execution-enabled`
whether incoming packets on the server should be handed off to a thread from the thread pool for processing. false if they should be handled on the `remoting` thread.
get the `messaging-activemq` `server` `async-connection-execution-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=async-connection-execution-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `async-connection-execution-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-credential-reference`
credential (from credential store) to authenticate to cluster
get the `messaging-activemq` `server` `cluster-credential-reference` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=cluster-credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-password`
the password used by cluster connections to communicate between the clustered nodes.
get the `messaging-activemq` `server` `cluster-password` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=cluster-password)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-user`
the user used by cluster connections to communicate between the clustered nodes.
get the `messaging-activemq` `server` `cluster-user` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=cluster-user)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-user`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-ttl-override`
if set, this will override how long (in ms) to keep a connection alive without receiving a ping.
get the `messaging-activemq` `server` `connection-ttl-override` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=connection-ttl-override)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-ttl-override`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `create-bindings-dir`
whether the server should create the bindings directory on start up.
get the `messaging-activemq` `server` `create-bindings-dir` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=create-bindings-dir)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `create-bindings-dir`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `create-journal-dir`
whether the server should create the journal directory on start up.
get the `messaging-activemq` `server` `create-journal-dir` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=create-journal-dir)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `create-journal-dir`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-check-period`
time used to check the response times (defaults to half of `critical-analyzer-timeout`).
get the `messaging-activemq` `server` `critical-analyzer-check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=critical-analyzer-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-enabled`
to enable or disable the critical analyzer.
get the `messaging-activemq` `server` `critical-analyzer-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=critical-analyzer-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-policy`
should the messaging server log, be halted or shutdown upon failures.
get the `messaging-activemq` `server` `critical-analyzer-policy` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=critical-analyzer-policy)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-timeout`
timeout used to do the critical analysis.
get the `messaging-activemq` `server` `critical-analyzer-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=critical-analyzer-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `critical-analyzer-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `disk-scan-period`
the interval where the disk is scanned for percentual usage.
get the `messaging-activemq` `server` `disk-scan-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=disk-scan-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `disk-scan-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `elytron-domain`
the name of the elytron security domain used to verify user and role information.
get the `messaging-activemq` `server` `elytron-domain` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=elytron-domain)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `elytron-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `global-max-disk-usage`
the maximum percentage of data we should use from disks. the system will block while the disk is full.
get the `messaging-activemq` `server` `global-max-disk-usage` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=global-max-disk-usage)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `global-max-disk-usage`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `global-max-memory-size`
maximum amount of memory which message data may consume.
get the `messaging-activemq` `server` `global-max-memory-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=global-max-memory-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `global-max-memory-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `id-cache-size`
the size of the cache for `pre-creating` message ids.
get the `messaging-activemq` `server` `id-cache-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=id-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `id-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `incoming-interceptors`
the list of incoming interceptor classes used by this server.
get the `messaging-activemq` `server` `incoming-interceptors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=incoming-interceptors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `incoming-interceptors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jmx-domain`
the `jmx` domain used to register internal `activemq` `mbeans` in the `mbeanserver`.
get the `messaging-activemq` `server` `jmx-domain` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=jmx-domain)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jmx-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jmx-management-enabled`
whether `activemq` should expose its internal management `api` via `jmx`. this is not recommended, as accessing these `mbeans` can lead to inconsistent configuration.
get the `messaging-activemq` `server` `jmx-management-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=jmx-management-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jmx-management-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-bindings-table`
name of the `jdbc` table to store the bindings.
get the `messaging-activemq` `server` `journal-bindings-table` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-bindings-table)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-bindings-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-buffer-size`
the size of the internal buffer on the journal.
get the `messaging-activemq` `server` `journal-buffer-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-buffer-timeout`
the timeout (in nanoseconds) used to flush internal buffers on the journal.
get the `messaging-activemq` `server` `journal-buffer-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-buffer-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-buffer-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-compact-min-files`
the minimal number of journal data files before we can start compacting.
get the `messaging-activemq` `server` `journal-compact-min-files` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-compact-min-files)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-compact-min-files`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-compact-percentage`
the percentage of live data on which we consider compacting the journal.
get the `messaging-activemq` `server` `journal-compact-percentage` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-compact-percentage)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-compact-percentage`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-database`
type of the database (can be used to customize `sql` statements). if this attribute is not specified, the type of the database will be determined based on the `datasource` `metadata`.
get the `messaging-activemq` `server` `journal-database` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-database)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-database`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-datasource`
name of the `datasource` for the `jdbc` store.
get the `messaging-activemq` `server` `journal-datasource` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-datasource)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-datasource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-file-open-timeout`
the timeout (in seconds) for opening journal files. values <= `0` mean fail immediately.
get the `messaging-activemq` `server` `journal-file-open-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-file-open-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-file-open-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-file-size`
the size (in bytes) of each journal file.
get the `messaging-activemq` `server` `journal-file-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-file-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-file-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-jdbc-lock-expiration`
the time the ha lock is considered valid without keeping it alive.
get the `messaging-activemq` `server` `journal-jdbc-lock-expiration` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-jdbc-lock-expiration)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-jdbc-lock-expiration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-jdbc-lock-renew-period`
the renewal period for the ha lock to keep it alive.
get the `messaging-activemq` `server` `journal-jdbc-lock-renew-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-jdbc-lock-renew-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-jdbc-lock-renew-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-jdbc-network-timeout`
the timeout used by the `jdbc` connection to detect network issues.
get the `messaging-activemq` `server` `journal-jdbc-network-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-jdbc-network-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-jdbc-network-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-jms-bindings-table`
name of the `jdbc` table to store the jakarta messaging bindings.
get the `messaging-activemq` `server` `journal-jms-bindings-table` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-jms-bindings-table)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-jms-bindings-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-large-messages-table`
name of the `jdbc` table to store the large messages.
get the `messaging-activemq` `server` `journal-large-messages-table` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-large-messages-table)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-large-messages-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-max-attic-files`
the maximum number of journal files stored in the attic in case of corrupted journal files.
get the `messaging-activemq` `server` `journal-max-attic-files` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-max-attic-files)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-max-attic-files`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-max-io`
the maximum number of write requests that can be in the `aio` queue at any one time.
get the `messaging-activemq` `server` `journal-max-io` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-max-io)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-max-io`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-messages-table`
name of the `jdbc` table to store the messages.
get the `messaging-activemq` `server` `journal-messages-table` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-messages-table)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-messages-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-min-files`
how many journal files to `pre-create`.
get the `messaging-activemq` `server` `journal-min-files` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-min-files)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-min-files`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-node-manager-store-table`
name of the `jdbc` table to store the node manager.
get the `messaging-activemq` `server` `journal-node-manager-store-table` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-node-manager-store-table)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-node-manager-store-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-page-store-table`
name of the `jdbc` table to store pages.
get the `messaging-activemq` `server` `journal-page-store-table` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-page-store-table)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-page-store-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-pool-files`
the number of journal files that can be reused. `activemq` will create as many files as needed however when reclaiming files it will shrink back to the value (-`1` means no limit).
get the `messaging-activemq` `server` `journal-pool-files` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-pool-files)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-pool-files`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-sync-non-transactional`
whether to wait for non transaction data to be synced to the journal before returning a response to the client.
get the `messaging-activemq` `server` `journal-sync-non-transactional` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-sync-non-transactional)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-sync-non-transactional`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-sync-transactional`
whether to wait for transaction data to be synchronized to the journal before returning a response to the client.
get the `messaging-activemq` `server` `journal-sync-transactional` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-sync-transactional)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-sync-transactional`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `journal-type`
the type of journal to use.
get the `messaging-activemq` `server` `journal-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=journal-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `journal-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `log-journal-write-rate`
whether to periodically log the `journal's` write rate and flush rate.
get the `messaging-activemq` `server` `log-journal-write-rate` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=log-journal-write-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `log-journal-write-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `management-address`
address to send management messages to.
get the `messaging-activemq` `server` `management-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=management-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `management-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `management-notification-address`
the name of the address that consumers bind to  to receive management notifications.
get the `messaging-activemq` `server` `management-notification-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=management-notification-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `management-notification-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `memory-measure-interval`
frequency to sample `jvm` memory in ms (or -`1` to disable memory sampling)
get the `messaging-activemq` `server` `memory-measure-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=memory-measure-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `memory-measure-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `memory-warning-threshold`
percentage of available memory which if exceeded results in a warning log
get the `messaging-activemq` `server` `memory-warning-threshold` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=memory-warning-threshold)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `memory-warning-threshold`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `message-counter-max-day-history`
how many days to keep message counter history.
get the `messaging-activemq` `server` `message-counter-max-day-history` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=message-counter-max-day-history)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `message-counter-max-day-history`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `message-counter-sample-period`
the sample period (in ms) to use for message counters.
get the `messaging-activemq` `server` `message-counter-sample-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=message-counter-sample-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `message-counter-sample-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `message-expiry-scan-period`
how often (in ms) to scan for expired messages.
get the `messaging-activemq` `server` `message-expiry-scan-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=message-expiry-scan-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `message-expiry-scan-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `message-expiry-thread-priority`
the priority of the thread expiring messages.
get the `messaging-activemq` `server` `message-expiry-thread-priority` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=message-expiry-thread-priority)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `message-expiry-thread-priority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `network-check-list`
this is a comma separated list, no spaces, of `dns` or ips (it should accept `ipv6`) to be used to validate the network.
get the `messaging-activemq` `server` `network-check-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=network-check-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `network-check-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `network-check-nic`
the `nic` (network interface controller) to be used to validate the network.
get the `messaging-activemq` `server` `network-check-nic` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=network-check-nic)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `network-check-nic`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `network-check-period`
the frequency of how often we should check if the network is still up.
get the `messaging-activemq` `server` `network-check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=network-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `network-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `network-check-ping-command`
the command used to ping `ipv4` addresses.
get the `messaging-activemq` `server` `network-check-ping-command` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=network-check-ping-command)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `network-check-ping-command`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `network-check-ping6-command`
the command used to ping `ipv6` addresses.
get the `messaging-activemq` `server` `network-check-ping6-command` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=network-check-ping6-command)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `network-check-ping6-command`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `network-check-timeout`
the timeout used on the ping.
get the `messaging-activemq` `server` `network-check-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=network-check-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `network-check-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `network-check-url-list`
the list of `http` `uris` to be used to validate the network.
get the `messaging-activemq` `server` `network-check-url-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=network-check-url-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `network-check-url-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `outgoing-interceptors`
the list of outgoing interceptor classes used by this server.
get the `messaging-activemq` `server` `outgoing-interceptors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=outgoing-interceptors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `outgoing-interceptors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `override-in-vm-security`
whether the `activemq` server will override security credentials for `in-vm` connections.
get the `messaging-activemq` `server` `override-in-vm-security` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=override-in-vm-security)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `override-in-vm-security`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `page-max-concurrent-io`
the maximum number of concurrent reads allowed on paging
get the `messaging-activemq` `server` `page-max-concurrent-io` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=page-max-concurrent-io)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `page-max-concurrent-io`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `perf-blast-pages`
number of pages to add to check the journal performance (only meant to be used to test performance of pages).
get the `messaging-activemq` `server` `perf-blast-pages` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=perf-blast-pages)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `perf-blast-pages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `persist-delivery-count-before-delivery`
whether the delivery count is persisted before delivery. false means that this only happens after a message has been cancelled.
get the `messaging-activemq` `server` `persist-delivery-count-before-delivery` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=persist-delivery-count-before-delivery)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `persist-delivery-count-before-delivery`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `persist-id-cache`
whether ids are persisted to the journal.
get the `messaging-activemq` `server` `persist-id-cache` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=persist-id-cache)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `persist-id-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `persistence-enabled`
whether the server will use the file based journal for persistence.
get the `messaging-activemq` `server` `persistence-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=persistence-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `persistence-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `run-sync-speed-test`
whether on startup to perform a diagnostic test on how fast your disk can sync. useful when determining performance issues.
get the `messaging-activemq` `server` `run-sync-speed-test` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=run-sync-speed-test)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `run-sync-speed-test`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-journal-type`
the effectively used journal type (it may differs from the configured one if the configured one is not supported).
get the `messaging-activemq` `server` `runtime-journal-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=runtime-journal-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-journal-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `scheduled-thread-pool-max-size`
the number of threads that the main scheduled thread pool has.
get the `messaging-activemq` `server` `scheduled-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=scheduled-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `scheduled-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-domain`
the security domain to use to verify user and role information.
get the `messaging-activemq` `server` `security-domain` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-enabled`
whether security is enabled.
get the `messaging-activemq` `server` `security-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=security-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-invalidation-interval`
how long (in ms) to wait before invalidating the security cache.
get the `messaging-activemq` `server` `security-invalidation-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=security-invalidation-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-invalidation-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `server-dump-interval`
how often to dump basic runtime information to the server log. a value less than `1` disables this feature.
get the `messaging-activemq` `server` `server-dump-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=server-dump-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `server-dump-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `started`
whether this server is started.
get the `messaging-activemq` `server` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `statistics-enabled`
whether gathering of statistics such as message counters are enabled.
get the `messaging-activemq` `server` `statistics-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `thread-pool-max-size`
the number of threads that the main thread pool has. -`1` means no limit.
get the `messaging-activemq` `server` `thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `transaction-timeout`
default duration before a transaction will be rolled back after create time. if a transaction manager is used, this value will be replaced by that of the tm.
get the `messaging-activemq` `server` `transaction-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=transaction-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `transaction-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `transaction-timeout-scan-period`
how often (in ms) to scan for timeout transactions.
get the `messaging-activemq` `server` `transaction-timeout-scan-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=transaction-timeout-scan-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `transaction-timeout-scan-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `version`
the `server's` version.
get the `messaging-activemq` `server` `version` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=version)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `wild-card-routing-enabled`
whether the server supports wild card routing.
get the `messaging-activemq` `server` `wild-card-routing-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>:read-attribute(name=wild-card-routing-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `wild-card-routing-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `discovery-group`
operation: `/subsystem=messaging-activemq/server=<server name>/discovery-group=<discovery-group name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `discovery-group` use '*' for `<discovery-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `initial-wait-timeout`
period, in ms, to wait for an initial broadcast to give us at least one node in the cluster.
get the `messaging-activemq` `server` `discovery-group` `initial-wait-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/discovery-group=<discovery-group name>:read-attribute(name=initial-wait-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `initial-wait-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `jgroups-channel`
references the name of a `jgroups` channel.  if undefined, the default channel will be used.
get the `messaging-activemq` `server` `discovery-group` `jgroups-channel` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/discovery-group=<discovery-group name>:read-attribute(name=jgroups-channel)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `jgroups-channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `jgroups-cluster`
the logical cluster name.
get the `messaging-activemq` `server` `discovery-group` `jgroups-cluster` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/discovery-group=<discovery-group name>:read-attribute(name=jgroups-cluster)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `jgroups-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `jgroups-stack`
references the name of a `jgroups` channel factory.
get the `messaging-activemq` `server` `discovery-group` `jgroups-stack` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/discovery-group=<discovery-group name>:read-attribute(name=jgroups-stack)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `jgroups-stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `refresh-timeout`
period the discovery group waits after receiving the last broadcast from a particular server before removing that `server's` connector pair entry from its list.
get the `messaging-activemq` `server` `discovery-group` `refresh-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/discovery-group=<discovery-group name>:read-attribute(name=refresh-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `refresh-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `socket-binding`
the discovery group socket binding.
get the `messaging-activemq` `server` `discovery-group` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/discovery-group=<discovery-group name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `discovery-group` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `jgroups-discovery-group`
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-discovery-group=<jgroups-discovery-group name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `jgroups-discovery-group` use '*' for `<jgroups-discovery-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `jgroups-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `initial-wait-timeout`
period, in ms, to wait for an initial broadcast to give us at least one node in the cluster.
get the `messaging-activemq` `server` `jgroups-discovery-group` `initial-wait-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=initial-wait-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `initial-wait-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-channel`
references the name of a `jgroups` channel.  if undefined, the default channel will be used.
get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-channel` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=jgroups-channel)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-cluster`
the logical cluster name.
get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-cluster` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=jgroups-cluster)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-stack`
references the name of a `jgroups` channel factory.
get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-stack` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=jgroups-stack)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `jgroups-stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `refresh-timeout`
period the discovery group waits after receiving the last broadcast from a particular server before removing that `server's` connector pair entry from its list.
get the `messaging-activemq` `server` `jgroups-discovery-group` `refresh-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-discovery-group=<jgroups-discovery-group name>:read-attribute(name=refresh-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-discovery-group` `refresh-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `check-for-live-server`
whether to check the cluster for another server using the same server id when starting up.
get the `messaging-activemq` `server` `ha-policy` `replication-primary` `check-for-live-server` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-primary:read-attribute(name=check-for-live-server)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `check-for-live-server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `cluster-name`
name of the cluster used for replication. if it is undefined, the name of the first cluster connection defined in the configuration will be used.
get the `messaging-activemq` `server` `ha-policy` `replication-primary` `cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-primary:read-attribute(name=cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `group-name`
if set, backup servers will only pair with live servers with matching `group-name`.
get the `messaging-activemq` `server` `ha-policy` `replication-primary` `group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-primary:read-attribute(name=group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `initial-replication-sync-timeout`
how long to wait until the initiation replication is synchronized.
get the `messaging-activemq` `server` `ha-policy` `replication-primary` `initial-replication-sync-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-primary:read-attribute(name=initial-replication-sync-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `initial-replication-sync-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `synchronized-with-backup`
the replication synchronization process with the backup server is complete.
get the `messaging-activemq` `server` `ha-policy` `replication-primary` `synchronized-with-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-primary:read-attribute(name=synchronized-with-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-primary` `synchronized-with-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-port-offset`
the offset to use for the connectors and acceptors when creating a new backup server.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-port-offset` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated:read-attribute(name=backup-port-offset)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-port-offset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-request-retries`
how many times the live server will try to request a backup, -`1` means for ever.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-request-retries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated:read-attribute(name=backup-request-retries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-request-retries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-request-retry-interval`
how long (in ms) to wait for retries between attempts to request a backup server.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-request-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated:read-attribute(name=backup-request-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `backup-request-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `excluded-connectors`
the connectors that must not have their port offset.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `excluded-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated:read-attribute(name=excluded-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `excluded-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `max-backups`
whether or not this live server will accept backup requests from other live servers.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `max-backups` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated:read-attribute(name=max-backups)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `max-backups`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `request-backup`
if true then the server will request a backup on another node.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `request-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated:read-attribute(name=request-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `request-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `allow-failback`
whether a server will automatically stop when a another places a request to take over its place. the use case is when a regular server stops and its backup takes over its duties, later the main server restarts and requests the server (the former backup) to stop operating.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `allow-failback` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=allow-failback)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `allow-failback`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `cluster-name`
name of the cluster used for replication. if it is undefined, the name of the first cluster connection defined in the configuration will be used.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `group-name`
if set, backup servers will only pair with live servers with matching `group-name`.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `initial-replication-sync-timeout`
how long to wait until the initiation replication is synchronized.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `initial-replication-sync-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=initial-replication-sync-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `initial-replication-sync-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `max-saved-replicated-journal-size`
this specifies how many times a replicated backup server can restart after moving its files on start. once there are this number of backup journal files the server will stop permanently after if fails back.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `max-saved-replicated-journal-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=max-saved-replicated-journal-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `max-saved-replicated-journal-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `restart-backup`
will this server, if a backup, restart once it has been stopped because of `failback` or scaling down.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `restart-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=restart-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `restart-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down`
configure whether this server send its messages to another live server in the `scale-down` cluster when it is shutdown cleanly.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=scale-down)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-cluster-name`
name of the cluster used to scale down.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=scale-down-cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-connectors`
list of connectors used to form the `scale-down` cluster.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=scale-down-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-discovery-group`
name of the discovery group used to build the `scale-down` cluster
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=scale-down-discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-group-name`
name of the group used to scale down.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=scale-down-group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `scale-down-group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `synchronized-with-live`
the replication synchronization process with the live server is complete.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `synchronized-with-live` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=secondary:read-attribute(name=synchronized-with-live)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `secondary` `synchronized-with-live`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `check-for-live-server`
whether to check the cluster for another server using the same server id when starting up.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `check-for-live-server` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=primary:read-attribute(name=check-for-live-server)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `check-for-live-server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `cluster-name`
name of the cluster used for replication. if it is undefined, the name of the first cluster connection defined in the configuration will be used.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=primary:read-attribute(name=cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `group-name`
if set, backup servers will only pair with live servers with matching `group-name`.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=primary:read-attribute(name=group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `initial-replication-sync-timeout`
how long to wait until the initiation replication is synchronized.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `initial-replication-sync-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=primary:read-attribute(name=initial-replication-sync-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `initial-replication-sync-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `synchronized-with-backup`
the replication synchronization process with the backup server is complete.
get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `synchronized-with-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-colocated/configuration=primary:read-attribute(name=synchronized-with-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-colocated` `configuration` `primary` `synchronized-with-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down`
configure whether this server send its messages to another live server in the `scale-down` cluster when it is shutdown cleanly.
get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=live-only:read-attribute(name=scale-down)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-cluster-name`
name of the cluster used to scale down.
get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=live-only:read-attribute(name=scale-down-cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-connectors`
list of connectors used to form the `scale-down` cluster.
get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=live-only:read-attribute(name=scale-down-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-discovery-group`
name of the discovery group used to build the `scale-down` cluster
get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=live-only:read-attribute(name=scale-down-discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-group-name`
name of the group used to scale down.
get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=live-only:read-attribute(name=scale-down-group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `live-only` `scale-down-group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-primary` `failover-on-server-shutdown`
whether the server must `failover` when it is normally shutdown.
get the `messaging-activemq` `server` `ha-policy` `shared-store-primary` `failover-on-server-shutdown` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-primary:read-attribute(name=failover-on-server-shutdown)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-primary` `failover-on-server-shutdown`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `allow-failback`
whether a server will automatically stop when a another places a request to take over its place. the use case is when a regular server stops and its backup takes over its duties, later the main server restarts and requests the server (the former backup) to stop operating.
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `allow-failback` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=allow-failback)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `allow-failback`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `failover-on-server-shutdown`
whether the server must `failover` when it is normally shutdown.
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `failover-on-server-shutdown` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=failover-on-server-shutdown)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `failover-on-server-shutdown`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `restart-backup`
will this server, if a backup, restart once it has been stopped because of `failback` or scaling down.
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `restart-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=restart-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `restart-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down`
configure whether this server send its messages to another live server in the `scale-down` cluster when it is shutdown cleanly.
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=scale-down)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-cluster-name`
name of the cluster used to scale down.
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=scale-down-cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-connectors`
list of connectors used to form the `scale-down` cluster.
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=scale-down-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-discovery-group`
name of the discovery group used to build the `scale-down` cluster
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=scale-down-discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-group-name`
name of the group used to scale down.
get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-secondary:read-attribute(name=scale-down-group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-secondary` `scale-down-group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `allow-failback`
whether a server will automatically stop when a another places a request to take over its place. the use case is when a regular server stops and its backup takes over its duties, later the main server restarts and requests the server (the former backup) to stop operating.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `allow-failback` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=allow-failback)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `allow-failback`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `cluster-name`
name of the cluster used for replication. if it is undefined, the name of the first cluster connection defined in the configuration will be used.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `group-name`
if set, backup servers will only pair with live servers with matching `group-name`.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `initial-replication-sync-timeout`
how long to wait until the initiation replication is synchronized.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `initial-replication-sync-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=initial-replication-sync-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `initial-replication-sync-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `max-saved-replicated-journal-size`
this specifies how many times a replicated backup server can restart after moving its files on start. once there are this number of backup journal files the server will stop permanently after if fails back.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `max-saved-replicated-journal-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=max-saved-replicated-journal-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `max-saved-replicated-journal-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `restart-backup`
will this server, if a backup, restart once it has been stopped because of `failback` or scaling down.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `restart-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=restart-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `restart-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down`
configure whether this server send its messages to another live server in the `scale-down` cluster when it is shutdown cleanly.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=scale-down)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-cluster-name`
name of the cluster used to scale down.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=scale-down-cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-connectors`
list of connectors used to form the `scale-down` cluster.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=scale-down-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-discovery-group`
name of the discovery group used to build the `scale-down` cluster
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=scale-down-discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-group-name`
name of the group used to scale down.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=scale-down-group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `scale-down-group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `synchronized-with-live`
the replication synchronization process with the live server is complete.
get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `synchronized-with-live` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=replication-secondary:read-attribute(name=synchronized-with-live)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `replication-secondary` `synchronized-with-live`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-port-offset`
the offset to use for the connectors and acceptors when creating a new backup server.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-port-offset` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated:read-attribute(name=backup-port-offset)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-port-offset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-request-retries`
how many times the live server will try to request a backup, -`1` means for ever.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-request-retries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated:read-attribute(name=backup-request-retries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-request-retries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-request-retry-interval`
how long (in ms) to wait for retries between attempts to request a backup server.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-request-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated:read-attribute(name=backup-request-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `backup-request-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `max-backups`
whether or not this live server will accept backup requests from other live servers.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `max-backups` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated:read-attribute(name=max-backups)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `max-backups`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `request-backup`
if true then the server will request a backup on another node.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `request-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated:read-attribute(name=request-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `request-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `allow-failback`
whether a server will automatically stop when a another places a request to take over its place. the use case is when a regular server stops and its backup takes over its duties, later the main server restarts and requests the server (the former backup) to stop operating.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `allow-failback` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=allow-failback)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `allow-failback`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `failover-on-server-shutdown`
whether the server must `failover` when it is normally shutdown.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `failover-on-server-shutdown` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=failover-on-server-shutdown)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `failover-on-server-shutdown`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `restart-backup`
will this server, if a backup, restart once it has been stopped because of `failback` or scaling down.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `restart-backup` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=restart-backup)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `restart-backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down`
configure whether this server send its messages to another live server in the `scale-down` cluster when it is shutdown cleanly.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=scale-down)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-cluster-name`
name of the cluster used to scale down.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-cluster-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=scale-down-cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-connectors`
list of connectors used to form the `scale-down` cluster.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=scale-down-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-discovery-group`
name of the discovery group used to build the `scale-down` cluster
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=scale-down-discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-group-name`
name of the group used to scale down.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-group-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=secondary:read-attribute(name=scale-down-group-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `secondary` `scale-down-group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `primary` `failover-on-server-shutdown`
whether the server must `failover` when it is normally shutdown.
get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `primary` `failover-on-server-shutdown` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/ha-policy=shared-store-colocated/configuration=primary:read-attribute(name=failover-on-server-shutdown)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `ha-policy` `shared-store-colocated` `configuration` `primary` `failover-on-server-shutdown`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `connection-factory`
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `connection-factory` use '*' for `<connection-factory name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `auto-group`
whether or not message grouping is automatically used
get the `messaging-activemq` `server` `connection-factory` `auto-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=auto-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `auto-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `block-on-acknowledge`
true to set block on acknowledge.
get the `messaging-activemq` `server` `connection-factory` `block-on-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=block-on-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `block-on-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `block-on-durable-send`
true to set block on durable send.
get the `messaging-activemq` `server` `connection-factory` `block-on-durable-send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=block-on-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `block-on-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `block-on-non-durable-send`
true to set block on non durable send.
get the `messaging-activemq` `server` `connection-factory` `block-on-non-durable-send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=block-on-non-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `block-on-non-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `cache-large-message-client`
true to cache large messages.
get the `messaging-activemq` `server` `connection-factory` `cache-large-message-client` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=cache-large-message-client)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `cache-large-message-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `call-failover-timeout`
the timeout to use when fail over is in process (in ms).
get the `messaging-activemq` `server` `connection-factory` `call-failover-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=call-failover-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `call-failover-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `call-timeout`
the call time out.
get the `messaging-activemq` `server` `connection-factory` `call-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=call-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `call-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `client-failure-check-period`
the client failure check period.
get the `messaging-activemq` `server` `connection-factory` `client-failure-check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=client-failure-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `client-failure-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `client-id`
the client id.
get the `messaging-activemq` `server` `connection-factory` `client-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `compress-large-messages`
whether large messages should be compressed.
get the `messaging-activemq` `server` `connection-factory` `compress-large-messages` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=compress-large-messages)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `compress-large-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `confirmation-window-size`
the confirmation window size.
get the `messaging-activemq` `server` `connection-factory` `confirmation-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=confirmation-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `confirmation-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `connection-load-balancing-policy-class-name`
name of a class implementing a `client-side` load balancing policy that a client can use to load balance sessions across different nodes in a cluster.
get the `messaging-activemq` `server` `connection-factory` `connection-load-balancing-policy-class-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=connection-load-balancing-policy-class-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `connection-load-balancing-policy-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `connection-ttl`
the connection `ttl`.
get the `messaging-activemq` `server` `connection-factory` `connection-ttl` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=connection-ttl)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `connection-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `connectors`
defines the connectors. these are stored in a map by connector name (with an undefined value). it is possible to pass a list of connector names when writing this attribute.
get the `messaging-activemq` `server` `connection-factory` `connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `consumer-max-rate`
the consumer max rate.
get the `messaging-activemq` `server` `connection-factory` `consumer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=consumer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `consumer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `consumer-window-size`
the consumer window size.
get the `messaging-activemq` `server` `connection-factory` `consumer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=consumer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `consumer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-allow-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `connection-factory` `deserialization-allow-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=deserialization-allow-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-allow-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-black-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `connection-factory` `deserialization-black-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=deserialization-black-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-black-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-block-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `connection-factory` `deserialization-block-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=deserialization-block-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-block-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-white-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `connection-factory` `deserialization-white-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=deserialization-white-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `deserialization-white-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `discovery-group`
the discovery group name.
get the `messaging-activemq` `server` `connection-factory` `discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `dups-ok-batch-size`
the dups ok batch size.
get the `messaging-activemq` `server` `connection-factory` `dups-ok-batch-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=dups-ok-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `dups-ok-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `entries`
the `jndi` names the connection factory should be bound to.
get the `messaging-activemq` `server` `connection-factory` `entries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `factory-type`
the type of connection factory.
get the `messaging-activemq` `server` `connection-factory` `factory-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=factory-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `factory-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `failover-on-initial-connection`
true to fail over on initial connection.
get the `messaging-activemq` `server` `connection-factory` `failover-on-initial-connection` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=failover-on-initial-connection)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `failover-on-initial-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `group-id`
the group id.
get the `messaging-activemq` `server` `connection-factory` `group-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=group-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `group-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `ha`
whether the connection factory supports high availability.
get the `messaging-activemq` `server` `connection-factory` `ha` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=ha)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `ha`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `initial-message-packet-size`
the initial size of messages created through this factory.
get the `messaging-activemq` `server` `connection-factory` `initial-message-packet-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=initial-message-packet-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `initial-message-packet-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `max-retry-interval`
the max retry interval.
get the `messaging-activemq` `server` `connection-factory` `max-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=max-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `max-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `min-large-message-size`
the min large message size.
get the `messaging-activemq` `server` `connection-factory` `min-large-message-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=min-large-message-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `min-large-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `pre-acknowledge`
true to `pre-acknowledge`.
get the `messaging-activemq` `server` `connection-factory` `pre-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=pre-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `pre-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `producer-max-rate`
the producer max rate.
get the `messaging-activemq` `server` `connection-factory` `producer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=producer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `producer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `producer-window-size`
the producer window size.
get the `messaging-activemq` `server` `connection-factory` `producer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=producer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `producer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `protocol-manager-factory`
the protocol manager factory used by this connection factory (it must implement `org.apache.activemq.artemis.spi.core.remoting.clientprotocolmanagerfactory`).
get the `messaging-activemq` `server` `connection-factory` `protocol-manager-factory` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=protocol-manager-factory)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `protocol-manager-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `reconnect-attempts`
the reconnect attempts.
get the `messaging-activemq` `server` `connection-factory` `reconnect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `retry-interval`
the retry interval.
get the `messaging-activemq` `server` `connection-factory` `retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `retry-interval-multiplier`
the retry interval multiplier.
get the `messaging-activemq` `server` `connection-factory` `retry-interval-multiplier` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=retry-interval-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `retry-interval-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `scheduled-thread-pool-max-size`
the scheduled thread pool max size.
get the `messaging-activemq` `server` `connection-factory` `scheduled-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=scheduled-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `scheduled-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `thread-pool-max-size`
the thread pool max size.
get the `messaging-activemq` `server` `connection-factory` `thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `transaction-batch-size`
the transaction batch size.
get the `messaging-activemq` `server` `connection-factory` `transaction-batch-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=transaction-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `transaction-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `use-global-pools`
true to use global pools.
get the `messaging-activemq` `server` `connection-factory` `use-global-pools` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=use-global-pools)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `use-global-pools`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `use-topology-for-load-balancing`
whether to use topology information from the cluster to connect to it. if set to 'false', only the initial connector will be used.
get the `messaging-activemq` `server` `connection-factory` `use-topology-for-load-balancing` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connection-factory=<connection-factory name>:read-attribute(name=use-topology-for-load-balancing)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connection-factory` `use-topology-for-load-balancing`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `http-acceptor`
operation: `/subsystem=messaging-activemq/server=<server name>/http-acceptor=<http-acceptor name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `http-acceptor` use '*' for `<http-acceptor name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `http-acceptor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `http-listener`
the `undertow's` `http-listener` that handles `http` upgrade requests.
get the `messaging-activemq` `server` `http-acceptor` `http-listener` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-acceptor=<http-acceptor name>:read-attribute(name=http-listener)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `http-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `params`
a `key-value` pair understood by the acceptor `factory-class` and used to configure it.
get the `messaging-activemq` `server` `http-acceptor` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-acceptor=<http-acceptor name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `ssl-context`
the `ssl` context that the acceptor will use to accept connections.
get the `messaging-activemq` `server` `http-acceptor` `ssl-context` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-acceptor=<http-acceptor name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `upgrade-legacy`
also accepts to upgrade `http` request from legacy (`hornetq`) clients.
get the `messaging-activemq` `server` `http-acceptor` `upgrade-legacy` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-acceptor=<http-acceptor name>:read-attribute(name=upgrade-legacy)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-acceptor` `upgrade-legacy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `connector-service`
operation: `/subsystem=messaging-activemq/server=<server name>/connector-service=<connector-service name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `connector-service` use '*' for `<connector-service name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `connector-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connector-service` `factory-class`
class name of the factory class that can instantiate the connector service.
get the `messaging-activemq` `server` `connector-service` `factory-class` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connector-service=<connector-service name>:read-attribute(name=factory-class)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connector-service` `factory-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connector-service` `params`
a `key/value` pair understood by the connector `service's` `factory-class`
get the `messaging-activemq` `server` `connector-service` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connector-service=<connector-service name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connector-service` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `http-connector`
operation: `/subsystem=messaging-activemq/server=<server name>/http-connector=<http-connector name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `http-connector` use '*' for `<http-connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `http-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-connector` `endpoint`
the `http-acceptor` that serves as the endpoint of this `http-connector`.
get the `messaging-activemq` `server` `http-connector` `endpoint` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-connector=<http-connector name>:read-attribute(name=endpoint)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-connector` `endpoint`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `server` `http-connector` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-connector=<http-connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-connector` `server-name`
the name of the `activemq` artemis server that will be connected to on the remote server. if undefined, the name of the parent `activemq` artemis server will be used (suitable if the `http-connector` is used to connect to the parent server)
get the `messaging-activemq` `server` `http-connector` `server-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-connector=<http-connector name>:read-attribute(name=server-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-connector` `server-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-connector` `socket-binding`
the socket binding that the connector will use to create connections
get the `messaging-activemq` `server` `http-connector` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-connector=<http-connector name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-connector` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `http-connector` `ssl-context`
the `ssl` context that the connector will use to connect
get the `messaging-activemq` `server` `http-connector` `ssl-context` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/http-connector=<http-connector name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `http-connector` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `in-vm-connector`
operation: `/subsystem=messaging-activemq/server=<server name>/in-vm-connector=<in-vm-connector name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `in-vm-connector` use '*' for `<in-vm-connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `in-vm-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `in-vm-connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `server` `in-vm-connector` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/in-vm-connector=<in-vm-connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `in-vm-connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `in-vm-connector` `server-id`
the server id.
get the `messaging-activemq` `server` `in-vm-connector` `server-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/in-vm-connector=<in-vm-connector name>:read-attribute(name=server-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `in-vm-connector` `server-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `jgroups-broadcast-group`
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-broadcast-group=<jgroups-broadcast-group name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `jgroups-broadcast-group` use '*' for `<jgroups-broadcast-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `jgroups-broadcast-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `broadcast-period`
the period in milliseconds between consecutive broadcasts.
get the `messaging-activemq` `server` `jgroups-broadcast-group` `broadcast-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-broadcast-group=<jgroups-broadcast-group name>:read-attribute(name=broadcast-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `broadcast-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `connectors`
specifies the names of connectors that will be broadcast.
get the `messaging-activemq` `server` `jgroups-broadcast-group` `connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-broadcast-group=<jgroups-broadcast-group name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-channel`
references the name of a `jgroups` channel.  if undefined, the default channel will be used.
get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-channel` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-broadcast-group=<jgroups-broadcast-group name>:read-attribute(name=jgroups-channel)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-cluster`
the logical cluster name.
get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-cluster` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-broadcast-group=<jgroups-broadcast-group name>:read-attribute(name=jgroups-cluster)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-stack`
references the name of a `jgroups` channel factory.
get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-stack` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-broadcast-group=<jgroups-broadcast-group name>:read-attribute(name=jgroups-stack)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `jgroups-stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `started`
whether the broadcast group is started.
get the `messaging-activemq` `server` `jgroups-broadcast-group` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jgroups-broadcast-group=<jgroups-broadcast-group name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jgroups-broadcast-group` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `security-setting`
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `security-setting` use '*' for `<security-setting name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `security-setting`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `security-setting` `role`
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `security-setting` `role` use '*' for `<role name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `security-setting` `role`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `consume`
this permission allows the user to consume a message from a queue bound to matching addresses.
get the `messaging-activemq` `server` `security-setting` `role` `consume` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-attribute(name=consume)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `consume`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `create-durable-queue`
this permission allows the user to create a durable queue.
get the `messaging-activemq` `server` `security-setting` `role` `create-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-attribute(name=create-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `create-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `create-non-durable-queue`
this permission allows the user to create a temporary queue.
get the `messaging-activemq` `server` `security-setting` `role` `create-non-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-attribute(name=create-non-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `create-non-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `delete-durable-queue`
this permission allows the user to delete a durable queue.
get the `messaging-activemq` `server` `security-setting` `role` `delete-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-attribute(name=delete-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `delete-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `delete-non-durable-queue`
this permission allows the user to delete a temporary queue.
get the `messaging-activemq` `server` `security-setting` `role` `delete-non-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-attribute(name=delete-non-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `delete-non-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `manage`
this permission allows the user to invoke management operations by sending management messages to the management address.
get the `messaging-activemq` `server` `security-setting` `role` `manage` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-attribute(name=manage)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `manage`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `send`
this permission allows the user to send a message to matching addresses.
get the `messaging-activemq` `server` `security-setting` `role` `send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/security-setting=<security-setting name>/role=<role name>:read-attribute(name=send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `security-setting` `role` `send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `divert`
operation: `/subsystem=messaging-activemq/server=<server name>/divert=<divert name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `divert` use '*' for `<divert name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `divert`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `divert` `divert-address`
address to divert from
get the `messaging-activemq` `server` `divert` `divert-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/divert=<divert name>:read-attribute(name=divert-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `divert` `divert-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `divert` `exclusive`
whether the divert is exclusive, meaning that the message is diverted to the new address, and does not go to the old address at all.
get the `messaging-activemq` `server` `divert` `exclusive` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/divert=<divert name>:read-attribute(name=exclusive)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `divert` `exclusive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `divert` `filter`
an optional filter string. if specified then only messages which match the filter expression specified will be diverted. the filter string follows the `activemq` filter expression syntax described in the `activemq` documentation.
get the `messaging-activemq` `server` `divert` `filter` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/divert=<divert name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `divert` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `divert` `forwarding-address`
address to divert to
get the `messaging-activemq` `server` `divert` `forwarding-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/divert=<divert name>:read-attribute(name=forwarding-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `divert` `forwarding-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `divert` `routing-name`
routing name of the divert
get the `messaging-activemq` `server` `divert` `routing-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/divert=<divert name>:read-attribute(name=routing-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `divert` `routing-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `divert` `transformer-class-name`
the name of a class used to transform the `message's` body or properties before it is diverted.
get the `messaging-activemq` `server` `divert` `transformer-class-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/divert=<divert name>:read-attribute(name=transformer-class-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `divert` `transformer-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `pooled-connection-factory`
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `pooled-connection-factory` use '*' for `<pooled-connection-factory name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `pooled-connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `allow-local-transactions`
allow local transactions for outbond jakarta messaging sessions (it does not apply to `jmscontext` that explicitly disallows it).
get the `messaging-activemq` `server` `pooled-connection-factory` `allow-local-transactions` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=allow-local-transactions)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `allow-local-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `auto-group`
the `autogroup`.
get the `messaging-activemq` `server` `pooled-connection-factory` `auto-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=auto-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `auto-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-acknowledge`
true to set block on acknowledge.
get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=block-on-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-durable-send`
true to set block on durable send.
get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-durable-send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=block-on-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-non-durable-send`
true to set block on non durable send.
get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-non-durable-send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=block-on-non-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `block-on-non-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `cache-large-message-client`
true to cache large messages.
get the `messaging-activemq` `server` `pooled-connection-factory` `cache-large-message-client` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=cache-large-message-client)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `cache-large-message-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `call-failover-timeout`
the timeout to use when fail over is in process (in ms).
get the `messaging-activemq` `server` `pooled-connection-factory` `call-failover-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=call-failover-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `call-failover-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `call-timeout`
the call time out.
get the `messaging-activemq` `server` `pooled-connection-factory` `call-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=call-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `call-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `client-failure-check-period`
the client failure check period.
get the `messaging-activemq` `server` `pooled-connection-factory` `client-failure-check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=client-failure-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `client-failure-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `client-id`
the client id.
get the `messaging-activemq` `server` `pooled-connection-factory` `client-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `compress-large-messages`
whether large messages should be compressed.
get the `messaging-activemq` `server` `pooled-connection-factory` `compress-large-messages` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=compress-large-messages)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `compress-large-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `confirmation-window-size`
the confirmation window size.
get the `messaging-activemq` `server` `pooled-connection-factory` `confirmation-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=confirmation-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `confirmation-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `connection-load-balancing-policy-class-name`
name of a class implementing a `client-side` load balancing policy that a client can use to load balance sessions across different nodes in a cluster.
get the `messaging-activemq` `server` `pooled-connection-factory` `connection-load-balancing-policy-class-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=connection-load-balancing-policy-class-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `connection-load-balancing-policy-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `connection-ttl`
the connection `ttl`.
get the `messaging-activemq` `server` `pooled-connection-factory` `connection-ttl` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=connection-ttl)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `connection-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `connectors`
defines the connectors. these are stored in a map by connector name (with an undefined value). it is possible to pass a list of connector names when writing this attribute.
get the `messaging-activemq` `server` `pooled-connection-factory` `connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `consumer-max-rate`
the consumer max rate.
get the `messaging-activemq` `server` `pooled-connection-factory` `consumer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=consumer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `consumer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `consumer-window-size`
the consumer window size.
get the `messaging-activemq` `server` `pooled-connection-factory` `consumer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=consumer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `consumer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `credential-reference`
credential (from credential store) to authenticate the pooled connection factory
get the `messaging-activemq` `server` `pooled-connection-factory` `credential-reference` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-allow-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-allow-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-allow-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-allow-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-black-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-black-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-black-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-black-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-block-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-block-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-block-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-block-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-white-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-white-list` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-white-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `deserialization-white-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `discovery-group`
the discovery group name.
get the `messaging-activemq` `server` `pooled-connection-factory` `discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `dups-ok-batch-size`
the dups ok batch size.
get the `messaging-activemq` `server` `pooled-connection-factory` `dups-ok-batch-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=dups-ok-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `dups-ok-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `enlistment-trace`
enables `ironjacamar` to record enlistment traces for this `pooled-connection-factory`. this attribute is undefined by default and the behaviour is driven by the presence of the `ironjacamar.disable_enlistment_trace` system property.
get the `messaging-activemq` `server` `pooled-connection-factory` `enlistment-trace` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=enlistment-trace)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `enlistment-trace`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `entries`
the `jndi` names the connection factory should be bound to.
get the `messaging-activemq` `server` `pooled-connection-factory` `entries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `failover-on-initial-connection`
true to fail over on initial connection.
get the `messaging-activemq` `server` `pooled-connection-factory` `failover-on-initial-connection` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=failover-on-initial-connection)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `failover-on-initial-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `group-id`
the group id.
get the `messaging-activemq` `server` `pooled-connection-factory` `group-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=group-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `group-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `ha`
whether the connection factory supports high availability.
get the `messaging-activemq` `server` `pooled-connection-factory` `ha` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=ha)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `ha`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `initial-connect-attempts`
the number of attempts to connect initially with this factory.
get the `messaging-activemq` `server` `pooled-connection-factory` `initial-connect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=initial-connect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `initial-connect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `initial-message-packet-size`
the initial size of messages created through this factory.
get the `messaging-activemq` `server` `pooled-connection-factory` `initial-message-packet-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=initial-message-packet-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `initial-message-packet-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `jndi-params`
the `jndi` `params` to use for locating the destination for incoming connections.
get the `messaging-activemq` `server` `pooled-connection-factory` `jndi-params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=jndi-params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `jndi-params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `managed-connection-pool`
the class name of the managed connection pool used by this `pooled-connection-factory`.
get the `messaging-activemq` `server` `pooled-connection-factory` `managed-connection-pool` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=managed-connection-pool)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `managed-connection-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `max-pool-size`
the maximum size for the pool
get the `messaging-activemq` `server` `pooled-connection-factory` `max-pool-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `max-retry-interval`
the max retry interval.
get the `messaging-activemq` `server` `pooled-connection-factory` `max-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=max-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `max-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `min-large-message-size`
the min large message size.
get the `messaging-activemq` `server` `pooled-connection-factory` `min-large-message-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=min-large-message-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `min-large-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `min-pool-size`
the minimum size for the pool
get the `messaging-activemq` `server` `pooled-connection-factory` `min-pool-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=min-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `min-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `password`
the default password to use with this connection factory. this is only needed when pointing the connection factory to a remote host.
get the `messaging-activemq` `server` `pooled-connection-factory` `password` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `pre-acknowledge`
true to `pre-acknowledge`.
get the `messaging-activemq` `server` `pooled-connection-factory` `pre-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=pre-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `pre-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `producer-max-rate`
the producer max rate.
get the `messaging-activemq` `server` `pooled-connection-factory` `producer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=producer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `producer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `producer-window-size`
the producer window size.
get the `messaging-activemq` `server` `pooled-connection-factory` `producer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=producer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `producer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `protocol-manager-factory`
the protocol manager factory used by this pooled connection factory.
get the `messaging-activemq` `server` `pooled-connection-factory` `protocol-manager-factory` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=protocol-manager-factory)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `protocol-manager-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `rebalance-connections`
rebalance inbound connections when cluster topology changes.
get the `messaging-activemq` `server` `pooled-connection-factory` `rebalance-connections` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=rebalance-connections)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `rebalance-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `reconnect-attempts`
the reconnect attempts. by default, a pooled connection factory will try to reconnect infinitely to the messaging `server(s`).
get the `messaging-activemq` `server` `pooled-connection-factory` `reconnect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `retry-interval`
the retry interval.
get the `messaging-activemq` `server` `pooled-connection-factory` `retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `retry-interval-multiplier`
the retry interval multiplier.
get the `messaging-activemq` `server` `pooled-connection-factory` `retry-interval-multiplier` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=retry-interval-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `retry-interval-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `scheduled-thread-pool-max-size`
the scheduled thread pool max size.
get the `messaging-activemq` `server` `pooled-connection-factory` `scheduled-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=scheduled-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `scheduled-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `setup-attempts`
the number of times to set up an `mdb` endpoint
get the `messaging-activemq` `server` `pooled-connection-factory` `setup-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=setup-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `setup-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `setup-interval`
the interval between attempts at setting up an `mdb` endpoint.
get the `messaging-activemq` `server` `pooled-connection-factory` `setup-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=setup-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `setup-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `statistics-enabled`
define whether runtime statistics are enabled.
get the `messaging-activemq` `server` `pooled-connection-factory` `statistics-enabled` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `thread-pool-max-size`
the thread pool max size.
get the `messaging-activemq` `server` `pooled-connection-factory` `thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `transaction`
the type of transaction supported by this pooled connection factory (can be local, none or `xa`, default is `xa`).
get the `messaging-activemq` `server` `pooled-connection-factory` `transaction` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=transaction)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `transaction`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `transaction-batch-size`
the transaction batch size.
get the `messaging-activemq` `server` `pooled-connection-factory` `transaction-batch-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=transaction-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `transaction-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-auto-recovery`
true to use auto recovery.
get the `messaging-activemq` `server` `pooled-connection-factory` `use-auto-recovery` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-auto-recovery)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-auto-recovery`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-global-pools`
true to use global pools.
get the `messaging-activemq` `server` `pooled-connection-factory` `use-global-pools` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-global-pools)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-global-pools`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-jndi`
use `jndi` to locate the destination for incoming connections
get the `messaging-activemq` `server` `pooled-connection-factory` `use-jndi` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-jndi)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-jndi`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-local-tx`
use a local transaction for incoming sessions
get the `messaging-activemq` `server` `pooled-connection-factory` `use-local-tx` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-local-tx)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-local-tx`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-topology-for-load-balancing`
whether to use topology information from the cluster to connect to it. if set to 'false', only the initial connector will be used.
get the `messaging-activemq` `server` `pooled-connection-factory` `use-topology-for-load-balancing` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-topology-for-load-balancing)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `use-topology-for-load-balancing`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `user`
the default `username` to use with this connection factory. this is only needed when pointing the connection factory to a remote host.
get the `messaging-activemq` `server` `pooled-connection-factory` `user` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=user)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `pooled-connection-factory` `user`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `acceptor`
operation: `/subsystem=messaging-activemq/server=<server name>/acceptor=<acceptor name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `acceptor` use '*' for `<acceptor name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `acceptor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `acceptor` `factory-class`
class name of the factory class that can instantiate the acceptor.
get the `messaging-activemq` `server` `acceptor` `factory-class` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/acceptor=<acceptor name>:read-attribute(name=factory-class)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `acceptor` `factory-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `acceptor` `params`
a `key-value` pair understood by the acceptor `factory-class` and used to configure it.
get the `messaging-activemq` `server` `acceptor` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/acceptor=<acceptor name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `acceptor` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `acceptor` `socket-binding`
the socket binding that the acceptor will use to accept connections.
get the `messaging-activemq` `server` `acceptor` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/acceptor=<acceptor name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `acceptor` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `acceptor` `started`
whether this acceptor is started.
get the `messaging-activemq` `server` `acceptor` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/acceptor=<acceptor name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `acceptor` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `legacy-connection-factory`
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `legacy-connection-factory` use '*' for `<legacy-connection-factory name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `legacy-connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `auto-group`
whether or not message grouping is automatically used
get the `messaging-activemq` `server` `legacy-connection-factory` `auto-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=auto-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `auto-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-acknowledge`
true to set block on acknowledge.
get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=block-on-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-durable-send`
true to set block on durable send.
get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-durable-send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=block-on-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-non-durable-send`
true to set block on non durable send.
get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-non-durable-send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=block-on-non-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `block-on-non-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `cache-large-message-client`
true to cache large messages.
get the `messaging-activemq` `server` `legacy-connection-factory` `cache-large-message-client` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=cache-large-message-client)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `cache-large-message-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `call-failover-timeout`
the timeout to use when fail over is in process (in ms).
get the `messaging-activemq` `server` `legacy-connection-factory` `call-failover-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=call-failover-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `call-failover-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `call-timeout`
the call time out.
get the `messaging-activemq` `server` `legacy-connection-factory` `call-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=call-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `call-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `client-failure-check-period`
the client failure check period.
get the `messaging-activemq` `server` `legacy-connection-factory` `client-failure-check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=client-failure-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `client-failure-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `client-id`
the client id.
get the `messaging-activemq` `server` `legacy-connection-factory` `client-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `compress-large-messages`
whether large messages should be compressed.
get the `messaging-activemq` `server` `legacy-connection-factory` `compress-large-messages` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=compress-large-messages)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `compress-large-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `confirmation-window-size`
the confirmation window size.
get the `messaging-activemq` `server` `legacy-connection-factory` `confirmation-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=confirmation-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `confirmation-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `connection-load-balancing-policy-class-name`
name of a class implementing a `client-side` load balancing policy that a client can use to load balance sessions across different nodes in a cluster.
get the `messaging-activemq` `server` `legacy-connection-factory` `connection-load-balancing-policy-class-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=connection-load-balancing-policy-class-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `connection-load-balancing-policy-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `connection-ttl`
the connection `ttl`.
get the `messaging-activemq` `server` `legacy-connection-factory` `connection-ttl` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=connection-ttl)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `connection-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `connectors`
defines the connectors. these are stored in a map by connector name (with an undefined value). it is possible to pass a list of connector names when writing this attribute.
get the `messaging-activemq` `server` `legacy-connection-factory` `connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `consumer-max-rate`
the consumer max rate.
get the `messaging-activemq` `server` `legacy-connection-factory` `consumer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=consumer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `consumer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `consumer-window-size`
the consumer window size.
get the `messaging-activemq` `server` `legacy-connection-factory` `consumer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=consumer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `consumer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `discovery-group`
the discovery group name.
get the `messaging-activemq` `server` `legacy-connection-factory` `discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `dups-ok-batch-size`
the dups ok batch size.
get the `messaging-activemq` `server` `legacy-connection-factory` `dups-ok-batch-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=dups-ok-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `dups-ok-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `entries`
the `jndi` names the connection factory should be bound to.
get the `messaging-activemq` `server` `legacy-connection-factory` `entries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `factory-type`
the type of connection factory.
get the `messaging-activemq` `server` `legacy-connection-factory` `factory-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=factory-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `factory-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `failover-on-initial-connection`
true to fail over on initial connection.
get the `messaging-activemq` `server` `legacy-connection-factory` `failover-on-initial-connection` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=failover-on-initial-connection)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `failover-on-initial-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `group-id`
the group id.
get the `messaging-activemq` `server` `legacy-connection-factory` `group-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=group-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `group-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `ha`
whether the connection factory supports high availability.
get the `messaging-activemq` `server` `legacy-connection-factory` `ha` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=ha)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `ha`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `initial-connect-attempts`
the number of attempts for the initial connection to the server.
get the `messaging-activemq` `server` `legacy-connection-factory` `initial-connect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=initial-connect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `initial-connect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `initial-message-packet-size`
the initial size of messages created through this factory.
get the `messaging-activemq` `server` `legacy-connection-factory` `initial-message-packet-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=initial-message-packet-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `initial-message-packet-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `max-retry-interval`
the max retry interval.
get the `messaging-activemq` `server` `legacy-connection-factory` `max-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=max-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `max-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `min-large-message-size`
the min large message size.
get the `messaging-activemq` `server` `legacy-connection-factory` `min-large-message-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=min-large-message-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `min-large-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `pre-acknowledge`
true to `pre-acknowledge`.
get the `messaging-activemq` `server` `legacy-connection-factory` `pre-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=pre-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `pre-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `producer-max-rate`
the producer max rate.
get the `messaging-activemq` `server` `legacy-connection-factory` `producer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=producer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `producer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `producer-window-size`
the producer window size.
get the `messaging-activemq` `server` `legacy-connection-factory` `producer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=producer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `producer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `reconnect-attempts`
the reconnect attempts.
get the `messaging-activemq` `server` `legacy-connection-factory` `reconnect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `retry-interval`
the retry interval.
get the `messaging-activemq` `server` `legacy-connection-factory` `retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `retry-interval-multiplier`
the retry interval multiplier.
get the `messaging-activemq` `server` `legacy-connection-factory` `retry-interval-multiplier` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=retry-interval-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `retry-interval-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `scheduled-thread-pool-max-size`
the scheduled thread pool max size.
get the `messaging-activemq` `server` `legacy-connection-factory` `scheduled-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=scheduled-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `scheduled-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `thread-pool-max-size`
the thread pool max size.
get the `messaging-activemq` `server` `legacy-connection-factory` `thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `transaction-batch-size`
the transaction batch size.
get the `messaging-activemq` `server` `legacy-connection-factory` `transaction-batch-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=transaction-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `transaction-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `use-global-pools`
true to use global pools.
get the `messaging-activemq` `server` `legacy-connection-factory` `use-global-pools` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/legacy-connection-factory=<legacy-connection-factory name>:read-attribute(name=use-global-pools)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `legacy-connection-factory` `use-global-pools`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `queue`
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `queue` use '*' for `<queue name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `consumer-count`
the number of consumers consuming messages from this queue.
get the `messaging-activemq` `server` `queue` `consumer-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=consumer-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `consumer-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `dead-letter-address`
the address to send the `queue's` dead messages to.
get the `messaging-activemq` `server` `queue` `dead-letter-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=dead-letter-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `dead-letter-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `delivering-count`
the number of messages that this queue is currently delivering to its consumers.
get the `messaging-activemq` `server` `queue` `delivering-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=delivering-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `delivering-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `durable`
defines whether the queue is durable.
get the `messaging-activemq` `server` `queue` `durable` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=durable)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `durable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `expiry-address`
the address to send the `queue's` expired messages to.
get the `messaging-activemq` `server` `queue` `expiry-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=expiry-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `expiry-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `filter`
a queue message filter definition. an undefined or empty filter will match all messages.
get the `messaging-activemq` `server` `queue` `filter` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `id`
the id of the queue.
get the `messaging-activemq` `server` `queue` `id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `message-count`
the number of messages currently in this queue.
get the `messaging-activemq` `server` `queue` `message-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `messages-added`
the number of messages added to this queue since it was created.
get the `messaging-activemq` `server` `queue` `messages-added` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=messages-added)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `messages-added`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `paused`
whether the queue is paused.
get the `messaging-activemq` `server` `queue` `paused` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=paused)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `paused`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `queue-address`
the queue address defines what address is used for routing messages.
get the `messaging-activemq` `server` `queue` `queue-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=queue-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `queue-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `routing-type`
routing type of the queue.
get the `messaging-activemq` `server` `queue` `routing-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=routing-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `routing-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `scheduled-count`
the number of scheduled messages in this queue.
get the `messaging-activemq` `server` `queue` `scheduled-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=scheduled-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `scheduled-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `queue` `temporary`
whether the queue is temporary.
get the `messaging-activemq` `server` `queue` `temporary` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/queue=<queue name>:read-attribute(name=temporary)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `queue` `temporary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `in-vm-acceptor`
operation: `/subsystem=messaging-activemq/server=<server name>/in-vm-acceptor=<in-vm-acceptor name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `in-vm-acceptor` use '*' for `<in-vm-acceptor name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `in-vm-acceptor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `in-vm-acceptor` `params`
a `key-value` pair understood by the acceptor `factory-class` and used to configure it.
get the `messaging-activemq` `server` `in-vm-acceptor` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/in-vm-acceptor=<in-vm-acceptor name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `in-vm-acceptor` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `in-vm-acceptor` `server-id`
the server id.
get the `messaging-activemq` `server` `in-vm-acceptor` `server-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/in-vm-acceptor=<in-vm-acceptor name>:read-attribute(name=server-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `in-vm-acceptor` `server-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `in-vm-acceptor` `started`
whether this acceptor is started.
get the `messaging-activemq` `server` `in-vm-acceptor` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/in-vm-acceptor=<in-vm-acceptor name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `in-vm-acceptor` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `grouping-handler`
operation: `/subsystem=messaging-activemq/server=<server name>/grouping-handler=<grouping-handler name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `grouping-handler` use '*' for `<grouping-handler name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `grouping-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `group-timeout`
how long a group binding will be used, -`1` means for ever. bindings are removed after this wait elapses (valid for both local and remote handlers).
get the `messaging-activemq` `server` `grouping-handler` `group-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/grouping-handler=<grouping-handler name>:read-attribute(name=group-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `group-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `grouping-handler-address`
a reference to a cluster connection and the address it uses.
get the `messaging-activemq` `server` `grouping-handler` `grouping-handler-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/grouping-handler=<grouping-handler name>:read-attribute(name=grouping-handler-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `grouping-handler-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `reaper-period`
how often the reaper will be run to check for timed out group bindings (only valid for local handlers).
get the `messaging-activemq` `server` `grouping-handler` `reaper-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/grouping-handler=<grouping-handler name>:read-attribute(name=reaper-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `reaper-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `timeout`
how long to wait for a handling decision to be made; an exception will be thrown during the send if this timeout is reached, ensuring that strict ordering is kept.
get the `messaging-activemq` `server` `grouping-handler` `timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/grouping-handler=<grouping-handler name>:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `type`
whether the handler is the single "local" handler for the cluster, which makes handling decisions, or a "remote" handler which converses with the local handler.
get the `messaging-activemq` `server` `grouping-handler` `type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/grouping-handler=<grouping-handler name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `grouping-handler` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `core-address`
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `core-address` use '*' for `<core-address name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `core-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `binding-names`
the names of all bindings (both queues and diverts) bound to this address.
get the `messaging-activemq` `server` `core-address` `binding-names` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>:read-attribute(name=binding-names)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `binding-names`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `number-of-bytes-per-page`
the number of bytes used by each page for this address.
get the `messaging-activemq` `server` `core-address` `number-of-bytes-per-page` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>:read-attribute(name=number-of-bytes-per-page)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `number-of-bytes-per-page`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `number-of-pages`
the number of pages used by this address.
get the `messaging-activemq` `server` `core-address` `number-of-pages` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>:read-attribute(name=number-of-pages)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `number-of-pages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `queue-names`
the names of the queues associated with the address.
get the `messaging-activemq` `server` `core-address` `queue-names` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>:read-attribute(name=queue-names)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `queue-names`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `core-address` `role`
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `core-address` `role` use '*' for `<role name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `core-address` `role`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `browse`
this permission allows the user to browse a queue bound to the matching address.
get the `messaging-activemq` `server` `core-address` `role` `browse` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=browse)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `browse`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `consume`
this permission allows the user to consume a message from a queue bound to matching addresses.
get the `messaging-activemq` `server` `core-address` `role` `consume` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=consume)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `consume`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `create-address`
this permission allows the user to create an address.
get the `messaging-activemq` `server` `core-address` `role` `create-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=create-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `create-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `create-durable-queue`
this permission allows the user to create a durable queue.
get the `messaging-activemq` `server` `core-address` `role` `create-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=create-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `create-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `create-non-durable-queue`
this permission allows the user to create a temporary queue.
get the `messaging-activemq` `server` `core-address` `role` `create-non-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=create-non-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `create-non-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `delete-address`
this permission allows the user  to delete an address.
get the `messaging-activemq` `server` `core-address` `role` `delete-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=delete-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `delete-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `delete-durable-queue`
this permission allows the user to delete a durable queue.
get the `messaging-activemq` `server` `core-address` `role` `delete-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=delete-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `delete-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `delete-non-durable-queue`
this permission allows the user to delete a temporary queue.
get the `messaging-activemq` `server` `core-address` `role` `delete-non-durable-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=delete-non-durable-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `delete-non-durable-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `manage`
this permission allows the user to invoke management operations by sending management messages to the management address.
get the `messaging-activemq` `server` `core-address` `role` `manage` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=manage)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `manage`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `send`
this permission allows the user to send a message to matching addresses.
get the `messaging-activemq` `server` `core-address` `role` `send` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/core-address=<core-address name>/role=<role name>:read-attribute(name=send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `core-address` `role` `send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `socket-discovery-group`
operation: `/subsystem=messaging-activemq/server=<server name>/socket-discovery-group=<socket-discovery-group name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `socket-discovery-group` use '*' for `<socket-discovery-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `socket-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `socket-discovery-group` `initial-wait-timeout`
period, in ms, to wait for an initial broadcast to give us at least one node in the cluster.
get the `messaging-activemq` `server` `socket-discovery-group` `initial-wait-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/socket-discovery-group=<socket-discovery-group name>:read-attribute(name=initial-wait-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `socket-discovery-group` `initial-wait-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `socket-discovery-group` `refresh-timeout`
period the discovery group waits after receiving the last broadcast from a particular server before removing that `server's` connector pair entry from its list.
get the `messaging-activemq` `server` `socket-discovery-group` `refresh-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/socket-discovery-group=<socket-discovery-group name>:read-attribute(name=refresh-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `socket-discovery-group` `refresh-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `socket-discovery-group` `socket-binding`
the discovery group socket binding.
get the `messaging-activemq` `server` `socket-discovery-group` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/socket-discovery-group=<socket-discovery-group name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `socket-discovery-group` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `remote-acceptor`
operation: `/subsystem=messaging-activemq/server=<server name>/remote-acceptor=<remote-acceptor name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `remote-acceptor` use '*' for `<remote-acceptor name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `remote-acceptor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `params`
a `key-value` pair understood by the acceptor `factory-class` and used to configure it.
get the `messaging-activemq` `server` `remote-acceptor` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/remote-acceptor=<remote-acceptor name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `socket-binding`
the socket binding that the acceptor will use to accept connections.
get the `messaging-activemq` `server` `remote-acceptor` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/remote-acceptor=<remote-acceptor name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `ssl-context`
the `ssl` context that the acceptor will use to accept connections.
get the `messaging-activemq` `server` `remote-acceptor` `ssl-context` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/remote-acceptor=<remote-acceptor name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `started`
whether this acceptor is started.
get the `messaging-activemq` `server` `remote-acceptor` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/remote-acceptor=<remote-acceptor name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `remote-acceptor` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `socket-broadcast-group`
operation: `/subsystem=messaging-activemq/server=<server name>/socket-broadcast-group=<socket-broadcast-group name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `socket-broadcast-group` use '*' for `<socket-broadcast-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `socket-broadcast-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `broadcast-period`
the period in milliseconds between consecutive broadcasts.
get the `messaging-activemq` `server` `socket-broadcast-group` `broadcast-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/socket-broadcast-group=<socket-broadcast-group name>:read-attribute(name=broadcast-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `broadcast-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `connectors`
specifies the names of connectors that will be broadcast.
get the `messaging-activemq` `server` `socket-broadcast-group` `connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/socket-broadcast-group=<socket-broadcast-group name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `socket-binding`
the broadcast group socket binding.
get the `messaging-activemq` `server` `socket-broadcast-group` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/socket-broadcast-group=<socket-broadcast-group name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `started`
whether the broadcast group is started.
get the `messaging-activemq` `server` `socket-broadcast-group` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/socket-broadcast-group=<socket-broadcast-group name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `socket-broadcast-group` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `bridge`
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `bridge` use '*' for `<bridge name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `bridge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `call-timeout`
timeout for blocking calls.
get the `messaging-activemq` `server` `bridge` `call-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=call-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `call-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `check-period`
the period (in milliseconds) between client failure check.
get the `messaging-activemq` `server` `bridge` `check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `confirmation-window-size`
the `confirmation-window-size` to use for the connection used to forward messages to the target node.
get the `messaging-activemq` `server` `bridge` `confirmation-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=confirmation-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `confirmation-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `connection-ttl`
the maximum time (in milliseconds) for which the connections used by the bridges are considered alive (in the absence of heartbeat).
get the `messaging-activemq` `server` `bridge` `connection-ttl` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=connection-ttl)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `connection-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `credential-reference`
credential (from credential store) to authenticate the bridge
get the `messaging-activemq` `server` `bridge` `credential-reference` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `discovery-group`
the name of the discovery group used by this bridge. must be undefined (null) if '`static-connectors`' is defined.
get the `messaging-activemq` `server` `bridge` `discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `filter`
an optional filter string. if specified then only messages which match the filter expression specified will be forwarded. the filter string follows the `activemq` filter expression syntax described in the `activemq` documentation.
get the `messaging-activemq` `server` `bridge` `filter` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `forwarding-address`
the address on the target server that the message will be forwarded to. if a forwarding address is not specified then the original destination of the message will be retained.
get the `messaging-activemq` `server` `bridge` `forwarding-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=forwarding-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `forwarding-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `ha`
whether or not this bridge should support high availability. true means it will connect to any available server in a cluster and support `failover`.
get the `messaging-activemq` `server` `bridge` `ha` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=ha)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `ha`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `initial-connect-attempts`
the number of attempts to connect initially with this bridge.
get the `messaging-activemq` `server` `bridge` `initial-connect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=initial-connect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `initial-connect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `max-retry-interval`
the maximum interval of time used to retry connections
get the `messaging-activemq` `server` `bridge` `max-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=max-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `max-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `min-large-message-size`
the minimum size (in bytes) for a message before it is considered as a large message.
get the `messaging-activemq` `server` `bridge` `min-large-message-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=min-large-message-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `min-large-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `password`
the password to use when creating the bridge connection to the remote server. if it is not specified the default cluster password specified by the `cluster-password` attribute in the root messaging subsystem resource will be used.
get the `messaging-activemq` `server` `bridge` `password` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `producer-window-size`
producer flow control size on the bridge.
get the `messaging-activemq` `server` `bridge` `producer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=producer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `producer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `queue-name`
the unique name of the local queue that the bridge consumes from.
get the `messaging-activemq` `server` `bridge` `queue-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=queue-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `queue-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `reconnect-attempts`
the total number of reconnect attempts the bridge will make before giving up and shutting down. a value of -`1` signifies an unlimited number of attempts.
get the `messaging-activemq` `server` `bridge` `reconnect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `reconnect-attempts-on-same-node`
the total number of reconnect attempts on the same node the bridge will make before giving up and shutting down. a value of -`1` signifies an unlimited number of attempts.
get the `messaging-activemq` `server` `bridge` `reconnect-attempts-on-same-node` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=reconnect-attempts-on-same-node)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `reconnect-attempts-on-same-node`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `retry-interval`
the period in milliseconds between subsequent reconnection attempts, if the connection to the target server has failed.
get the `messaging-activemq` `server` `bridge` `retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `retry-interval-multiplier`
a multiplier to apply to the time since the last retry to compute the time to the next retry. this allows you to implement an exponential backoff between retry attempts.
get the `messaging-activemq` `server` `bridge` `retry-interval-multiplier` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=retry-interval-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `retry-interval-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `routing-type`
pass or strip the routing type from the messages the bridge forwards.
get the `messaging-activemq` `server` `bridge` `routing-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=routing-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `routing-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `started`
whether the bridge is started.
get the `messaging-activemq` `server` `bridge` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `static-connectors`
a list of names of statically defined connectors used by this bridge. must be undefined (null) if '`discovery-group-name`' is defined.
get the `messaging-activemq` `server` `bridge` `static-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=static-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `static-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `transformer-class-name`
the name of a `user-defined` class which implements the `org.apache.activemq.artemis.core.server.cluster.transformer` interface.
get the `messaging-activemq` `server` `bridge` `transformer-class-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=transformer-class-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `transformer-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `use-duplicate-detection`
whether the bridge will automatically insert a duplicate id property into each message that it forwards.
get the `messaging-activemq` `server` `bridge` `use-duplicate-detection` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=use-duplicate-detection)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `use-duplicate-detection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `bridge` `user`
the user name to use when creating the bridge connection to the remote server. if it is not specified the default cluster user specified by the `cluster-user` attribute in the root messaging subsystem resource will be used.
get the `messaging-activemq` `server` `bridge` `user` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/bridge=<bridge name>:read-attribute(name=user)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `bridge` `user`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `paging-directory` `path`
the actual `filesystem` path. treated as an absolute path, unless the '`relative-to`' attribute is specified, in which case the value is treated as relative to that path. if treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: if this value is already absolute, then the value is directly used.  otherwise the runtime pathname is resolved in a `system-dependent` way.  on unix systems, a relative pathname is made absolute by resolving it against the current user directory. on `microsoft` windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
get the `messaging-activemq` `server` `path` `paging-directory` `path` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=paging-directory:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `paging-directory` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `paging-directory` `relative-to`
the name of another previously named path, or of one of the standard paths provided by the system. if '`relative-to`' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. the standard paths provided by the system include: `jboss.home` - the root directory of the `jboss` as distribution, `user.home` - `user's` home directory, `user.dir` - `user's` current working directory, `java.home` - java installation directory, `jboss.server.base.dir` - root directory for an individual server instance, `jboss.server.data.dir` - directory the server will use for persistent data file storage, `jboss.server.log.dir` - directory the server will use for log file storage, `jboss.server.tmp.dir` - directory the server will use for temporary file storage, and `jboss.domain.servers.dir` - directory under which a host controller will create the working area for individual server instances.
get the `messaging-activemq` `server` `path` `paging-directory` `relative-to` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=paging-directory:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `paging-directory` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `bindings-directory` `path`
the actual `filesystem` path. treated as an absolute path, unless the '`relative-to`' attribute is specified, in which case the value is treated as relative to that path. if treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: if this value is already absolute, then the value is directly used.  otherwise the runtime pathname is resolved in a `system-dependent` way.  on unix systems, a relative pathname is made absolute by resolving it against the current user directory. on `microsoft` windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
get the `messaging-activemq` `server` `path` `bindings-directory` `path` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=bindings-directory:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `bindings-directory` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `bindings-directory` `relative-to`
the name of another previously named path, or of one of the standard paths provided by the system. if '`relative-to`' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. the standard paths provided by the system include: `jboss.home` - the root directory of the `jboss` as distribution, `user.home` - `user's` home directory, `user.dir` - `user's` current working directory, `java.home` - java installation directory, `jboss.server.base.dir` - root directory for an individual server instance, `jboss.server.data.dir` - directory the server will use for persistent data file storage, `jboss.server.log.dir` - directory the server will use for log file storage, `jboss.server.tmp.dir` - directory the server will use for temporary file storage, and `jboss.domain.servers.dir` - directory under which a host controller will create the working area for individual server instances.
get the `messaging-activemq` `server` `path` `bindings-directory` `relative-to` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=bindings-directory:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `bindings-directory` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `large-messages-directory` `path`
the actual `filesystem` path. treated as an absolute path, unless the '`relative-to`' attribute is specified, in which case the value is treated as relative to that path. if treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: if this value is already absolute, then the value is directly used.  otherwise the runtime pathname is resolved in a `system-dependent` way.  on unix systems, a relative pathname is made absolute by resolving it against the current user directory. on `microsoft` windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
get the `messaging-activemq` `server` `path` `large-messages-directory` `path` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=large-messages-directory:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `large-messages-directory` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `large-messages-directory` `relative-to`
the name of another previously named path, or of one of the standard paths provided by the system. if '`relative-to`' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. the standard paths provided by the system include: `jboss.home` - the root directory of the `jboss` as distribution, `user.home` - `user's` home directory, `user.dir` - `user's` current working directory, `java.home` - java installation directory, `jboss.server.base.dir` - root directory for an individual server instance, `jboss.server.data.dir` - directory the server will use for persistent data file storage, `jboss.server.log.dir` - directory the server will use for log file storage, `jboss.server.tmp.dir` - directory the server will use for temporary file storage, and `jboss.domain.servers.dir` - directory under which a host controller will create the working area for individual server instances.
get the `messaging-activemq` `server` `path` `large-messages-directory` `relative-to` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=large-messages-directory:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `large-messages-directory` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `journal-directory` `path`
the actual `filesystem` path. treated as an absolute path, unless the '`relative-to`' attribute is specified, in which case the value is treated as relative to that path. if treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: if this value is already absolute, then the value is directly used.  otherwise the runtime pathname is resolved in a `system-dependent` way.  on unix systems, a relative pathname is made absolute by resolving it against the current user directory. on `microsoft` windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
get the `messaging-activemq` `server` `path` `journal-directory` `path` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=journal-directory:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `journal-directory` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `path` `journal-directory` `relative-to`
the name of another previously named path, or of one of the standard paths provided by the system. if '`relative-to`' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. the standard paths provided by the system include: `jboss.home` - the root directory of the `jboss` as distribution, `user.home` - `user's` home directory, `user.dir` - `user's` current working directory, `java.home` - java installation directory, `jboss.server.base.dir` - root directory for an individual server instance, `jboss.server.data.dir` - directory the server will use for persistent data file storage, `jboss.server.log.dir` - directory the server will use for log file storage, `jboss.server.tmp.dir` - directory the server will use for temporary file storage, and `jboss.domain.servers.dir` - directory under which a host controller will create the working area for individual server instances.
get the `messaging-activemq` `server` `path` `journal-directory` `relative-to` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/path=journal-directory:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `path` `journal-directory` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `cluster-connection`
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `cluster-connection` use '*' for `<cluster-connection name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `cluster-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `allow-direct-connections-only`
whether, if a node learns of the existence of a node that is more than `1` hop away, we do not create a bridge for direct cluster connection. only relevant if '`static-connectors`' is defined.
get the `messaging-activemq` `server` `cluster-connection` `allow-direct-connections-only` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=allow-direct-connections-only)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `allow-direct-connections-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `call-failover-timeout`
the timeout to use when fail over is in process (in ms) for remote calls made by the cluster connection.
get the `messaging-activemq` `server` `cluster-connection` `call-failover-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=call-failover-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `call-failover-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `call-timeout`
the timeout (in ms) for remote calls made by the cluster connection.
get the `messaging-activemq` `server` `cluster-connection` `call-timeout` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=call-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `call-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `check-period`
the period (in milliseconds) between client failure check.
get the `messaging-activemq` `server` `cluster-connection` `check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `cluster-connection-address`
each cluster connection only applies to messages sent to an address that starts with this value.
get the `messaging-activemq` `server` `cluster-connection` `cluster-connection-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=cluster-connection-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `cluster-connection-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `confirmation-window-size`
the `confirmation-window-size` to use for the connection used to forward messages to a target node.
get the `messaging-activemq` `server` `cluster-connection` `confirmation-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=confirmation-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `confirmation-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `connection-ttl`
the maximum time (in milliseconds) for which the connections used by the cluster connections are considered alive (in the absence of heartbeat).
get the `messaging-activemq` `server` `cluster-connection` `connection-ttl` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=connection-ttl)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `connection-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `connector-name`
the name of connector to use for live connection
get the `messaging-activemq` `server` `cluster-connection` `connector-name` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=connector-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `connector-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `discovery-group`
the discovery group used to obtain the list of other servers in the cluster to which this cluster connection will make connections. must be undefined (null) if '`static-connectors`' is defined.
get the `messaging-activemq` `server` `cluster-connection` `discovery-group` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `initial-connect-attempts`
the number of attempts to connect initially with this cluster connection.
get the `messaging-activemq` `server` `cluster-connection` `initial-connect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=initial-connect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `initial-connect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `max-hops`
the maximum number of times a message can be forwarded. `activemq` can be configured to also load balance messages to nodes which might be connected to it only indirectly with other `activemq` servers as intermediates in a chain.
get the `messaging-activemq` `server` `cluster-connection` `max-hops` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=max-hops)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `max-hops`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `max-retry-interval`
the maximum interval of time used to retry connections
get the `messaging-activemq` `server` `cluster-connection` `max-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=max-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `max-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `message-load-balancing-type`
the type of message load balancing provided by the cluster connection.
get the `messaging-activemq` `server` `cluster-connection` `message-load-balancing-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=message-load-balancing-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `message-load-balancing-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `min-large-message-size`
the minimum size (in bytes) for a message before it is considered as a large message.
get the `messaging-activemq` `server` `cluster-connection` `min-large-message-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=min-large-message-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `min-large-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `node-id`
the node id used by this cluster connection.
get the `messaging-activemq` `server` `cluster-connection` `node-id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=node-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `node-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `notification-attempts`
how many times the cluster connection will broadcast itself
get the `messaging-activemq` `server` `cluster-connection` `notification-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=notification-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `notification-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `notification-interval`
how often the cluster connection will broadcast itself
get the `messaging-activemq` `server` `cluster-connection` `notification-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=notification-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `notification-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `producer-window-size`
producer flow control size on the cluster connection.
get the `messaging-activemq` `server` `cluster-connection` `producer-window-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=producer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `producer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `reconnect-attempts`
the total number of reconnect attempts the bridge will make before giving up and shutting down. a value of -`1` signifies an unlimited number of attempts.
get the `messaging-activemq` `server` `cluster-connection` `reconnect-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `retry-interval`
the period in milliseconds between subsequent attempts to reconnect to a target server, if the connection to the target server has failed.
get the `messaging-activemq` `server` `cluster-connection` `retry-interval` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `retry-interval-multiplier`
a multiplier to apply to the time since the last retry to compute the time to the next retry. this allows you to implement an exponential backoff between retry attempts.
get the `messaging-activemq` `server` `cluster-connection` `retry-interval-multiplier` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=retry-interval-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `retry-interval-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `started`
whether the cluster connection is started.
get the `messaging-activemq` `server` `cluster-connection` `started` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=started)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `started`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `static-connectors`
the statically defined list of connectors to which this cluster connection will make connections. must be undefined (null) if '`discovery-group-name`' is defined.
get the `messaging-activemq` `server` `cluster-connection` `static-connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=static-connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `static-connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `topology`
the topology of the nodes that this cluster connection is aware of.
get the `messaging-activemq` `server` `cluster-connection` `topology` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=topology)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `topology`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `use-duplicate-detection`
whether the bridge will automatically insert a duplicate id property into each message that it forwards.
get the `messaging-activemq` `server` `cluster-connection` `use-duplicate-detection` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/cluster-connection=<cluster-connection name>:read-attribute(name=use-duplicate-detection)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `cluster-connection` `use-duplicate-detection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `broadcast-group`
operation: `/subsystem=messaging-activemq/server=<server name>/broadcast-group=<broadcast-group name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `broadcast-group` use '*' for `<broadcast-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `broadcast-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `broadcast-period`
the period in milliseconds between consecutive broadcasts.
get the `messaging-activemq` `server` `broadcast-group` `broadcast-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/broadcast-group=<broadcast-group name>:read-attribute(name=broadcast-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `broadcast-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `connectors`
specifies the names of connectors that will be broadcast.
get the `messaging-activemq` `server` `broadcast-group` `connectors` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/broadcast-group=<broadcast-group name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `jgroups-channel`
references the name of a `jgroups` channel.  if undefined, the default channel will be used.
get the `messaging-activemq` `server` `broadcast-group` `jgroups-channel` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/broadcast-group=<broadcast-group name>:read-attribute(name=jgroups-channel)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `jgroups-channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `jgroups-cluster`
the logical cluster name.
get the `messaging-activemq` `server` `broadcast-group` `jgroups-cluster` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/broadcast-group=<broadcast-group name>:read-attribute(name=jgroups-cluster)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `jgroups-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `jgroups-stack`
references the name of a `jgroups` channel factory.
get the `messaging-activemq` `server` `broadcast-group` `jgroups-stack` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/broadcast-group=<broadcast-group name>:read-attribute(name=jgroups-stack)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `jgroups-stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `socket-binding`
the broadcast group socket binding.
get the `messaging-activemq` `server` `broadcast-group` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/broadcast-group=<broadcast-group name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `broadcast-group` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `runtime-queue`
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `runtime-queue` use '*' for `<runtime-queue name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `runtime-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `consumer-count`
the number of consumers consuming messages from this queue.
get the `messaging-activemq` `server` `runtime-queue` `consumer-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=consumer-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `consumer-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `dead-letter-address`
the address to send the `queue's` dead messages to.
get the `messaging-activemq` `server` `runtime-queue` `dead-letter-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=dead-letter-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `dead-letter-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `delivering-count`
the number of messages that this queue is currently delivering to its consumers.
get the `messaging-activemq` `server` `runtime-queue` `delivering-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=delivering-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `delivering-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `durable`
defines whether the queue is durable.
get the `messaging-activemq` `server` `runtime-queue` `durable` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=durable)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `durable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `expiry-address`
the address to send the `queue's` expired messages to.
get the `messaging-activemq` `server` `runtime-queue` `expiry-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=expiry-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `expiry-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `filter`
a queue message filter definition. an undefined or empty filter will match all messages.
get the `messaging-activemq` `server` `runtime-queue` `filter` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `id`
the id of the queue.
get the `messaging-activemq` `server` `runtime-queue` `id` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `message-count`
the number of messages currently in this queue.
get the `messaging-activemq` `server` `runtime-queue` `message-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `messages-added`
the number of messages added to this queue since it was created.
get the `messaging-activemq` `server` `runtime-queue` `messages-added` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=messages-added)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `messages-added`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `paused`
whether the queue is paused.
get the `messaging-activemq` `server` `runtime-queue` `paused` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=paused)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `paused`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `queue-address`
the queue address defines what address is used for routing messages.
get the `messaging-activemq` `server` `runtime-queue` `queue-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=queue-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `queue-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `routing-type`
routing type of the queue.
get the `messaging-activemq` `server` `runtime-queue` `routing-type` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=routing-type)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `routing-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `scheduled-count`
the number of scheduled messages in this queue.
get the `messaging-activemq` `server` `runtime-queue` `scheduled-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=scheduled-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `scheduled-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `temporary`
whether the queue is temporary.
get the `messaging-activemq` `server` `runtime-queue` `temporary` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/runtime-queue=<runtime-queue name>:read-attribute(name=temporary)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `runtime-queue` `temporary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `jms-topic`
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `jms-topic` use '*' for `<jms-topic name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `jms-topic`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `delivering-count`
the number of messages that this queue is currently delivering to its consumers.
get the `messaging-activemq` `server` `jms-topic` `delivering-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=delivering-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `delivering-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `durable-message-count`
the number of messages for all durable subscribers for this topic.
get the `messaging-activemq` `server` `jms-topic` `durable-message-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=durable-message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `durable-message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `durable-subscription-count`
the number of durable subscribers for this topic.
get the `messaging-activemq` `server` `jms-topic` `durable-subscription-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=durable-subscription-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `durable-subscription-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `entries`
the `jndi` names the topic will be bound to.
get the `messaging-activemq` `server` `jms-topic` `entries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `legacy-entries`
the legacy `jndi` names the topic will be bound to.
get the `messaging-activemq` `server` `jms-topic` `legacy-entries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=legacy-entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `legacy-entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `message-count`
the number of messages currently in this queue.
get the `messaging-activemq` `server` `jms-topic` `message-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `messages-added`
the number of messages added to this queue since it was created.
get the `messaging-activemq` `server` `jms-topic` `messages-added` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=messages-added)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `messages-added`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `non-durable-message-count`
the number of messages for all `non-durable` subscribers for this topic.
get the `messaging-activemq` `server` `jms-topic` `non-durable-message-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=non-durable-message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `non-durable-message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `non-durable-subscription-count`
the number of `non-durable` subscribers for this topic.
get the `messaging-activemq` `server` `jms-topic` `non-durable-subscription-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=non-durable-subscription-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `non-durable-subscription-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `paused`
the current status of the topic. a paused topic `won't` send messages to its consumers.
get the `messaging-activemq` `server` `jms-topic` `paused` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=paused)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `paused`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `subscription-count`
the number of (durable and `non-durable`) subscribers for this topic.
get the `messaging-activemq` `server` `jms-topic` `subscription-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=subscription-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `subscription-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `temporary`
whether the topic is temporary.
get the `messaging-activemq` `server` `jms-topic` `temporary` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=temporary)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `temporary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `topic-address`
the address the topic points to.
get the `messaging-activemq` `server` `jms-topic` `topic-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-topic=<jms-topic name>:read-attribute(name=topic-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-topic` `topic-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `address-setting`
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `address-setting` use '*' for `<address-setting name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `address-setting`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `address-full-policy`
determines what happens when an address where `max-size-bytes` is specified becomes full. (page, drop or block)
get the `messaging-activemq` `server` `address-setting` `address-full-policy` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=address-full-policy)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `address-full-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-create-addresses`
determines whether `activemq` should automatically create an addresses corresponding to the `address-settings` match when a producer or a consumer is tries to use such a queue.
get the `messaging-activemq` `server` `address-setting` `auto-create-addresses` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=auto-create-addresses)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-create-addresses`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-create-jms-queues`
determines whether `activemq` should automatically create a jakarta messaging queue corresponding to the `address-settings` match when a jakarta messaging producer or a consumer is tries to use such a queue.
get the `messaging-activemq` `server` `address-setting` `auto-create-jms-queues` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=auto-create-jms-queues)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-create-jms-queues`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-create-queues`
determines whether `activemq` should automatically create a queue corresponding to the `address-settings` match when a producer or a consumer is tries to use such a queue.
get the `messaging-activemq` `server` `address-setting` `auto-create-queues` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=auto-create-queues)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-create-queues`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-addresses`
determines whether `activemq` should automatically delete `auto-created` addresses when they have no consumers and no messages.
get the `messaging-activemq` `server` `address-setting` `auto-delete-addresses` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=auto-delete-addresses)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-addresses`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-created-queues`
determines whether `activemq` should automatically delete `auto-created` queues when they have no consumers and no messages.
get the `messaging-activemq` `server` `address-setting` `auto-delete-created-queues` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=auto-delete-created-queues)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-created-queues`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-jms-queues`
determines whether `activemq` should automatically delete `auto-created` jakarta messaging queues when they have no consumers and no messages.
get the `messaging-activemq` `server` `address-setting` `auto-delete-jms-queues` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=auto-delete-jms-queues)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-jms-queues`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-queues`
determines whether `activemq` should automatically delete `auto-created` queues when they have no consumers and no messages.
get the `messaging-activemq` `server` `address-setting` `auto-delete-queues` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=auto-delete-queues)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `auto-delete-queues`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `dead-letter-address`
the dead letter address
get the `messaging-activemq` `server` `address-setting` `dead-letter-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=dead-letter-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `dead-letter-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `expiry-address`
defines where to send a message that has expired.
get the `messaging-activemq` `server` `address-setting` `expiry-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=expiry-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `expiry-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `expiry-delay`
defines the expiration time that will be used for messages using the default expiration time
get the `messaging-activemq` `server` `address-setting` `expiry-delay` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=expiry-delay)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `expiry-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `last-value-queue`
defines whether a queue only uses last values or not
get the `messaging-activemq` `server` `address-setting` `last-value-queue` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=last-value-queue)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `last-value-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-delivery-attempts`
defines how many time a cancelled message can be redelivered before sending to the `dead-letter-address`
get the `messaging-activemq` `server` `address-setting` `max-delivery-attempts` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=max-delivery-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-delivery-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-read-page-bytes`
how much memory the messages read from paging can take on the queue whenever more messages are needed.
get the `messaging-activemq` `server` `address-setting` `max-read-page-bytes` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=max-read-page-bytes)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-read-page-bytes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-redelivery-delay`
maximum value for the `redelivery-delay` (in ms).
get the `messaging-activemq` `server` `address-setting` `max-redelivery-delay` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=max-redelivery-delay)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-redelivery-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-size-bytes`
the max bytes size.
get the `messaging-activemq` `server` `address-setting` `max-size-bytes` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=max-size-bytes)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `max-size-bytes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `message-counter-history-day-limit`
day limit for the message counter history.
get the `messaging-activemq` `server` `address-setting` `message-counter-history-day-limit` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=message-counter-history-day-limit)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `message-counter-history-day-limit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `page-max-cache-size`
the number of page files to keep in memory to optimize io during paging navigation.
get the `messaging-activemq` `server` `address-setting` `page-max-cache-size` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=page-max-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `page-max-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `page-size-bytes`
the paging size.
get the `messaging-activemq` `server` `address-setting` `page-size-bytes` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=page-size-bytes)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `page-size-bytes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `redelivery-delay`
defines how long to wait before attempting redelivery of a cancelled message
get the `messaging-activemq` `server` `address-setting` `redelivery-delay` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=redelivery-delay)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `redelivery-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `redelivery-multiplier`
multiplier to apply to the `redelivery-delay` parameter
get the `messaging-activemq` `server` `address-setting` `redelivery-multiplier` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=redelivery-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `redelivery-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `redistribution-delay`
defines how long to wait when the last consumer is closed on a queue before redistributing any messages
get the `messaging-activemq` `server` `address-setting` `redistribution-delay` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=redistribution-delay)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `redistribution-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `send-to-dla-on-no-route`
if this parameter is set to true for that address, if the message is not routed to any queues it will instead be sent to the dead letter address (`dla`) for that address, if it exists.
get the `messaging-activemq` `server` `address-setting` `send-to-dla-on-no-route` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=send-to-dla-on-no-route)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `send-to-dla-on-no-route`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `slow-consumer-check-period`
how often to check for slow consumers on a particular queue.
get the `messaging-activemq` `server` `address-setting` `slow-consumer-check-period` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=slow-consumer-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `slow-consumer-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `slow-consumer-policy`
determine what happens when a slow consumer is identified.
get the `messaging-activemq` `server` `address-setting` `slow-consumer-policy` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=slow-consumer-policy)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `slow-consumer-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `address-setting` `slow-consumer-threshold`
the minimum rate of message consumption allowed before a consumer is considered slow.
get the `messaging-activemq` `server` `address-setting` `slow-consumer-threshold` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/address-setting=<address-setting name>:read-attribute(name=slow-consumer-threshold)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `address-setting` `slow-consumer-threshold`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `connector`
operation: `/subsystem=messaging-activemq/server=<server name>/connector=<connector name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `connector` use '*' for `<connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connector` `factory-class`
class name of the factory class that can instantiate the connector.
get the `messaging-activemq` `server` `connector` `factory-class` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connector=<connector name>:read-attribute(name=factory-class)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connector` `factory-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `server` `connector` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connector=<connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `connector` `socket-binding`
the socket binding that the connector will use to create connections
get the `messaging-activemq` `server` `connector` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/connector=<connector name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `connector` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `remote-connector`
operation: `/subsystem=messaging-activemq/server=<server name>/remote-connector=<remote-connector name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `remote-connector` use '*' for `<remote-connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `remote-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `remote-connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `server` `remote-connector` `params` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/remote-connector=<remote-connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `remote-connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `remote-connector` `socket-binding`
the socket binding that the connector will use to create connections
get the `messaging-activemq` `server` `remote-connector` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/remote-connector=<remote-connector name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `remote-connector` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `remote-connector` `ssl-context`
the `ssl` context that the connector will use to connect
get the `messaging-activemq` `server` `remote-connector` `ssl-context` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/remote-connector=<remote-connector name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `remote-connector` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `server` `jms-queue`
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-resource()`
To get the list of all the `messaging-activemq` `server` `jms-queue` use '*' for `<jms-queue name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `server` `jms-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `consumer-count`
the number of consumers consuming messages from this queue.
get the `messaging-activemq` `server` `jms-queue` `consumer-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=consumer-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `consumer-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `dead-letter-address`
the address to send dead messages to.
get the `messaging-activemq` `server` `jms-queue` `dead-letter-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=dead-letter-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `dead-letter-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `delivering-count`
the number of messages that this queue is currently delivering to its consumers.
get the `messaging-activemq` `server` `jms-queue` `delivering-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=delivering-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `delivering-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `durable`
whether the queue is durable or not.
get the `messaging-activemq` `server` `jms-queue` `durable` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=durable)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `durable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `entries`
the `jndi` names the queue will be bound to.
get the `messaging-activemq` `server` `jms-queue` `entries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `expiry-address`
the address to send expired messages to.
get the `messaging-activemq` `server` `jms-queue` `expiry-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=expiry-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `expiry-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `legacy-entries`
the `jndi` names the queue will be bound to.
get the `messaging-activemq` `server` `jms-queue` `legacy-entries` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=legacy-entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `legacy-entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `message-count`
the number of messages currently in this queue.
get the `messaging-activemq` `server` `jms-queue` `message-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=message-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `message-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `messages-added`
the number of messages added to this queue since it was created.
get the `messaging-activemq` `server` `jms-queue` `messages-added` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=messages-added)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `messages-added`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `paused`
whether the queue is paused.
get the `messaging-activemq` `server` `jms-queue` `paused` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=paused)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `paused`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `queue-address`
the queue address defines what address is used for routing messages.
get the `messaging-activemq` `server` `jms-queue` `queue-address` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=queue-address)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `queue-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `scheduled-count`
the number of scheduled messages in this queue.
get the `messaging-activemq` `server` `jms-queue` `scheduled-count` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=scheduled-count)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `scheduled-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `selector`
the queue selector.
get the `messaging-activemq` `server` `jms-queue` `selector` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=selector)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `selector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `temporary`
whether the queue is temporary.
get the `messaging-activemq` `server` `jms-queue` `temporary` attribute.
operation: `/subsystem=messaging-activemq/server=<server name>/jms-queue=<jms-queue name>:read-attribute(name=temporary)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `server` `jms-queue` `temporary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `external-jms-queue`
operation: `/subsystem=messaging-activemq/external-jms-queue=<external-jms-queue name>:read-resource()`
To get the list of all the `messaging-activemq` `external-jms-queue` use '*' for `<external-jms-queue name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `external-jms-queue`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `external-jms-queue` `enable-amq1-prefix`
enable the use of `activemq` `1.x` prefixes in the addresses.
get the `messaging-activemq` `external-jms-queue` `enable-amq1-prefix` attribute.
operation: `/subsystem=messaging-activemq/external-jms-queue=<external-jms-queue name>:read-attribute(name=enable-amq1-prefix)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `external-jms-queue` `enable-amq1-prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `external-jms-queue` `entries`
the `jndi` names the queue will be bound to.
get the `messaging-activemq` `external-jms-queue` `entries` attribute.
operation: `/subsystem=messaging-activemq/external-jms-queue=<external-jms-queue name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `external-jms-queue` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `connector`
operation: `/subsystem=messaging-activemq/connector=<connector name>:read-resource()`
To get the list of all the `messaging-activemq` `connector` use '*' for `<connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connector` `factory-class`
class name of the factory class that can instantiate the connector.
get the `messaging-activemq` `connector` `factory-class` attribute.
operation: `/subsystem=messaging-activemq/connector=<connector name>:read-attribute(name=factory-class)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connector` `factory-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `connector` `params` attribute.
operation: `/subsystem=messaging-activemq/connector=<connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `connector` `socket-binding`
the socket binding that the connector will use to create connections
get the `messaging-activemq` `connector` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/connector=<connector name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `connector` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `pooled-connection-factory`
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-resource()`
To get the list of all the `messaging-activemq` `pooled-connection-factory` use '*' for `<pooled-connection-factory name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `pooled-connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `allow-local-transactions`
allow local transactions for outbond jakarta messaging sessions (it does not apply to `jmscontext` that explicitly disallows it).
get the `messaging-activemq` `pooled-connection-factory` `allow-local-transactions` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=allow-local-transactions)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `allow-local-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `auto-group`
the `autogroup`.
get the `messaging-activemq` `pooled-connection-factory` `auto-group` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=auto-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `auto-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `block-on-acknowledge`
true to set block on acknowledge.
get the `messaging-activemq` `pooled-connection-factory` `block-on-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=block-on-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `block-on-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `block-on-durable-send`
true to set block on durable send.
get the `messaging-activemq` `pooled-connection-factory` `block-on-durable-send` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=block-on-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `block-on-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `block-on-non-durable-send`
true to set block on non durable send.
get the `messaging-activemq` `pooled-connection-factory` `block-on-non-durable-send` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=block-on-non-durable-send)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `block-on-non-durable-send`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `cache-large-message-client`
true to cache large messages.
get the `messaging-activemq` `pooled-connection-factory` `cache-large-message-client` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=cache-large-message-client)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `cache-large-message-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `call-failover-timeout`
the timeout to use when fail over is in process (in ms).
get the `messaging-activemq` `pooled-connection-factory` `call-failover-timeout` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=call-failover-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `call-failover-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `call-timeout`
the call time out.
get the `messaging-activemq` `pooled-connection-factory` `call-timeout` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=call-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `call-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `client-failure-check-period`
the client failure check period.
get the `messaging-activemq` `pooled-connection-factory` `client-failure-check-period` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=client-failure-check-period)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `client-failure-check-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `client-id`
the client id.
get the `messaging-activemq` `pooled-connection-factory` `client-id` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `compress-large-messages`
whether large messages should be compressed.
get the `messaging-activemq` `pooled-connection-factory` `compress-large-messages` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=compress-large-messages)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `compress-large-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `confirmation-window-size`
the confirmation window size.
get the `messaging-activemq` `pooled-connection-factory` `confirmation-window-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=confirmation-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `confirmation-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `connection-load-balancing-policy-class-name`
name of a class implementing a `client-side` load balancing policy that a client can use to load balance sessions across different nodes in a cluster.
get the `messaging-activemq` `pooled-connection-factory` `connection-load-balancing-policy-class-name` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=connection-load-balancing-policy-class-name)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `connection-load-balancing-policy-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `connection-ttl`
the connection `ttl`.
get the `messaging-activemq` `pooled-connection-factory` `connection-ttl` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=connection-ttl)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `connection-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `connectors`
defines the connectors. these are stored in a map by connector name (with an undefined value). it is possible to pass a list of connector names when writing this attribute.
get the `messaging-activemq` `pooled-connection-factory` `connectors` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `consumer-max-rate`
the consumer max rate.
get the `messaging-activemq` `pooled-connection-factory` `consumer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=consumer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `consumer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `consumer-window-size`
the consumer window size.
get the `messaging-activemq` `pooled-connection-factory` `consumer-window-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=consumer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `consumer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `credential-reference`
credential (from credential store) to authenticate the pooled connection factory
get the `messaging-activemq` `pooled-connection-factory` `credential-reference` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-allow-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `pooled-connection-factory` `deserialization-allow-list` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-allow-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-allow-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-black-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `pooled-connection-factory` `deserialization-black-list` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-black-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-black-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-block-list`
a list of class names (separated by `whitespaces`) that are not allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `pooled-connection-factory` `deserialization-block-list` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-block-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-block-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-white-list`
a list of class names (separated by `whitespaces`) that are allowed to be used in serialization of jakarta messaging `objectmessage`.
get the `messaging-activemq` `pooled-connection-factory` `deserialization-white-list` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=deserialization-white-list)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `deserialization-white-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `discovery-group`
the discovery group name.
get the `messaging-activemq` `pooled-connection-factory` `discovery-group` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=discovery-group)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `dups-ok-batch-size`
the dups ok batch size.
get the `messaging-activemq` `pooled-connection-factory` `dups-ok-batch-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=dups-ok-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `dups-ok-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `enable-amq1-prefix`
enable the use of `activemq` `1.5.x` prefixes in the addresses.
get the `messaging-activemq` `pooled-connection-factory` `enable-amq1-prefix` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=enable-amq1-prefix)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `enable-amq1-prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `enlistment-trace`
enables `ironjacamar` to record enlistment traces for this `pooled-connection-factory`. this attribute is undefined by default and the behaviour is driven by the presence of the `ironjacamar.disable_enlistment_trace` system property.
get the `messaging-activemq` `pooled-connection-factory` `enlistment-trace` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=enlistment-trace)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `enlistment-trace`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `entries`
the `jndi` names the connection factory should be bound to.
get the `messaging-activemq` `pooled-connection-factory` `entries` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=entries)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `failover-on-initial-connection`
true to fail over on initial connection.
get the `messaging-activemq` `pooled-connection-factory` `failover-on-initial-connection` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=failover-on-initial-connection)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `failover-on-initial-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `group-id`
the group id.
get the `messaging-activemq` `pooled-connection-factory` `group-id` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=group-id)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `group-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `ha`
whether the connection factory supports high availability.
get the `messaging-activemq` `pooled-connection-factory` `ha` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=ha)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `ha`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `initial-connect-attempts`
the number of attempts to connect initially with this factory.
get the `messaging-activemq` `pooled-connection-factory` `initial-connect-attempts` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=initial-connect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `initial-connect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `initial-message-packet-size`
the initial size of messages created through this factory.
get the `messaging-activemq` `pooled-connection-factory` `initial-message-packet-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=initial-message-packet-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `initial-message-packet-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `jndi-params`
the `jndi` `params` to use for locating the destination for incoming connections.
get the `messaging-activemq` `pooled-connection-factory` `jndi-params` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=jndi-params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `jndi-params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `managed-connection-pool`
the class name of the managed connection pool used by this `pooled-connection-factory`.
get the `messaging-activemq` `pooled-connection-factory` `managed-connection-pool` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=managed-connection-pool)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `managed-connection-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `max-pool-size`
the maximum size for the pool
get the `messaging-activemq` `pooled-connection-factory` `max-pool-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `max-retry-interval`
the max retry interval.
get the `messaging-activemq` `pooled-connection-factory` `max-retry-interval` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=max-retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `max-retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `min-large-message-size`
the min large message size.
get the `messaging-activemq` `pooled-connection-factory` `min-large-message-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=min-large-message-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `min-large-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `min-pool-size`
the minimum size for the pool
get the `messaging-activemq` `pooled-connection-factory` `min-pool-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=min-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `min-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `password`
the default password to use with this connection factory. this is only needed when pointing the connection factory to a remote host.
get the `messaging-activemq` `pooled-connection-factory` `password` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `pre-acknowledge`
true to `pre-acknowledge`.
get the `messaging-activemq` `pooled-connection-factory` `pre-acknowledge` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=pre-acknowledge)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `pre-acknowledge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `producer-max-rate`
the producer max rate.
get the `messaging-activemq` `pooled-connection-factory` `producer-max-rate` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=producer-max-rate)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `producer-max-rate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `producer-window-size`
the producer window size.
get the `messaging-activemq` `pooled-connection-factory` `producer-window-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=producer-window-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `producer-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `protocol-manager-factory`
the protocol manager factory used by this pooled connection factory.
get the `messaging-activemq` `pooled-connection-factory` `protocol-manager-factory` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=protocol-manager-factory)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `protocol-manager-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `rebalance-connections`
rebalance inbound connections when cluster topology changes.
get the `messaging-activemq` `pooled-connection-factory` `rebalance-connections` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=rebalance-connections)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `rebalance-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `reconnect-attempts`
the reconnect attempts. by default, a pooled connection factory will try to reconnect infinitely to the messaging `server(s`).
get the `messaging-activemq` `pooled-connection-factory` `reconnect-attempts` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `retry-interval`
the retry interval.
get the `messaging-activemq` `pooled-connection-factory` `retry-interval` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=retry-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `retry-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `retry-interval-multiplier`
the retry interval multiplier.
get the `messaging-activemq` `pooled-connection-factory` `retry-interval-multiplier` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=retry-interval-multiplier)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `retry-interval-multiplier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `scheduled-thread-pool-max-size`
the scheduled thread pool max size.
get the `messaging-activemq` `pooled-connection-factory` `scheduled-thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=scheduled-thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `scheduled-thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `setup-attempts`
the number of times to set up an `mdb` endpoint
get the `messaging-activemq` `pooled-connection-factory` `setup-attempts` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=setup-attempts)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `setup-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `setup-interval`
the interval between attempts at setting up an `mdb` endpoint.
get the `messaging-activemq` `pooled-connection-factory` `setup-interval` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=setup-interval)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `setup-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `statistics-enabled`
define whether runtime statistics are enabled.
get the `messaging-activemq` `pooled-connection-factory` `statistics-enabled` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `thread-pool-max-size`
the thread pool max size.
get the `messaging-activemq` `pooled-connection-factory` `thread-pool-max-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=thread-pool-max-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `thread-pool-max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `transaction`
the type of transaction supported by this pooled connection factory (can be local, none or `xa`, default is `xa`).
get the `messaging-activemq` `pooled-connection-factory` `transaction` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=transaction)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `transaction`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `transaction-batch-size`
the transaction batch size.
get the `messaging-activemq` `pooled-connection-factory` `transaction-batch-size` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=transaction-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `transaction-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-auto-recovery`
true to use auto recovery.
get the `messaging-activemq` `pooled-connection-factory` `use-auto-recovery` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-auto-recovery)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-auto-recovery`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-global-pools`
true to use global pools.
get the `messaging-activemq` `pooled-connection-factory` `use-global-pools` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-global-pools)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-global-pools`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-jndi`
use `jndi` to locate the destination for incoming connections
get the `messaging-activemq` `pooled-connection-factory` `use-jndi` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-jndi)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-jndi`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-local-tx`
use a local transaction for incoming sessions
get the `messaging-activemq` `pooled-connection-factory` `use-local-tx` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-local-tx)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-local-tx`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-topology-for-load-balancing`
whether to use topology information from the cluster to connect to it. if set to 'false', only the initial connector will be used.
get the `messaging-activemq` `pooled-connection-factory` `use-topology-for-load-balancing` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=use-topology-for-load-balancing)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `use-topology-for-load-balancing`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `user`
the default `username` to use with this connection factory. this is only needed when pointing the connection factory to a remote host.
get the `messaging-activemq` `pooled-connection-factory` `user` attribute.
operation: `/subsystem=messaging-activemq/pooled-connection-factory=<pooled-connection-factory name>:read-attribute(name=user)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `pooled-connection-factory` `user`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `remote-connector`
operation: `/subsystem=messaging-activemq/remote-connector=<remote-connector name>:read-resource()`
To get the list of all the `messaging-activemq` `remote-connector` use '*' for `<remote-connector name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `remote-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `remote-connector` `params`
a `key-value` pair understood by the connector `factory-class` and used to configure it.
get the `messaging-activemq` `remote-connector` `params` attribute.
operation: `/subsystem=messaging-activemq/remote-connector=<remote-connector name>:read-attribute(name=params)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `remote-connector` `params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `remote-connector` `socket-binding`
the socket binding that the connector will use to create connections
get the `messaging-activemq` `remote-connector` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/remote-connector=<remote-connector name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `remote-connector` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `remote-connector` `ssl-context`
the `ssl` context that the connector will use to connect
get the `messaging-activemq` `remote-connector` `ssl-context` attribute.
operation: `/subsystem=messaging-activemq/remote-connector=<remote-connector name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `remote-connector` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `messaging-activemq` `socket-discovery-group`
operation: `/subsystem=messaging-activemq/socket-discovery-group=<socket-discovery-group name>:read-resource()`
To get the list of all the `messaging-activemq` `socket-discovery-group` use '*' for `<socket-discovery-group name>`." metadata = {parent=, title=syntax of the operation to get a `messaging-activemq` `socket-discovery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `socket-discovery-group` `initial-wait-timeout`
period, in ms, to wait for an initial broadcast to give us at least one node in the cluster.
get the `messaging-activemq` `socket-discovery-group` `initial-wait-timeout` attribute.
operation: `/subsystem=messaging-activemq/socket-discovery-group=<socket-discovery-group name>:read-attribute(name=initial-wait-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `socket-discovery-group` `initial-wait-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `socket-discovery-group` `refresh-timeout`
period the discovery group waits after receiving the last broadcast from a particular server before removing that `server's` connector pair entry from its list.
get the `messaging-activemq` `socket-discovery-group` `refresh-timeout` attribute.
operation: `/subsystem=messaging-activemq/socket-discovery-group=<socket-discovery-group name>:read-attribute(name=refresh-timeout)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `socket-discovery-group` `refresh-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `messaging-activemq` `socket-discovery-group` `socket-binding`
the discovery group socket binding.
get the `messaging-activemq` `socket-discovery-group` `socket-binding` attribute.
operation: `/subsystem=messaging-activemq/socket-discovery-group=<socket-discovery-group name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `messaging-activemq` `socket-discovery-group` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `average-commit-time`
the average time of transaction commit, measured from the moment the client calls commit until the transaction manager determines that the commit attempt was successful.
get the `transactions` `average-commit-time` attribute.
operation: `/subsystem=transactions:read-attribute(name=average-commit-time)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `average-commit-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `default-timeout`
the default timeout, in seconds, for a new transaction started by the transaction manager (see also the '`maximum-timeout`' attribute).
get the `transactions` `default-timeout` attribute.
operation: `/subsystem=transactions:read-attribute(name=default-timeout)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `default-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `enable-statistics`
whether transaction statistics should be gathered.
get the `transactions` `enable-statistics` attribute.
operation: `/subsystem=transactions:read-attribute(name=enable-statistics)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `enable-statistics`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `enable-tsm-status`
set to 'true' to enable the transaction status manager (`tsm`) service (used for out of process recovery). when 'true' the application server binds to the socket defined by the '`status-socket-binding`' attribute.
get the `transactions` `enable-tsm-status` attribute.
operation: `/subsystem=transactions:read-attribute(name=enable-tsm-status)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `enable-tsm-status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `hornetq-store-enable-async-io`
whether `asyncio` should be enabled for the journal store.
get the `transactions` `hornetq-store-enable-async-io` attribute.
operation: `/subsystem=transactions:read-attribute(name=hornetq-store-enable-async-io)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `hornetq-store-enable-async-io`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jdbc-action-store-drop-table`
if set to true then the `jdbc-action-store` table will be dropped during application server startup.
get the `transactions` `jdbc-action-store-drop-table` attribute.
operation: `/subsystem=transactions:read-attribute(name=jdbc-action-store-drop-table)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jdbc-action-store-drop-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jdbc-action-store-table-prefix`
optional prefix for the name of the database table used for writing transaction log records of the action store type.
get the `transactions` `jdbc-action-store-table-prefix` attribute.
operation: `/subsystem=transactions:read-attribute(name=jdbc-action-store-table-prefix)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jdbc-action-store-table-prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jdbc-communication-store-drop-table`
if set to true then the `jdbc-communication-store` table will be dropped during application server startup.
get the `transactions` `jdbc-communication-store-drop-table` attribute.
operation: `/subsystem=transactions:read-attribute(name=jdbc-communication-store-drop-table)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jdbc-communication-store-drop-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jdbc-communication-store-table-prefix`
optional prefix for the name of the database table used for writing transaction log records of the communication store type.
get the `transactions` `jdbc-communication-store-table-prefix` attribute.
operation: `/subsystem=transactions:read-attribute(name=jdbc-communication-store-table-prefix)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jdbc-communication-store-table-prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jdbc-state-store-drop-table`
if set to true then the `jdbc-state-store` table will be dropped during application server startup.
get the `transactions` `jdbc-state-store-drop-table` attribute.
operation: `/subsystem=transactions:read-attribute(name=jdbc-state-store-drop-table)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jdbc-state-store-drop-table`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jdbc-state-store-table-prefix`
optional prefix for the name of the database table used for writing transaction log records of the state store type.
get the `transactions` `jdbc-state-store-table-prefix` attribute.
operation: `/subsystem=transactions:read-attribute(name=jdbc-state-store-table-prefix)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jdbc-state-store-table-prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jdbc-store-datasource`
the `jndi` name of a `non-xa` `datasource` (`i.e`. one whose '`jta`' attribute is set to false) to be used for the `jdbc` store. the `datasource` must be defined in the `datasources` subsystem.
get the `transactions` `jdbc-store-datasource` attribute.
operation: `/subsystem=transactions:read-attribute(name=jdbc-store-datasource)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jdbc-store-datasource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `journal-store-enable-async-io`
whether `asyncio` should be enabled for the journal store. when true, the transaction manager will use the native `aio` (`posix` asynchronous `i/o`) libraries provided by the platform, if available. applicable only when `use-journal-store` is set true.
get the `transactions` `journal-store-enable-async-io` attribute.
operation: `/subsystem=transactions:read-attribute(name=journal-store-enable-async-io)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `journal-store-enable-async-io`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `jts`
if true, this enables the java transaction service (`jts`). if `jts` is enabled then the transactions attribute of the '`iiop-openjdk`' subsystem must be set to 'full'. this setting changes the internal mechanisms used in the transaction manager. it has no impact on the user working with `jta` `api`.
get the `transactions` `jts` attribute.
operation: `/subsystem=transactions:read-attribute(name=jts)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `jts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `maximum-timeout`
if the '`default-timeout`' attribute is zero then this value is used for setting the maximum timeout value (in seconds) for newly started transactions.
get the `transactions` `maximum-timeout` attribute.
operation: `/subsystem=transactions:read-attribute(name=maximum-timeout)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `maximum-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `node-identifier`
used to set the node identifier. each `xid` that the transaction manager creates will have this identifier encoded within it and ensures the transaction manager will only recover branches which match the specified identifier. it is imperative that this identifier is unique between application server instances which share either an object store or access common resource managers.
get the `transactions` `node-identifier` attribute.
operation: `/subsystem=transactions:read-attribute(name=node-identifier)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `node-identifier`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-aborted-transactions`
the number of aborted (`i.e`. `rolled-back`) transactions.
get the `transactions` `number-of-aborted-transactions` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-aborted-transactions)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-aborted-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-application-rollbacks`
the number of transactions that have been rolled back by application request. this includes those that timeout, since the timeout behavior is considered an attribute of the application configuration.
get the `transactions` `number-of-application-rollbacks` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-application-rollbacks)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-application-rollbacks`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-committed-transactions`
the number of committed transactions.
get the `transactions` `number-of-committed-transactions` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-committed-transactions)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-committed-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-heuristics`
the number of transactions which have terminated with heuristic outcomes.
get the `transactions` `number-of-heuristics` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-heuristics)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-heuristics`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-inflight-transactions`
the number of transactions that have begun but not yet terminated.
get the `transactions` `number-of-inflight-transactions` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-inflight-transactions)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-inflight-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-nested-transactions`
the total number of nested (sub) transactions created.
get the `transactions` `number-of-nested-transactions` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-nested-transactions)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-nested-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-resource-rollbacks`
the number of transactions that rolled back due to resource (participant) failure.
get the `transactions` `number-of-resource-rollbacks` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-resource-rollbacks)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-resource-rollbacks`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-system-rollbacks`
the number of transactions that have been rolled back due to internal system errors.
get the `transactions` `number-of-system-rollbacks` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-system-rollbacks)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-system-rollbacks`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-timed-out-transactions`
the number of transactions that have rolled back due to timeout.
get the `transactions` `number-of-timed-out-transactions` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-timed-out-transactions)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-timed-out-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `number-of-transactions`
the total number of transactions (`top-level` and nested) created.
get the `transactions` `number-of-transactions` attribute.
operation: `/subsystem=transactions:read-attribute(name=number-of-transactions)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `number-of-transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `object-store-path`
denotes a path where the transaction manager object store should store data. by default the value is treated as relative to the path denoted by the '`relative-to`' attribute. when the '`relative-to`' attribute is undefined the value is considered an absolute path. this setting is valid when default or journal store is used. `it's` not used when the `jdbc` journal store is used.
get the `transactions` `object-store-path` attribute.
operation: `/subsystem=transactions:read-attribute(name=object-store-path)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `object-store-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `object-store-relative-to`
references a global path configuration in the domain model, defaulting to the application server data directory (`jboss.server.data.dir`). the value of the '`object-store-path`' attribute will be treated as relative to this path. undefine this attribute to disable the default behavior and force the value of the '`object-store-path`' attribute to be treated as an absolute path.
get the `transactions` `object-store-relative-to` attribute.
operation: `/subsystem=transactions:read-attribute(name=object-store-relative-to)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `object-store-relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `process-id-socket-binding`
the name of the socket binding to use if the transaction manager should use a `socket-based` generation of transaction id. will be 'undefined' if '`process-id-uuid`' is 'true'; otherwise must be set.
get the `transactions` `process-id-socket-binding` attribute.
operation: `/subsystem=transactions:read-attribute(name=process-id-socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `process-id-socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `process-id-socket-max-ports`
the maximum number of ports to search for an open port if the transaction manager should use a `socket-based` generation of transaction id. if the port specified by the socket binding referenced in '`process-id-socket-binding`' is occupied, the next higher port will be tried until an open port is found or the number of ports specified by this attribute have been tried. will be 'undefined' if '`process-id-uuid`' is 'true'.
get the `transactions` `process-id-socket-max-ports` attribute.
operation: `/subsystem=transactions:read-attribute(name=process-id-socket-max-ports)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `process-id-socket-max-ports`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `process-id-uuid`
indicates a strategy used for obtaining a unique identifier needed for creation of transaction instances. when true then the transaction manager generates the transaction id based on process id (`pid`). when set to false then the transaction manager generates the transaction id based on the referenced socket binding, `i.e`. the attribute '`process-id-socket-binding`' is required.
get the `transactions` `process-id-uuid` attribute.
operation: `/subsystem=transactions:read-attribute(name=process-id-uuid)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `process-id-uuid`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `recovery-listener`
used to specify if the recovery system should listen on a network socket or not. when true the application server binds to a socket at the port defined by the '`socket-binding`' attribute. when the recovery listener is activated the user can remotely control the recovery manager.
get the `transactions` `recovery-listener` attribute.
operation: `/subsystem=transactions:read-attribute(name=recovery-listener)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `recovery-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `socket-binding`
references an existing socket binding that the transaction manager will listen on for recovery requests.
get the `transactions` `socket-binding` attribute.
operation: `/subsystem=transactions:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `stale-transaction-time`
the time for which transaction that contains remote enlistments is held in memory after it is being completed.
get the `transactions` `stale-transaction-time` attribute.
operation: `/subsystem=transactions:read-attribute(name=stale-transaction-time)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `stale-transaction-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `statistics-enabled`
whether transaction statistics should be gathered. the statistics are available by reading subsystem attributes prefixed with 'number-' and within the '`average-commit-time`' attribute.
get the `transactions` `statistics-enabled` attribute.
operation: `/subsystem=transactions:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `status-socket-binding`
references an existing socket binding that the transaction manager will listen on for transaction status requests.
get the `transactions` `status-socket-binding` attribute.
operation: `/subsystem=transactions:read-attribute(name=status-socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `status-socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `use-hornetq-store`
use the journal store for writing transaction logs. set to true to enable and to false to use the default log store type. the default log store is normally one file system file per transaction `log.it's` alternative to `jdbc` based store.
get the `transactions` `use-hornetq-store` attribute.
operation: `/subsystem=transactions:read-attribute(name=use-hornetq-store)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `use-hornetq-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `use-jdbc-store`
use the `jdbc` store for writing transaction logs. data is saved in the database indicated by the '`jdbc-store-datasource`' attribute. set to true to enable. note that the server will not boot if both '`use-journal-store`' and '`use-jdbc-store`' attributes are set to true. if both are set to false then the default `filesystem` based store will be used.
get the `transactions` `use-jdbc-store` attribute.
operation: `/subsystem=transactions:read-attribute(name=use-jdbc-store)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `use-jdbc-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `use-journal-store`
use the journal store for writing transaction logs. the journal store consists of one file for all the transactions. set to true to enable. note that the server will not boot if both '`use-journal-store`' and '`use-jdbc-store`' attributes are set to true. if both are set to false then the default `filesystem` based store will be used.
get the `transactions` `use-journal-store` attribute.
operation: `/subsystem=transactions:read-attribute(name=use-journal-store)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `use-journal-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `expose-all-logs`
configures the behaviour of the probe operation. when true then all transaction log records are exposed. by default only a subset of the transaction log is exposed.
get the `transactions` `log-store` `log-store` `expose-all-logs` attribute.
operation: `/subsystem=transactions/log-store=log-store:read-attribute(name=expose-all-logs)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `expose-all-logs`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `type`
`read-only` attribute that specifies the implementation type of the logging store. the possible values are default, journal and `jdbc`.
get the `transactions` `log-store` `log-store` `type` attribute.
operation: `/subsystem=transactions/log-store=log-store:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `transactions` `log-store` `log-store` `transactions`
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>:read-resource()`
To get the list of all the `transactions` `log-store` `log-store` `transactions` use '*' for `<transactions name>`." metadata = {parent=, title=syntax of the operation to get a `transactions` `log-store` `log-store` `transactions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `age-in-seconds`
the time since this transaction was prepared or when the recovery system last tried to recover it.
get the `transactions` `log-store` `log-store` `transactions` `age-in-seconds` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>:read-attribute(name=age-in-seconds)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `age-in-seconds`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `id`
the id of this transaction.
get the `transactions` `log-store` `log-store` `transactions` `id` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>:read-attribute(name=id)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `jmx-name`
the `jmx` name of this transaction.
get the `transactions` `log-store` `log-store` `transactions` `jmx-name` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>:read-attribute(name=jmx-name)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `jmx-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `type`
the type name under which this record is stored.
get the `transactions` `log-store` `log-store` `transactions` `type` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `transactions` `log-store` `log-store` `transactions` `participants`
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>/participants=<participants name>:read-resource()`
To get the list of all the `transactions` `log-store` `log-store` `transactions` `participants` use '*' for `<participants name>`." metadata = {parent=, title=syntax of the operation to get a `transactions` `log-store` `log-store` `transactions` `participants`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `eis-product-name`
the jakarta connectors enterprise information `system's` product name.
get the `transactions` `log-store` `log-store` `transactions` `participants` `eis-product-name` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>/participants=<participants name>:read-attribute(name=eis-product-name)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `eis-product-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `eis-product-version`
the jakarta connectors enterprise information `system's` product version.
get the `transactions` `log-store` `log-store` `transactions` `participants` `eis-product-version` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>/participants=<participants name>:read-attribute(name=eis-product-version)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `eis-product-version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `jmx-name`
the `jmx` name of this participant.
get the `transactions` `log-store` `log-store` `transactions` `participants` `jmx-name` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>/participants=<participants name>:read-attribute(name=jmx-name)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `jmx-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `jndi-name`
`jndi` name of this participant.
get the `transactions` `log-store` `log-store` `transactions` `participants` `jndi-name` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>/participants=<participants name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `status`
reports the commitment status of this participant (can be one of pending, prepared, failed, heuristic or `readonly`).
get the `transactions` `log-store` `log-store` `transactions` `participants` `status` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>/participants=<participants name>:read-attribute(name=status)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `type`
the type name under which this record is stored.
get the `transactions` `log-store` `log-store` `transactions` `participants` `type` attribute.
operation: `/subsystem=transactions/log-store=log-store/transactions=<transactions name>/participants=<participants name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `log-store` `log-store` `transactions` `participants` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `transactions` `commit-markable-resource`
operation: `/subsystem=transactions/commit-markable-resource=<commit-markable-resource name>:read-resource()`
To get the list of all the `transactions` `commit-markable-resource` use '*' for `<commit-markable-resource name>`." metadata = {parent=, title=syntax of the operation to get a `transactions` `commit-markable-resource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `commit-markable-resource` `batch-size`
configures number of ids placed within 'in' clause of the `sql` query 'delete from ... where `xid` in (...)' when periodic recovery processes the `cmr` database table garbage collection. when some garbage is left in the `cmr` database table after deletion another `sql` delete is run during the next recovery cycle. when '`immediate-cleanup`' is used this configuration has no big impact as the periodic recovery finds each time an empty `cmr` database table.
get the `transactions` `commit-markable-resource` `batch-size` attribute.
operation: `/subsystem=transactions/commit-markable-resource=<commit-markable-resource name>:read-attribute(name=batch-size)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `commit-markable-resource` `batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `commit-markable-resource` `immediate-cleanup`
immediate cleanup of ids associated with this `cmr` resource after the end of the transaction. when set to false the garbage collection of the ids is processed by periodic recovery.
get the `transactions` `commit-markable-resource` `immediate-cleanup` attribute.
operation: `/subsystem=transactions/commit-markable-resource=<commit-markable-resource name>:read-attribute(name=immediate-cleanup)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `commit-markable-resource` `immediate-cleanup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `commit-markable-resource` `jndi-name`
a `jndi` name of the `non-xa` `datasource` which is made to be a `cmr` resource for the purpose of transaction manager participant handling. the `datasource` is required to be marked as '`connectable=true`'.
get the `transactions` `commit-markable-resource` `jndi-name` attribute.
operation: `/subsystem=transactions/commit-markable-resource=<commit-markable-resource name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `commit-markable-resource` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `transactions` `commit-markable-resource` `name`
defines the database table name used for storing ids associated with this `cmr` resource. the default value for naming the database table is '`xids`'.
get the `transactions` `commit-markable-resource` `name` attribute.
operation: `/subsystem=transactions/commit-markable-resource=<commit-markable-resource name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `transactions` `commit-markable-resource` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `modcluster` `proxy`
operation: `/subsystem=modcluster/proxy=<proxy name>:read-resource()`
To get the list of all the `modcluster` `proxy` use '*' for `<proxy name>`." metadata = {parent=, title=syntax of the operation to get a `modcluster` `proxy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `advertise`
whether to enable `multicast-based` advertise mechanism.
get the `modcluster` `proxy` `advertise` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=advertise)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `advertise`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `advertise-security-key`
if specified, reverse proxy advertisements checksums will be verified using this value as a salt.
get the `modcluster` `proxy` `advertise-security-key` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=advertise-security-key)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `advertise-security-key`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `advertise-socket`
name of socket binding to use for the advertise socket.
get the `modcluster` `proxy` `advertise-socket` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=advertise-socket)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `advertise-socket`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `auto-enable-contexts`
if false, the contexts are registered with the reverse proxy as disabled, they need to be enabled manually by '`enable-context`' operation or via `mod_cluster_manager` console (if available).
get the `modcluster` `proxy` `auto-enable-contexts` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=auto-enable-contexts)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `auto-enable-contexts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `balancer`
the name of the balancer on the reverse proxy to register with.
get the `modcluster` `proxy` `balancer` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=balancer)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `balancer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `excluded-contexts`
list of contexts to exclude from registration with the reverse proxies.
get the `modcluster` `proxy` `excluded-contexts` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=excluded-contexts)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `excluded-contexts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `flush-packets`
whether to enable packet flushing on the reverse proxy.
get the `modcluster` `proxy` `flush-packets` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=flush-packets)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `flush-packets`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `flush-wait`
time to wait before flushing packets on the reverse proxy.
get the `modcluster` `proxy` `flush-wait` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=flush-wait)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `flush-wait`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `listener`
the name of undertow listener that will be registered with the reverse proxy.
get the `modcluster` `proxy` `listener` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=listener)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-balancing-group`
name of the load balancing group this node belongs to.
get the `modcluster` `proxy` `load-balancing-group` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=load-balancing-group)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-balancing-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `max-attempts`
maximum number of `failover` attempts by reverse proxy when sending the request to the `backend` server.
get the `modcluster` `proxy` `max-attempts` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=max-attempts)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `max-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `node-timeout`
timeout (in seconds) for proxy connections to a node. that is the time `mod_cluster` will wait for the `back-end` response before returning an error.
get the `modcluster` `proxy` `node-timeout` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=node-timeout)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `node-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `ping`
number of seconds for which to wait for a pong answer to a ping.
get the `modcluster` `proxy` `ping` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=ping)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `ping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `proxies`
list of reverse proxies for `mod_cluster` to register with defined by '`outbound-socket-binding`' in '`socket-binding-group`'.
get the `modcluster` `proxy` `proxies` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=proxies)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `proxies`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `proxy-url`
base `url` for `mcmp` requests.
get the `modcluster` `proxy` `proxy-url` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=proxy-url)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `proxy-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `session-draining-strategy`
session draining strategy used during `undeployment` of a web application.
get the `modcluster` `proxy` `session-draining-strategy` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=session-draining-strategy)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `session-draining-strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `smax`
soft maximum idle connection count for reverse proxy.
get the `modcluster` `proxy` `smax` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=smax)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `smax`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `socket-timeout`
timeout to wait for the reverse proxy to answer a `mcmp` message.
get the `modcluster` `proxy` `socket-timeout` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=socket-timeout)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `socket-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `ssl-context`
reference to the `sslcontext` to be used by `mod_cluster`.
get the `modcluster` `proxy` `ssl-context` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `status-interval`
number of seconds a status message is sent from the application server to the proxy.
get the `modcluster` `proxy` `status-interval` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=status-interval)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `status-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `sticky-session`
indicates whether subsequent requests for a given session should be routed to the same node, if possible.
get the `modcluster` `proxy` `sticky-session` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=sticky-session)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `sticky-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `sticky-session-force`
indicates whether the reverse proxy should run an error in the event that the balancer is unable to route a request to the node to which it is stuck. ignored if sticky sessions are disabled.
get the `modcluster` `proxy` `sticky-session-force` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=sticky-session-force)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `sticky-session-force`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `sticky-session-remove`
indicates whether the reverse proxy should remove session stickiness in the event that the balancer is unable to route a request to the node to which it is stuck. ignored if sticky sessions are disabled.
get the `modcluster` `proxy` `sticky-session-remove` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=sticky-session-remove)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `sticky-session-remove`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `stop-context-timeout`
maximum time to wait for context to process pending requests.
get the `modcluster` `proxy` `stop-context-timeout` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=stop-context-timeout)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `stop-context-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `ttl`
time to live (in seconds) for idle connections above `smax`.
get the `modcluster` `proxy` `ttl` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=ttl)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `worker-timeout`
number of seconds to wait for a worker to become available to handle a request.
get the `modcluster` `proxy` `worker-timeout` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>:read-attribute(name=worker-timeout)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `worker-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `decay`
the factor by which a historic load values should degrade in significance.
get the `modcluster` `proxy` `load-provider` `dynamic` `decay` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic:read-attribute(name=decay)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `decay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `history`
the number of historic (previous) load values to consider in the load balance factor computation.
get the `modcluster` `proxy` `load-provider` `dynamic` `history` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic:read-attribute(name=history)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `history`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `initial-load`
initial load within the range [`0..100`] with which to `prepopulate` historical values. used to gradually drive load to the node. value of `0` `prepopulates` with full load and value of -`1` disables this behavior.
get the `modcluster` `proxy` `load-provider` `dynamic` `initial-load` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic:read-attribute(name=initial-load)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `initial-load`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `modcluster` `proxy` `load-provider` `dynamic` `load-metric`
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/load-metric=<load-metric name>:read-resource()`
To get the list of all the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` use '*' for `<load-metric name>`." metadata = {parent=, title=syntax of the operation to get a `modcluster` `proxy` `load-provider` `dynamic` `load-metric`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `capacity`
maximum capacity of the metric used to normalize the load values from a metric which require explicit capacity.
get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `capacity` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/load-metric=<load-metric name>:read-attribute(name=capacity)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `capacity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `property`
properties to apply on a loaded metric instance.
get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `property` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/load-metric=<load-metric name>:read-attribute(name=property)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `type`
type of a `built-in` load metric from the enumerated values.
get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `type` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/load-metric=<load-metric name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `weight`
number indicating the significance of a metric with respect to the other metrics. for example, a metric of weight `2` will have twice the impact on the overall load factor than a metric of weight `1`.
get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `weight` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/load-metric=<load-metric name>:read-attribute(name=weight)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `load-metric` `weight`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric`
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/custom-load-metric=<custom-load-metric name>:read-resource()`
To get the list of all the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` use '*' for `<custom-load-metric name>`." metadata = {parent=, title=syntax of the operation to get a `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `capacity`
maximum capacity of the metric used to normalize the load values from a metric which require explicit capacity.
get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `capacity` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/custom-load-metric=<custom-load-metric name>:read-attribute(name=capacity)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `capacity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `class`
class name to use to construct a load metric from.
get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `class` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/custom-load-metric=<custom-load-metric name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `module`
module name from which to load the load metric class.
get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `module` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/custom-load-metric=<custom-load-metric name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `property`
properties to apply on a loaded metric instance.
get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `property` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/custom-load-metric=<custom-load-metric name>:read-attribute(name=property)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `weight`
number indicating the significance of a metric with respect to the other metrics. for example, a metric of weight `2` will have twice the impact on the overall load factor than a metric of weight `1`.
get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `weight` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=dynamic/custom-load-metric=<custom-load-metric name>:read-attribute(name=weight)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `dynamic` `custom-load-metric` `weight`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `modcluster` `proxy` `load-provider` `simple` `factor`
dynamic load provider computes the load balance factor of a node from a defined set of load metrics.
get the `modcluster` `proxy` `load-provider` `simple` `factor` attribute.
operation: `/subsystem=modcluster/proxy=<proxy name>/load-provider=simple:read-attribute(name=factor)`" metadata = {parent=, title=syntax of the operation to get the `modcluster` `proxy` `load-provider` `simple` `factor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `discovery` `static-provider`
operation: `/subsystem=discovery/static-provider=<static-provider name>:read-resource()`
To get the list of all the `discovery` `static-provider` use '*' for `<static-provider name>`." metadata = {parent=, title=syntax of the operation to get a `discovery` `static-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `discovery` `static-provider` `services`
the list of services that are configured with this provider
get the `discovery` `static-provider` `services` attribute.
operation: `/subsystem=discovery/static-provider=<static-provider name>:read-attribute(name=services)`" metadata = {parent=, title=syntax of the operation to get the `discovery` `static-provider` `services`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `discovery` `aggregate-provider`
operation: `/subsystem=discovery/aggregate-provider=<aggregate-provider name>:read-resource()`
To get the list of all the `discovery` `aggregate-provider` use '*' for `<aggregate-provider name>`." metadata = {parent=, title=syntax of the operation to get a `discovery` `aggregate-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `discovery` `aggregate-provider` `providers`
the list of providers that are aggregated by this provider
get the `discovery` `aggregate-provider` `providers` attribute.
operation: `/subsystem=discovery/aggregate-provider=<aggregate-provider name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `discovery` `aggregate-provider` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container`
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-resource()`
To get the list of all the `infinispan` `cache-container` use '*' for `<cache-container name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `aliases`
the list of aliases for this cache container
get the `infinispan` `cache-container` `aliases` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=aliases)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `aliases`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache-manager-status`
the status of the cache manager component. may return null if the cache manager is not started.
get the `infinispan` `cache-container` `cache-manager-status` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=cache-manager-status)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache-manager-status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cluster-name`
the name of the cluster this node belongs to. may return null if the cache manager is not started.
get the `infinispan` `cache-container` `cluster-name` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=cluster-name)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cluster-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `coordinator-address`
the logical address of the `cluster's` coordinator. may return null if the cache manager is not started.
get the `infinispan` `cache-container` `coordinator-address` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=coordinator-address)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `coordinator-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `default-cache`
the default `infinispan` cache
get the `infinispan` `cache-container` `default-cache` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=default-cache)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `default-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `is-coordinator`
set to true if this node is the `cluster's` coordinator. may return null if the cache manager is not started.
get the `infinispan` `cache-container` `is-coordinator` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=is-coordinator)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `is-coordinator`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-address`
the local address of the node. may return null if the cache manager is not started.
get the `infinispan` `cache-container` `local-address` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=local-address)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `marshaller`
defines the marshalling implementation used to marshal cache entries.
get the `infinispan` `cache-container` `marshaller` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=marshaller)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `marshaller`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `modules`
the set of modules associated with this cache `container's` configuration.
get the `infinispan` `cache-container` `modules` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=modules)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `statistics-enabled`
if enabled, statistics will be collected for this cache container
get the `infinispan` `cache-container` `statistics-enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `local-cache`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `local-cache` use '*' for `<local-cache name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `local-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `modules`
the set of modules associated with this `cache's` configuration.
get the `infinispan` `cache-container` `local-cache` `modules` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>:read-attribute(name=modules)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `statistics-enabled`
if enabled, statistics will be collected for this cache
get the `infinispan` `cache-container` `local-cache` `statistics-enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `acquire-timeout`
maximum time to attempt a particular lock acquisition.
get the `infinispan` `cache-container` `local-cache` `component` `locking` `acquire-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=locking:read-attribute(name=acquire-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `acquire-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `concurrency-level`
concurrency level for lock containers. adjust this value according to the number of concurrent threads interacting with `infinispan`.
get the `infinispan` `cache-container` `local-cache` `component` `locking` `concurrency-level` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=locking:read-attribute(name=concurrency-level)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `concurrency-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `isolation`
sets the cache locking isolation level.
get the `infinispan` `cache-container` `local-cache` `component` `locking` `isolation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=locking:read-attribute(name=isolation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `isolation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `striping`
if true, a pool of shared locks is maintained for all entries that need to be locked. otherwise, a lock is created per entry in the cache. lock striping helps control memory footprint but may reduce concurrency in the system.
get the `infinispan` `cache-container` `local-cache` `component` `locking` `striping` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=locking:read-attribute(name=striping)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `locking` `striping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `expiration` `interval`
interval (in milliseconds) between subsequent runs to purge expired entries from memory and any cache stores. if you wish to disable the periodic eviction process altogether, set `wakeupinterval` to -`1`.
get the `infinispan` `cache-container` `local-cache` `component` `expiration` `interval` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=expiration:read-attribute(name=interval)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `expiration` `interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `expiration` `lifespan`
maximum lifespan of a cache entry, after which the entry is expired `cluster-wide`, in milliseconds. -`1` means the entries never expire.
get the `infinispan` `cache-container` `local-cache` `component` `expiration` `lifespan` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=expiration:read-attribute(name=lifespan)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `expiration` `lifespan`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `expiration` `max-idle`
maximum idle time a cache entry will be maintained in the cache, in milliseconds. if the idle time is exceeded, the entry will be expired `cluster-wide`. -`1` means the entries never expire.
get the `infinispan` `cache-container` `local-cache` `component` `expiration` `max-idle` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=expiration:read-attribute(name=max-idle)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `expiration` `max-idle`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `complete-timeout`
the duration (in ms) after which idle transactions are removed.
get the `infinispan` `cache-container` `local-cache` `component` `transaction` `complete-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=transaction:read-attribute(name=complete-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `complete-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `locking`
the locking mode for this cache, one of optimistic or pessimistic.
get the `infinispan` `cache-container` `local-cache` `component` `transaction` `locking` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=transaction:read-attribute(name=locking)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `locking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `mode`
sets the cache transaction mode to one of none, `non_xa`, `non_durable_xa`, `full_xa`.
get the `infinispan` `cache-container` `local-cache` `component` `transaction` `mode` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=transaction:read-attribute(name=mode)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `stop-timeout`
if there are any ongoing transactions when a cache is stopped, `infinispan` waits for ongoing remote and local transactions to finish. the amount of time to wait for is defined by the cache stop timeout.
get the `infinispan` `cache-container` `local-cache` `component` `transaction` `stop-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/component=transaction:read-attribute(name=stop-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `component` `transaction` `stop-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `cache`
the name of the remote cache to use for this remote store.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `cache` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `remote-servers`
a list of remote servers for this cache store.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `remote-servers` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=remote-servers)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `remote-servers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `socket-timeout`
a socket timeout for remote cache communication.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `socket-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=socket-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `socket-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `tcp-no-delay`
a `tcp_nodelay` value for remote cache communication.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `tcp-no-delay` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote:read-attribute(name=tcp-no-delay)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `tcp-no-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `local-cache` `store` `remote` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=remote/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `remote` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `class`
the custom store implementation class to use for this cache store.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `class` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `local-cache` `store` `custom` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=custom/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `custom` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `cache-configuration`
name of the cache configuration template defined in `infinispan` server to create caches from.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `cache-configuration` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=cache-configuration)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `cache-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `remote-cache-container`
reference to a `container-managed` `remote-cache-container`.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `remote-cache-container` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=remote-cache-container)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=hotrod/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `hotrod` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `data-source`
references the data source used to connect to this store.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `data-source` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=data-source)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `dialect`
the dialect of this `datastore`.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `dialect` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=dialect)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `dialect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `create-on-start`
indicates whether the store should create this database table when the cache starts.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `create-on-start` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=create-on-start)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `create-on-start`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `data-column`
a database column to hold cache entry data.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `data-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=data-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `data-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `drop-on-stop`
indicates whether the store should drop this database table when the cache stops.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `drop-on-stop` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=drop-on-stop)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `drop-on-stop`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `fetch-size`
for db queries, the fetch size will be used to set the fetch size on `resultsets`.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `fetch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=fetch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `fetch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `id-column`
a database column to hold cache entry ids.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `id-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=id-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `id-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `prefix`
the prefix for the database table name.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `prefix` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `segment-column`
a database column to hold cache entry segment.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `segment-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=segment-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `segment-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `timestamp-column`
a database column to hold cache entry timestamps.
get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `timestamp-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=jdbc/table=string:read-attribute(name=timestamp-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `jdbc` `table` `string` `timestamp-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `local-cache` `store` `file` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `local-cache` `store` `file` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `local-cache` `store` `file` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `path`
the system path under which this cache store will persist its entries.
get the `infinispan` `cache-container` `local-cache` `store` `file` `path` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `local-cache` `store` `file` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `local-cache` `store` `file` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `local-cache` `store` `file` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `relative-to`
the system path to which the specified path is relative.
get the `infinispan` `cache-container` `local-cache` `store` `file` `relative-to` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `local-cache` `store` `file` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `local-cache` `store` `file` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `local-cache` `store` `file` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/store=file/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `store` `file` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `off-heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `local-cache` `memory` `off-heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/memory=off-heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `off-heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `off-heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `local-cache` `memory` `off-heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/memory=off-heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `off-heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `local-cache` `memory` `heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/memory=heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `local-cache` `memory` `heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/local-cache=<local-cache name>/memory=heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `local-cache` `memory` `heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `transport` `jgroups` `channel`
the channel of this cache `container's` transport.
get the `infinispan` `cache-container` `transport` `jgroups` `channel` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/transport=jgroups:read-attribute(name=channel)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `transport` `jgroups` `channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `transport` `jgroups` `lock-timeout`
the timeout for locks for the transport
get the `infinispan` `cache-container` `transport` `jgroups` `lock-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/transport=jgroups:read-attribute(name=lock-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `transport` `jgroups` `lock-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `keepalive-time`
used to specify the amount of milliseconds that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `infinispan` `cache-container` `thread-pool` `blocking` `keepalive-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=blocking:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `max-threads`
the maximum thread pool size.
get the `infinispan` `cache-container` `thread-pool` `blocking` `max-threads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=blocking:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `min-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `infinispan` `cache-container` `thread-pool` `blocking` `min-threads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=blocking:read-attribute(name=min-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `min-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `queue-length`
the queue length.
get the `infinispan` `cache-container` `thread-pool` `blocking` `queue-length` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=blocking:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `blocking` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `expiration` `keepalive-time`
used to specify the amount of milliseconds that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `infinispan` `cache-container` `thread-pool` `expiration` `keepalive-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=expiration:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `expiration` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `expiration` `min-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `infinispan` `cache-container` `thread-pool` `expiration` `min-threads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=expiration:read-attribute(name=min-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `expiration` `min-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `keepalive-time`
used to specify the amount of milliseconds that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `infinispan` `cache-container` `thread-pool` `non-blocking` `keepalive-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=non-blocking:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `max-threads`
the maximum thread pool size.
get the `infinispan` `cache-container` `thread-pool` `non-blocking` `max-threads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=non-blocking:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `min-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `infinispan` `cache-container` `thread-pool` `non-blocking` `min-threads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=non-blocking:read-attribute(name=min-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `min-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `queue-length`
the queue length.
get the `infinispan` `cache-container` `thread-pool` `non-blocking` `queue-length` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=non-blocking:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `non-blocking` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `keepalive-time`
used to specify the amount of milliseconds that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `infinispan` `cache-container` `thread-pool` `listener` `keepalive-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=listener:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `max-threads`
the maximum thread pool size.
get the `infinispan` `cache-container` `thread-pool` `listener` `max-threads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=listener:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `min-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `infinispan` `cache-container` `thread-pool` `listener` `min-threads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=listener:read-attribute(name=min-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `min-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `queue-length`
the queue length.
get the `infinispan` `cache-container` `thread-pool` `listener` `queue-length` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/thread-pool=listener:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `thread-pool` `listener` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `distributed-cache`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `distributed-cache` use '*' for `<distributed-cache name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `distributed-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `capacity-factor`
controls the proportion of entries that will reside on the local node, compared to the other nodes in the cluster.
get the `infinispan` `cache-container` `distributed-cache` `capacity-factor` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-attribute(name=capacity-factor)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `capacity-factor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `l1-lifespan`
maximum lifespan of an entry placed in the `l1` cache. this element configures the `l1` cache behavior in 'distributed' caches instances. in any other cache modes, this element is ignored.
get the `infinispan` `cache-container` `distributed-cache` `l1-lifespan` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-attribute(name=l1-lifespan)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `l1-lifespan`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `modules`
the set of modules associated with this `cache's` configuration.
get the `infinispan` `cache-container` `distributed-cache` `modules` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-attribute(name=modules)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `owners`
number of `cluster-wide` replicas for each cache entry.
get the `infinispan` `cache-container` `distributed-cache` `owners` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-attribute(name=owners)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `owners`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `remote-timeout`
in sync mode, the timeout (in ms) used to wait for an acknowledgment when making a remote call, after which the call is aborted and an exception is thrown.
get the `infinispan` `cache-container` `distributed-cache` `remote-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-attribute(name=remote-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `remote-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `segments`
controls the number of hash space segments which is the granularity for key distribution in the cluster. value must be strictly positive.
get the `infinispan` `cache-container` `distributed-cache` `segments` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-attribute(name=segments)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `segments`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `statistics-enabled`
if enabled, statistics will be collected for this cache
get the `infinispan` `cache-container` `distributed-cache` `statistics-enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `interval`
interval (in milliseconds) between subsequent runs to purge expired entries from memory and any cache stores. if you wish to disable the periodic eviction process altogether, set `wakeupinterval` to -`1`.
get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `interval` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=expiration:read-attribute(name=interval)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `lifespan`
maximum lifespan of a cache entry, after which the entry is expired `cluster-wide`, in milliseconds. -`1` means the entries never expire.
get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `lifespan` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=expiration:read-attribute(name=lifespan)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `lifespan`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `max-idle`
maximum idle time a cache entry will be maintained in the cache, in milliseconds. if the idle time is exceeded, the entry will be expired `cluster-wide`. -`1` means the entries never expire.
get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `max-idle` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=expiration:read-attribute(name=max-idle)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `expiration` `max-idle`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `state-transfer` `chunk-size`
the maximum number of cache entries in a batch of transferred state.
get the `infinispan` `cache-container` `distributed-cache` `component` `state-transfer` `chunk-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=state-transfer:read-attribute(name=chunk-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `state-transfer` `chunk-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `state-transfer` `timeout`
the maximum amount of time (ms) to wait for state from neighboring caches, before throwing an exception and aborting startup. if timeout is `0`, state transfer is performed asynchronously, and the cache will be immediately available.
get the `infinispan` `cache-container` `distributed-cache` `component` `state-transfer` `timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=state-transfer:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `state-transfer` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `enabled`
if enabled, the cache will enter degraded mode upon detecting a network partition that threatens the integrity of the cache.
get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=partition-handling:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `merge-policy`
defines the policy for resolving cache entry conflicts when merging partitions.
get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `merge-policy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=partition-handling:read-attribute(name=merge-policy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `merge-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `when-split`
defines the availability of cache entries after a network partition is detected.
get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `when-split` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=partition-handling:read-attribute(name=when-split)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `partition-handling` `when-split`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `acquire-timeout`
maximum time to attempt a particular lock acquisition.
get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `acquire-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=locking:read-attribute(name=acquire-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `acquire-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `concurrency-level`
concurrency level for lock containers. adjust this value according to the number of concurrent threads interacting with `infinispan`.
get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `concurrency-level` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=locking:read-attribute(name=concurrency-level)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `concurrency-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `isolation`
sets the cache locking isolation level.
get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `isolation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=locking:read-attribute(name=isolation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `isolation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `striping`
if true, a pool of shared locks is maintained for all entries that need to be locked. otherwise, a lock is created per entry in the cache. lock striping helps control memory footprint but may reduce concurrency in the system.
get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `striping` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=locking:read-attribute(name=striping)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `locking` `striping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=backups/backup=<backup name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` use '*' for `<backup name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `after-failures`
indicates the number of failures after which this backup site should go offline.
get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `after-failures` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=backups/backup=<backup name>:read-attribute(name=after-failures)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `after-failures`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `enabled`
indicates whether or not this backup site is enabled.
get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=backups/backup=<backup name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `failure-policy`
the policy to follow when connectivity to the backup site fails.
get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `failure-policy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=backups/backup=<backup name>:read-attribute(name=failure-policy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `failure-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `min-wait`
indicates the minimum time (in milliseconds) to wait after the max number of failures is reached, after which this backup site should go offline.
get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `min-wait` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=backups/backup=<backup name>:read-attribute(name=min-wait)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `min-wait`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `strategy`
the backup strategy for this cache
get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `strategy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=backups/backup=<backup name>:read-attribute(name=strategy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `timeout`
the timeout for replicating to the backup site.
get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=backups/backup=<backup name>:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `backups` `backup` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `complete-timeout`
the duration (in ms) after which idle transactions are removed.
get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `complete-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=transaction:read-attribute(name=complete-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `complete-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `locking`
the locking mode for this cache, one of optimistic or pessimistic.
get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `locking` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=transaction:read-attribute(name=locking)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `locking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `mode`
sets the cache transaction mode to one of none, `non_xa`, `non_durable_xa`, `full_xa`.
get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `mode` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=transaction:read-attribute(name=mode)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `stop-timeout`
if there are any ongoing transactions when a cache is stopped, `infinispan` waits for ongoing remote and local transactions to finish. the amount of time to wait for is defined by the cache stop timeout.
get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `stop-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/component=transaction:read-attribute(name=stop-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `component` `transaction` `stop-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `cache`
the name of the remote cache to use for this remote store.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `cache` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `remote-servers`
a list of remote servers for this cache store.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `remote-servers` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=remote-servers)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `remote-servers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `socket-timeout`
a socket timeout for remote cache communication.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `socket-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=socket-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `socket-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `tcp-no-delay`
a `tcp_nodelay` value for remote cache communication.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `tcp-no-delay` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote:read-attribute(name=tcp-no-delay)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `tcp-no-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=remote/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `remote` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `class`
the custom store implementation class to use for this cache store.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `class` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=custom/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `custom` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `data-source`
references the data source used to connect to this store.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `data-source` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=data-source)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `dialect`
the dialect of this `datastore`.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `dialect` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=dialect)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `dialect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `create-on-start`
indicates whether the store should create this database table when the cache starts.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `create-on-start` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=create-on-start)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `create-on-start`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `data-column`
a database column to hold cache entry data.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `data-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=data-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `data-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `drop-on-stop`
indicates whether the store should drop this database table when the cache stops.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `drop-on-stop` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=drop-on-stop)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `drop-on-stop`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `fetch-size`
for db queries, the fetch size will be used to set the fetch size on `resultsets`.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `fetch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=fetch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `fetch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `id-column`
a database column to hold cache entry ids.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `id-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=id-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `id-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `prefix`
the prefix for the database table name.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `prefix` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `segment-column`
a database column to hold cache entry segment.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `segment-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=segment-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `segment-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `timestamp-column`
a database column to hold cache entry timestamps.
get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `timestamp-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=jdbc/table=string:read-attribute(name=timestamp-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `jdbc` `table` `string` `timestamp-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `path`
the system path under which this cache store will persist its entries.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `path` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `relative-to`
the system path to which the specified path is relative.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `relative-to` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `distributed-cache` `store` `file` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=file/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `file` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `cache-configuration`
name of the cache configuration template defined in `infinispan` server to create caches from.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `cache-configuration` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=cache-configuration)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `cache-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `remote-cache-container`
reference to a `container-managed` `remote-cache-container`.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `remote-cache-container` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=remote-cache-container)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/store=hotrod/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `store` `hotrod` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `off-heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `distributed-cache` `memory` `off-heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/memory=off-heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `off-heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `off-heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `distributed-cache` `memory` `off-heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/memory=off-heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `off-heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `distributed-cache` `memory` `heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/memory=heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `distributed-cache` `memory` `heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/distributed-cache=<distributed-cache name>/memory=heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `distributed-cache` `memory` `heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `invalidation-cache`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `invalidation-cache` use '*' for `<invalidation-cache name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `invalidation-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `modules`
the set of modules associated with this `cache's` configuration.
get the `infinispan` `cache-container` `invalidation-cache` `modules` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>:read-attribute(name=modules)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `remote-timeout`
in sync mode, the timeout (in ms) used to wait for an acknowledgment when making a remote call, after which the call is aborted and an exception is thrown.
get the `infinispan` `cache-container` `invalidation-cache` `remote-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>:read-attribute(name=remote-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `remote-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `statistics-enabled`
if enabled, statistics will be collected for this cache
get the `infinispan` `cache-container` `invalidation-cache` `statistics-enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `acquire-timeout`
maximum time to attempt a particular lock acquisition.
get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `acquire-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=locking:read-attribute(name=acquire-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `acquire-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `concurrency-level`
concurrency level for lock containers. adjust this value according to the number of concurrent threads interacting with `infinispan`.
get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `concurrency-level` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=locking:read-attribute(name=concurrency-level)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `concurrency-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `isolation`
sets the cache locking isolation level.
get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `isolation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=locking:read-attribute(name=isolation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `isolation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `striping`
if true, a pool of shared locks is maintained for all entries that need to be locked. otherwise, a lock is created per entry in the cache. lock striping helps control memory footprint but may reduce concurrency in the system.
get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `striping` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=locking:read-attribute(name=striping)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `locking` `striping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `interval`
interval (in milliseconds) between subsequent runs to purge expired entries from memory and any cache stores. if you wish to disable the periodic eviction process altogether, set `wakeupinterval` to -`1`.
get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `interval` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=expiration:read-attribute(name=interval)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `lifespan`
maximum lifespan of a cache entry, after which the entry is expired `cluster-wide`, in milliseconds. -`1` means the entries never expire.
get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `lifespan` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=expiration:read-attribute(name=lifespan)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `lifespan`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `max-idle`
maximum idle time a cache entry will be maintained in the cache, in milliseconds. if the idle time is exceeded, the entry will be expired `cluster-wide`. -`1` means the entries never expire.
get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `max-idle` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=expiration:read-attribute(name=max-idle)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `expiration` `max-idle`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `complete-timeout`
the duration (in ms) after which idle transactions are removed.
get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `complete-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=transaction:read-attribute(name=complete-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `complete-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `locking`
the locking mode for this cache, one of optimistic or pessimistic.
get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `locking` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=transaction:read-attribute(name=locking)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `locking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `mode`
sets the cache transaction mode to one of none, `non_xa`, `non_durable_xa`, `full_xa`.
get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `mode` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=transaction:read-attribute(name=mode)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `stop-timeout`
if there are any ongoing transactions when a cache is stopped, `infinispan` waits for ongoing remote and local transactions to finish. the amount of time to wait for is defined by the cache stop timeout.
get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `stop-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/component=transaction:read-attribute(name=stop-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `component` `transaction` `stop-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `cache`
the name of the remote cache to use for this remote store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `cache` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `remote-servers`
a list of remote servers for this cache store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `remote-servers` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=remote-servers)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `remote-servers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `socket-timeout`
a socket timeout for remote cache communication.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `socket-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=socket-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `socket-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `tcp-no-delay`
a `tcp_nodelay` value for remote cache communication.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `tcp-no-delay` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote:read-attribute(name=tcp-no-delay)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `tcp-no-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=remote/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `remote` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `class`
the custom store implementation class to use for this cache store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `class` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=custom/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `custom` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `cache-configuration`
name of the cache configuration template defined in `infinispan` server to create caches from.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `cache-configuration` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=cache-configuration)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `cache-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `remote-cache-container`
reference to a `container-managed` `remote-cache-container`.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `remote-cache-container` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=remote-cache-container)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=hotrod/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `hotrod` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `data-source`
references the data source used to connect to this store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `data-source` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=data-source)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `dialect`
the dialect of this `datastore`.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `dialect` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=dialect)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `dialect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `create-on-start`
indicates whether the store should create this database table when the cache starts.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `create-on-start` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=create-on-start)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `create-on-start`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `data-column`
a database column to hold cache entry data.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `data-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=data-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `data-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `drop-on-stop`
indicates whether the store should drop this database table when the cache stops.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `drop-on-stop` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=drop-on-stop)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `drop-on-stop`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `fetch-size`
for db queries, the fetch size will be used to set the fetch size on `resultsets`.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `fetch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=fetch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `fetch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `id-column`
a database column to hold cache entry ids.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `id-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=id-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `id-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `prefix`
the prefix for the database table name.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `prefix` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `segment-column`
a database column to hold cache entry segment.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `segment-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=segment-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `segment-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `timestamp-column`
a database column to hold cache entry timestamps.
get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `timestamp-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=jdbc/table=string:read-attribute(name=timestamp-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `jdbc` `table` `string` `timestamp-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `path`
the system path under which this cache store will persist its entries.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `path` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `relative-to`
the system path to which the specified path is relative.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `relative-to` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/store=file/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `store` `file` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `off-heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `invalidation-cache` `memory` `off-heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/memory=off-heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `off-heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `off-heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `invalidation-cache` `memory` `off-heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/memory=off-heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `off-heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `invalidation-cache` `memory` `heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/memory=heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `invalidation-cache` `memory` `heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/invalidation-cache=<invalidation-cache name>/memory=heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `invalidation-cache` `memory` `heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `replicated-cache`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `replicated-cache` use '*' for `<replicated-cache name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `replicated-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `modules`
the set of modules associated with this `cache's` configuration.
get the `infinispan` `cache-container` `replicated-cache` `modules` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>:read-attribute(name=modules)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `remote-timeout`
in sync mode, the timeout (in ms) used to wait for an acknowledgment when making a remote call, after which the call is aborted and an exception is thrown.
get the `infinispan` `cache-container` `replicated-cache` `remote-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>:read-attribute(name=remote-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `remote-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `statistics-enabled`
if enabled, statistics will be collected for this cache
get the `infinispan` `cache-container` `replicated-cache` `statistics-enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `interval`
interval (in milliseconds) between subsequent runs to purge expired entries from memory and any cache stores. if you wish to disable the periodic eviction process altogether, set `wakeupinterval` to -`1`.
get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `interval` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=expiration:read-attribute(name=interval)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `lifespan`
maximum lifespan of a cache entry, after which the entry is expired `cluster-wide`, in milliseconds. -`1` means the entries never expire.
get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `lifespan` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=expiration:read-attribute(name=lifespan)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `lifespan`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `max-idle`
maximum idle time a cache entry will be maintained in the cache, in milliseconds. if the idle time is exceeded, the entry will be expired `cluster-wide`. -`1` means the entries never expire.
get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `max-idle` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=expiration:read-attribute(name=max-idle)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `expiration` `max-idle`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `state-transfer` `chunk-size`
the maximum number of cache entries in a batch of transferred state.
get the `infinispan` `cache-container` `replicated-cache` `component` `state-transfer` `chunk-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=state-transfer:read-attribute(name=chunk-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `state-transfer` `chunk-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `state-transfer` `timeout`
the maximum amount of time (ms) to wait for state from neighboring caches, before throwing an exception and aborting startup. if timeout is `0`, state transfer is performed asynchronously, and the cache will be immediately available.
get the `infinispan` `cache-container` `replicated-cache` `component` `state-transfer` `timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=state-transfer:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `state-transfer` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `enabled`
if enabled, the cache will enter degraded mode upon detecting a network partition that threatens the integrity of the cache.
get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=partition-handling:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `merge-policy`
defines the policy for resolving cache entry conflicts when merging partitions.
get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `merge-policy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=partition-handling:read-attribute(name=merge-policy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `merge-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `when-split`
defines the availability of cache entries after a network partition is detected.
get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `when-split` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=partition-handling:read-attribute(name=when-split)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `partition-handling` `when-split`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `acquire-timeout`
maximum time to attempt a particular lock acquisition.
get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `acquire-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=locking:read-attribute(name=acquire-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `acquire-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `concurrency-level`
concurrency level for lock containers. adjust this value according to the number of concurrent threads interacting with `infinispan`.
get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `concurrency-level` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=locking:read-attribute(name=concurrency-level)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `concurrency-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `isolation`
sets the cache locking isolation level.
get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `isolation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=locking:read-attribute(name=isolation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `isolation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `striping`
if true, a pool of shared locks is maintained for all entries that need to be locked. otherwise, a lock is created per entry in the cache. lock striping helps control memory footprint but may reduce concurrency in the system.
get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `striping` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=locking:read-attribute(name=striping)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `locking` `striping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=backups/backup=<backup name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` use '*' for `<backup name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `after-failures`
indicates the number of failures after which this backup site should go offline.
get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `after-failures` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=backups/backup=<backup name>:read-attribute(name=after-failures)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `after-failures`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `enabled`
indicates whether or not this backup site is enabled.
get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=backups/backup=<backup name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `failure-policy`
the policy to follow when connectivity to the backup site fails.
get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `failure-policy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=backups/backup=<backup name>:read-attribute(name=failure-policy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `failure-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `min-wait`
indicates the minimum time (in milliseconds) to wait after the max number of failures is reached, after which this backup site should go offline.
get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `min-wait` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=backups/backup=<backup name>:read-attribute(name=min-wait)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `min-wait`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `strategy`
the backup strategy for this cache
get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `strategy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=backups/backup=<backup name>:read-attribute(name=strategy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `timeout`
the timeout for replicating to the backup site.
get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=backups/backup=<backup name>:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `backups` `backup` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `complete-timeout`
the duration (in ms) after which idle transactions are removed.
get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `complete-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=transaction:read-attribute(name=complete-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `complete-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `locking`
the locking mode for this cache, one of optimistic or pessimistic.
get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `locking` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=transaction:read-attribute(name=locking)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `locking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `mode`
sets the cache transaction mode to one of none, `non_xa`, `non_durable_xa`, `full_xa`.
get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `mode` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=transaction:read-attribute(name=mode)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `stop-timeout`
if there are any ongoing transactions when a cache is stopped, `infinispan` waits for ongoing remote and local transactions to finish. the amount of time to wait for is defined by the cache stop timeout.
get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `stop-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/component=transaction:read-attribute(name=stop-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `component` `transaction` `stop-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `cache`
the name of the remote cache to use for this remote store.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `cache` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `remote-servers`
a list of remote servers for this cache store.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `remote-servers` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=remote-servers)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `remote-servers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `socket-timeout`
a socket timeout for remote cache communication.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `socket-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=socket-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `socket-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `tcp-no-delay`
a `tcp_nodelay` value for remote cache communication.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `tcp-no-delay` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote:read-attribute(name=tcp-no-delay)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `tcp-no-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=remote/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `remote` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `class`
the custom store implementation class to use for this cache store.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `class` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=custom/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `custom` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `data-source`
references the data source used to connect to this store.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `data-source` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=data-source)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `dialect`
the dialect of this `datastore`.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `dialect` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=dialect)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `dialect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `create-on-start`
indicates whether the store should create this database table when the cache starts.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `create-on-start` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=create-on-start)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `create-on-start`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `data-column`
a database column to hold cache entry data.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `data-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=data-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `data-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `drop-on-stop`
indicates whether the store should drop this database table when the cache stops.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `drop-on-stop` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=drop-on-stop)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `drop-on-stop`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `fetch-size`
for db queries, the fetch size will be used to set the fetch size on `resultsets`.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `fetch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=fetch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `fetch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `id-column`
a database column to hold cache entry ids.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `id-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=id-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `id-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `prefix`
the prefix for the database table name.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `prefix` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `segment-column`
a database column to hold cache entry segment.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `segment-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=segment-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `segment-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `timestamp-column`
a database column to hold cache entry timestamps.
get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `timestamp-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=jdbc/table=string:read-attribute(name=timestamp-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `jdbc` `table` `string` `timestamp-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `path`
the system path under which this cache store will persist its entries.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `path` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `relative-to`
the system path to which the specified path is relative.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `relative-to` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `replicated-cache` `store` `file` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=file/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `file` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `cache-configuration`
name of the cache configuration template defined in `infinispan` server to create caches from.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `cache-configuration` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=cache-configuration)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `cache-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `remote-cache-container`
reference to a `container-managed` `remote-cache-container`.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `remote-cache-container` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=remote-cache-container)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/store=hotrod/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `store` `hotrod` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `off-heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `replicated-cache` `memory` `off-heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/memory=off-heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `off-heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `off-heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `replicated-cache` `memory` `off-heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/memory=off-heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `off-heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `replicated-cache` `memory` `heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/memory=heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `replicated-cache` `memory` `heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/replicated-cache=<replicated-cache name>/memory=heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `replicated-cache` `memory` `heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `scattered-cache`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `scattered-cache` use '*' for `<scattered-cache name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `scattered-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `bias-lifespan`
when greater than zero, specifies the duration (in ms) that a cache entry will be cached on a `non-owner` following a write operation.
get the `infinispan` `cache-container` `scattered-cache` `bias-lifespan` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>:read-attribute(name=bias-lifespan)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `bias-lifespan`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `invalidation-batch-size`
the threshold after which batched invalidations are sent.
get the `infinispan` `cache-container` `scattered-cache` `invalidation-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>:read-attribute(name=invalidation-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `invalidation-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `modules`
the set of modules associated with this `cache's` configuration.
get the `infinispan` `cache-container` `scattered-cache` `modules` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>:read-attribute(name=modules)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `remote-timeout`
in sync mode, the timeout (in ms) used to wait for an acknowledgment when making a remote call, after which the call is aborted and an exception is thrown.
get the `infinispan` `cache-container` `scattered-cache` `remote-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>:read-attribute(name=remote-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `remote-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `segments`
controls the number of hash space segments which is the granularity for key distribution in the cluster. value must be strictly positive.
get the `infinispan` `cache-container` `scattered-cache` `segments` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>:read-attribute(name=segments)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `segments`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `statistics-enabled`
if enabled, statistics will be collected for this cache
get the `infinispan` `cache-container` `scattered-cache` `statistics-enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `interval`
interval (in milliseconds) between subsequent runs to purge expired entries from memory and any cache stores. if you wish to disable the periodic eviction process altogether, set `wakeupinterval` to -`1`.
get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `interval` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=expiration:read-attribute(name=interval)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `lifespan`
maximum lifespan of a cache entry, after which the entry is expired `cluster-wide`, in milliseconds. -`1` means the entries never expire.
get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `lifespan` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=expiration:read-attribute(name=lifespan)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `lifespan`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `max-idle`
maximum idle time a cache entry will be maintained in the cache, in milliseconds. if the idle time is exceeded, the entry will be expired `cluster-wide`. -`1` means the entries never expire.
get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `max-idle` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=expiration:read-attribute(name=max-idle)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `expiration` `max-idle`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `state-transfer` `chunk-size`
the maximum number of cache entries in a batch of transferred state.
get the `infinispan` `cache-container` `scattered-cache` `component` `state-transfer` `chunk-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=state-transfer:read-attribute(name=chunk-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `state-transfer` `chunk-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `state-transfer` `timeout`
the maximum amount of time (ms) to wait for state from neighboring caches, before throwing an exception and aborting startup. if timeout is `0`, state transfer is performed asynchronously, and the cache will be immediately available.
get the `infinispan` `cache-container` `scattered-cache` `component` `state-transfer` `timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=state-transfer:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `state-transfer` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `enabled`
if enabled, the cache will enter degraded mode upon detecting a network partition that threatens the integrity of the cache.
get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=partition-handling:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `merge-policy`
defines the policy for resolving cache entry conflicts when merging partitions.
get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `merge-policy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=partition-handling:read-attribute(name=merge-policy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `merge-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `when-split`
defines the availability of cache entries after a network partition is detected.
get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `when-split` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=partition-handling:read-attribute(name=when-split)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `partition-handling` `when-split`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `acquire-timeout`
maximum time to attempt a particular lock acquisition.
get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `acquire-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=locking:read-attribute(name=acquire-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `acquire-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `concurrency-level`
concurrency level for lock containers. adjust this value according to the number of concurrent threads interacting with `infinispan`.
get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `concurrency-level` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=locking:read-attribute(name=concurrency-level)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `concurrency-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `isolation`
sets the cache locking isolation level.
get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `isolation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=locking:read-attribute(name=isolation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `isolation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `striping`
if true, a pool of shared locks is maintained for all entries that need to be locked. otherwise, a lock is created per entry in the cache. lock striping helps control memory footprint but may reduce concurrency in the system.
get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `striping` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=locking:read-attribute(name=striping)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `locking` `striping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=backups/backup=<backup name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` use '*' for `<backup name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `after-failures`
indicates the number of failures after which this backup site should go offline.
get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `after-failures` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=backups/backup=<backup name>:read-attribute(name=after-failures)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `after-failures`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `enabled`
indicates whether or not this backup site is enabled.
get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `enabled` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=backups/backup=<backup name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `failure-policy`
the policy to follow when connectivity to the backup site fails.
get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `failure-policy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=backups/backup=<backup name>:read-attribute(name=failure-policy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `failure-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `min-wait`
indicates the minimum time (in milliseconds) to wait after the max number of failures is reached, after which this backup site should go offline.
get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `min-wait` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=backups/backup=<backup name>:read-attribute(name=min-wait)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `min-wait`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `strategy`
the backup strategy for this cache
get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `strategy` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=backups/backup=<backup name>:read-attribute(name=strategy)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `timeout`
the timeout for replicating to the backup site.
get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=backups/backup=<backup name>:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `backups` `backup` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `complete-timeout`
the duration (in ms) after which idle transactions are removed.
get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `complete-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=transaction:read-attribute(name=complete-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `complete-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `locking`
the locking mode for this cache, one of optimistic or pessimistic.
get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `locking` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=transaction:read-attribute(name=locking)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `locking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `mode`
sets the cache transaction mode to one of none, `non_xa`, `non_durable_xa`, `full_xa`.
get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `mode` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=transaction:read-attribute(name=mode)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `stop-timeout`
if there are any ongoing transactions when a cache is stopped, `infinispan` waits for ongoing remote and local transactions to finish. the amount of time to wait for is defined by the cache stop timeout.
get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `stop-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/component=transaction:read-attribute(name=stop-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `component` `transaction` `stop-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `cache`
the name of the remote cache to use for this remote store.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `cache` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `remote-servers`
a list of remote servers for this cache store.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `remote-servers` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=remote-servers)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `remote-servers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `socket-timeout`
a socket timeout for remote cache communication.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `socket-timeout` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=socket-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `socket-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `tcp-no-delay`
a `tcp_nodelay` value for remote cache communication.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `tcp-no-delay` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote:read-attribute(name=tcp-no-delay)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `tcp-no-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=remote/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `remote` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `class`
the custom store implementation class to use for this cache store.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `class` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=custom/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `custom` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `data-source`
references the data source used to connect to this store.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `data-source` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=data-source)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `dialect`
the dialect of this `datastore`.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `dialect` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=dialect)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `dialect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `create-on-start`
indicates whether the store should create this database table when the cache starts.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `create-on-start` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=create-on-start)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `create-on-start`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `data-column`
a database column to hold cache entry data.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `data-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=data-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `data-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `drop-on-stop`
indicates whether the store should drop this database table when the cache stops.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `drop-on-stop` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=drop-on-stop)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `drop-on-stop`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `fetch-size`
for db queries, the fetch size will be used to set the fetch size on `resultsets`.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `fetch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=fetch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `fetch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `id-column`
a database column to hold cache entry ids.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `id-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=id-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `id-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `prefix`
the prefix for the database table name.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `prefix` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `segment-column`
a database column to hold cache entry segment.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `segment-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=segment-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `segment-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `timestamp-column`
a database column to hold cache entry timestamps.
get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `timestamp-column` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=jdbc/table=string:read-attribute(name=timestamp-column)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `jdbc` `table` `string` `timestamp-column`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `path`
the system path under which this cache store will persist its entries.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `path` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `relative-to`
the system path to which the specified path is relative.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `relative-to` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `scattered-cache` `store` `file` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=file/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `file` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `cache-configuration`
name of the cache configuration template defined in `infinispan` server to create caches from.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `cache-configuration` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=cache-configuration)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `cache-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `fetch-state`
if true, fetch persistent state when joining a cluster. if multiple cache stores are chained, only one of them can have this property enabled.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `fetch-state` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=fetch-state)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `fetch-state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `max-batch-size`
the maximum size of a batch to be `inserted/deleted` from the store. if the value is less than one, then no upper limit is placed on the number of operations in a batch.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `max-batch-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=max-batch-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `max-batch-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `passivation`
if true, data is only written to the cache store when it is evicted from memory, a phenomenon known as 'passivation'. next time the data is requested, it will be 'activated' which means that data will be brought back to memory and removed from the persistent store. if false, the cache store contains a copy of the contents in memory, so writes to cache result in cache store writes. this essentially gives you a '`write-through`' configuration.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `passivation` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=passivation)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `passivation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `preload`
if true, when the cache starts, data stored in the cache store will be `pre-loaded` into memory. this is particularly useful when data in the cache store will be needed immediately after startup and you want to avoid cache operations being delayed as a result of loading this data lazily. can be used to provide a '`warm-cache`' on startup, however there is a performance penalty as startup time is affected by this process.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `preload` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=preload)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `preload`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `properties`
a list of cache store properties.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `properties` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `purge`
if true, purges this cache store when it starts up.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `purge` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=purge)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `purge`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `remote-cache-container`
reference to a `container-managed` `remote-cache-container`.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `remote-cache-container` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=remote-cache-container)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `segmented`
indicates whether or not this cache store should be segment aware.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `segmented` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=segmented)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `segmented`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `shared`
this setting should be set to true when multiple cache instances share the same cache store (`e.g`., multiple nodes in a cluster using a `jdbc-based` `cachestore` pointing to the same, shared database.) setting this to true avoids multiple cache instances writing the same modification multiple times. if enabled, only the node where the modification originated will write to the cache store. if disabled, each individual cache reacts to a potential remote update by storing the data to the cache store.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `shared` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod:read-attribute(name=shared)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `shared`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `write` `behind` `modification-queue-size`
maximum number of entries in the asynchronous queue. when the queue is full, the store becomes `write-through` until it can accept new entries.
get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `write` `behind` `modification-queue-size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/store=hotrod/write=behind:read-attribute(name=modification-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `store` `hotrod` `write` `behind` `modification-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `off-heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `scattered-cache` `memory` `off-heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/memory=off-heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `off-heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `off-heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `scattered-cache` `memory` `off-heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/memory=off-heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `off-heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `heap` `size`
eviction threshold, as defined by the size unit.
get the `infinispan` `cache-container` `scattered-cache` `memory` `heap` `size` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/memory=heap:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `heap` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `heap` `size-unit`
the unit of the eviction threshold.
get the `infinispan` `cache-container` `scattered-cache` `memory` `heap` `size-unit` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/scattered-cache=<scattered-cache name>/memory=heap:read-attribute(name=size-unit)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `scattered-cache` `memory` `heap` `size-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `cache-container` `cache`
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-resource()`
To get the list of all the `infinispan` `cache-container` `cache` use '*' for `<cache name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `cache-container` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `activations`
the number of cache node activations (bringing a node into memory from a cache store).
get the `infinispan` `cache-container` `cache` `activations` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=activations)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `activations`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `average-read-time`
average time (in ms) for cache reads. includes hits and misses.
get the `infinispan` `cache-container` `cache` `average-read-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=average-read-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `average-read-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `average-remove-time`
average time (in ms) for cache removes.
get the `infinispan` `cache-container` `cache` `average-remove-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=average-remove-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `average-remove-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `average-replication-time`
the average time taken to replicate data around the cluster.
get the `infinispan` `cache-container` `cache` `average-replication-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=average-replication-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `average-replication-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `average-write-time`
average time (in ms) for cache writes.
get the `infinispan` `cache-container` `cache` `average-write-time` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=average-write-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `average-write-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `evictions`
the number of cache eviction operations.
get the `infinispan` `cache-container` `cache` `evictions` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=evictions)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `evictions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `hit-ratio`
the `hit/miss` ratio for the cache (`hits/hits+misses`).
get the `infinispan` `cache-container` `cache` `hit-ratio` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=hit-ratio)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `hit-ratio`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `hits`
the number of cache attribute hits.
get the `infinispan` `cache-container` `cache` `hits` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=hits)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `hits`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `invalidations`
the number of cache invalidations.
get the `infinispan` `cache-container` `cache` `invalidations` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=invalidations)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `invalidations`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `misses`
the number of cache attribute misses.
get the `infinispan` `cache-container` `cache` `misses` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=misses)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `misses`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `number-of-entries`
the number of entries in the cache including `passivated` entries.
get the `infinispan` `cache-container` `cache` `number-of-entries` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=number-of-entries)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `number-of-entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `number-of-entries-in-memory`
the number of entries in the cache excluding `passivated` entries.
get the `infinispan` `cache-container` `cache` `number-of-entries-in-memory` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=number-of-entries-in-memory)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `number-of-entries-in-memory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `passivations`
the number of cache node `passivations` (`passivating` a node from memory to a cache store).
get the `infinispan` `cache-container` `cache` `passivations` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=passivations)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `passivations`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `read-write-ratio`
the `read/write` ratio of the cache ((`hits+misses)/stores`).
get the `infinispan` `cache-container` `cache` `read-write-ratio` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=read-write-ratio)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `read-write-ratio`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `remove-hits`
the number of cache attribute remove hits.
get the `infinispan` `cache-container` `cache` `remove-hits` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=remove-hits)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `remove-hits`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `remove-misses`
the number of cache attribute remove misses.
get the `infinispan` `cache-container` `cache` `remove-misses` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=remove-misses)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `remove-misses`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `replication-count`
the number of times data was replicated around the cluster.
get the `infinispan` `cache-container` `cache` `replication-count` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=replication-count)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `replication-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `replication-failures`
the number of data replication failures.
get the `infinispan` `cache-container` `cache` `replication-failures` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=replication-failures)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `replication-failures`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `success-ratio`
the data replication success ratio (`successes/successes+failures`).
get the `infinispan` `cache-container` `cache` `success-ratio` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=success-ratio)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `success-ratio`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `time-since-reset`
time (in secs) since cache statistics were reset.
get the `infinispan` `cache-container` `cache` `time-since-reset` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=time-since-reset)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `time-since-reset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `time-since-start`
time (in secs) since cache was started.
get the `infinispan` `cache-container` `cache` `time-since-start` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=time-since-start)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `time-since-start`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `writes`
the number of cache attribute put operations.
get the `infinispan` `cache-container` `cache` `writes` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>:read-attribute(name=writes)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `writes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `locking` `current-concurrency-level`
the estimated number of concurrently updating threads which this cache can support.
get the `infinispan` `cache-container` `cache` `component` `locking` `current-concurrency-level` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=locking:read-attribute(name=current-concurrency-level)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `locking` `current-concurrency-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `locking` `number-of-locks-available`
the number of locks available to this cache.
get the `infinispan` `cache-container` `cache` `component` `locking` `number-of-locks-available` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=locking:read-attribute(name=number-of-locks-available)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `locking` `number-of-locks-available`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `locking` `number-of-locks-held`
the number of locks currently in use by this cache.
get the `infinispan` `cache-container` `cache` `component` `locking` `number-of-locks-held` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=locking:read-attribute(name=number-of-locks-held)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `locking` `number-of-locks-held`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `persistence` `cache-loader-loads`
the number of cache loader node loads.
get the `infinispan` `cache-container` `cache` `component` `persistence` `cache-loader-loads` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=persistence:read-attribute(name=cache-loader-loads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `persistence` `cache-loader-loads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `persistence` `cache-loader-misses`
the number of cache loader node misses.
get the `infinispan` `cache-container` `cache` `component` `persistence` `cache-loader-misses` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=persistence:read-attribute(name=cache-loader-misses)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `persistence` `cache-loader-misses`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `transaction` `commits`
the number of transaction commits.
get the `infinispan` `cache-container` `cache` `component` `transaction` `commits` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=transaction:read-attribute(name=commits)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `transaction` `commits`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `transaction` `prepares`
the number of transaction prepares.
get the `infinispan` `cache-container` `cache` `component` `transaction` `prepares` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=transaction:read-attribute(name=prepares)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `transaction` `prepares`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `transaction` `rollbacks`
the number of transaction rollbacks.
get the `infinispan` `cache-container` `cache` `component` `transaction` `rollbacks` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=transaction:read-attribute(name=rollbacks)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `transaction` `rollbacks`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `partition-handling` `availability`
indicates the current availability of the cache.
get the `infinispan` `cache-container` `cache` `component` `partition-handling` `availability` attribute.
operation: `/subsystem=infinispan/cache-container=<cache-container name>/cache=<cache name>/component=partition-handling:read-attribute(name=availability)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `cache-container` `cache` `component` `partition-handling` `availability`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `remote-cache-container`
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-resource()`
To get the list of all the `infinispan` `remote-cache-container` use '*' for `<remote-cache-container name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `active-connections`
the number of active connections to the `infinispan` server.
get the `infinispan` `remote-cache-container` `active-connections` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=active-connections)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `active-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `connection-timeout`
defines the maximum socket connect timeout before giving up connecting to the server.
get the `infinispan` `remote-cache-container` `connection-timeout` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=connection-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `connection-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `connections`
the total number of connections to the `infinispan` server.
get the `infinispan` `remote-cache-container` `connections` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=connections)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `default-remote-cluster`
required default remote server cluster.
get the `infinispan` `remote-cache-container` `default-remote-cluster` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=default-remote-cluster)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `default-remote-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `idle-connections`
the number of idle connections to the `infinispan` server.
get the `infinispan` `remote-cache-container` `idle-connections` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=idle-connections)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `idle-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `key-size-estimate`
this hint allows sizing of byte buffers when serializing and `deserializing` keys, to minimize array resizing.
get the `infinispan` `remote-cache-container` `key-size-estimate` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=key-size-estimate)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `key-size-estimate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `marshaller`
defines the marshalling implementation used to marshal cache entries.
get the `infinispan` `remote-cache-container` `marshaller` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=marshaller)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `marshaller`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `max-retries`
sets the maximum number of retries for each request. a valid value should be greater or equals than `0`. zero means no retry will made in case of a network failure.
get the `infinispan` `remote-cache-container` `max-retries` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=max-retries)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `max-retries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `modules`
the set of modules associated with this remote cache `container's` configuration.
get the `infinispan` `remote-cache-container` `modules` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=modules)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `properties`
a list of remote cache container properties.
get the `infinispan` `remote-cache-container` `properties` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `protocol-version`
this property defines the protocol version that this client should use.
get the `infinispan` `remote-cache-container` `protocol-version` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=protocol-version)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `protocol-version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `socket-timeout`
enable or disable `so_timeout` on socket connections to remote hot rod servers with the specified timeout, in milliseconds. a timeout of `0` is interpreted as an infinite timeout.
get the `infinispan` `remote-cache-container` `socket-timeout` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=socket-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `socket-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `statistics-enabled`
enables statistics gathering for this remote cache.
get the `infinispan` `remote-cache-container` `statistics-enabled` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `tcp-keep-alive`
configures `tcp` `keepalive` on the `tcp` stack.
get the `infinispan` `remote-cache-container` `tcp-keep-alive` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=tcp-keep-alive)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `tcp-keep-alive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `tcp-no-delay`
enable or disable `tcp_nodelay` on socket connections to remote hot rod servers.
get the `infinispan` `remote-cache-container` `tcp-no-delay` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=tcp-no-delay)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `tcp-no-delay`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `transaction-timeout`
the duration (in ms) after which idle transactions are rolled back.
get the `infinispan` `remote-cache-container` `transaction-timeout` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=transaction-timeout)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `transaction-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `value-size-estimate`
this hint allows sizing of byte buffers when serializing and `deserializing` values, to minimize array resizing.
get the `infinispan` `remote-cache-container` `value-size-estimate` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>:read-attribute(name=value-size-estimate)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `value-size-estimate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `remote-cache-container` `remote-cluster`
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cluster=<remote-cluster name>:read-resource()`
To get the list of all the `infinispan` `remote-cache-container` `remote-cluster` use '*' for `<remote-cluster name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `remote-cache-container` `remote-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cluster` `socket-bindings`
list of `outbound-socket-bindings` of hot rod servers to connect to.
get the `infinispan` `remote-cache-container` `remote-cluster` `socket-bindings` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cluster=<remote-cluster name>:read-attribute(name=socket-bindings)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cluster` `socket-bindings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `infinispan` `remote-cache-container` `remote-cache`
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-resource()`
To get the list of all the `infinispan` `remote-cache-container` `remote-cache` use '*' for `<remote-cache name>`." metadata = {parent=, title=syntax of the operation to get a `infinispan` `remote-cache-container` `remote-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `average-read-time`
the average read time, in milliseconds, for this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `average-read-time` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=average-read-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `average-read-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `average-remove-time`
the average remove time, in milliseconds, for this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `average-remove-time` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=average-remove-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `average-remove-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `average-write-time`
the average write time, in milliseconds, to this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `average-write-time` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=average-write-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `average-write-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `hits`
the number of hits to this remote cache, excluding hits from the `near-cache`.
get the `infinispan` `remote-cache-container` `remote-cache` `hits` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=hits)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `hits`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `misses`
the number of misses to this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `misses` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=misses)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `misses`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-hits`
the number of `near-cache` hits for this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-hits` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=near-cache-hits)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-hits`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-invalidations`
the number of `near-cache` invalidations for this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-invalidations` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=near-cache-invalidations)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-invalidations`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-misses`
the number of `near-cache` misses for this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-misses` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=near-cache-misses)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-misses`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-size`
the number of entries in the `near-cache` for this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-size` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=near-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `near-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `removes`
the number of removes to this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `removes` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=removes)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `removes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `time-since-reset`
the number of seconds since statistics were reset on this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `time-since-reset` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=time-since-reset)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `time-since-reset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `writes`
the number of writes to this remote cache.
get the `infinispan` `remote-cache-container` `remote-cache` `writes` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/remote-cache=<remote-cache name>:read-attribute(name=writes)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `remote-cache` `writes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `keepalive-time`
used to specify the amount of milliseconds that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `infinispan` `remote-cache-container` `thread-pool` `async` `keepalive-time` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/thread-pool=async:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `max-threads`
the maximum thread pool size.
get the `infinispan` `remote-cache-container` `thread-pool` `async` `max-threads` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/thread-pool=async:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `min-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `infinispan` `remote-cache-container` `thread-pool` `async` `min-threads` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/thread-pool=async:read-attribute(name=min-threads)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `min-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `queue-length`
the queue length.
get the `infinispan` `remote-cache-container` `thread-pool` `async` `queue-length` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/thread-pool=async:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `thread-pool` `async` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `component` `security` `ssl-context`
reference to the `elytron-managed` `sslcontext` to be used for connecting to the remote cluster.
get the `infinispan` `remote-cache-container` `component` `security` `ssl-context` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/component=security:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `component` `security` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `exhausted-action`
specifies what happens when asking for a connection from a `server's` pool, and that pool is exhausted.
get the `infinispan` `remote-cache-container` `component` `connection-pool` `exhausted-action` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/component=connection-pool:read-attribute(name=exhausted-action)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `exhausted-action`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `max-active`
controls the maximum number of connections per server that are allocated (checked out to client threads, or idle in the pool) at one time. when `non-positive`, there is no limit to the number of connections per server. when `maxactive` is reached, the connection pool for that server is said to be exhausted. value -`1` means no limit.
get the `infinispan` `remote-cache-container` `component` `connection-pool` `max-active` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/component=connection-pool:read-attribute(name=max-active)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `max-active`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `max-wait`
the amount of time in milliseconds to wait for a connection to become available when the exhausted action is `exhaustedaction.wait`, after which a `java.util.nosuchelementexception` will be thrown. if a negative value is supplied, the pool will block indefinitely.
get the `infinispan` `remote-cache-container` `component` `connection-pool` `max-wait` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/component=connection-pool:read-attribute(name=max-wait)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `max-wait`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `min-evictable-idle-time`
specifies the minimum amount of time that an connection may sit idle in the pool before it is eligible for eviction due to idle time. when `non-positive`, no connection will be dropped from the pool due to idle time alone. this setting has no effect unless `timebetweenevictionrunsmillis` > `0`.
get the `infinispan` `remote-cache-container` `component` `connection-pool` `min-evictable-idle-time` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/component=connection-pool:read-attribute(name=min-evictable-idle-time)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `min-evictable-idle-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `min-idle`
sets a target value for the minimum number of idle connections (per server) that should always be available. if this parameter is set to a positive number and `timebetweenevictionrunsmillis` > `0`, each time the idle connection eviction thread runs, it will try to create enough idle instances so that there will be `minidle` idle instances available for each server.
get the `infinispan` `remote-cache-container` `component` `connection-pool` `min-idle` attribute.
operation: `/subsystem=infinispan/remote-cache-container=<remote-cache-container name>/component=connection-pool:read-attribute(name=min-idle)`" metadata = {parent=, title=syntax of the operation to get the `infinispan` `remote-cache-container` `component` `connection-pool` `min-idle`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `metrics` `exposed-subsystems`
the names of the `wildfly` subsystems that exposes their metrics (or '*' to expose any subsystem metrics).
get the `metrics` `exposed-subsystems` attribute.
operation: `/subsystem=metrics:read-attribute(name=exposed-subsystems)`" metadata = {parent=, title=syntax of the operation to get the `metrics` `exposed-subsystems`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `metrics` `prefix`
prefix prepended to the name of the `wildfly` metrics exposed by the `http` endpoints.
get the `metrics` `prefix` attribute.
operation: `/subsystem=metrics:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `metrics` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `metrics` `security-enabled`
true if authentication is required to access the `http` endpoint on the `http` management interface.
get the `metrics` `security-enabled` attribute.
operation: `/subsystem=metrics:read-attribute(name=security-enabled)`" metadata = {parent=, title=syntax of the operation to get the `metrics` `security-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `core-management` `service` `configuration-changes` `max-history`
the maximum number of configuration changes stored in history.
get the `core-management` `service` `configuration-changes` `max-history` attribute.
operation: `/subsystem=core-management/service=configuration-changes:read-attribute(name=max-history)`" metadata = {parent=, title=syntax of the operation to get the `core-management` `service` `configuration-changes` `max-history`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `core-management` `process-state-listener`
operation: `/subsystem=core-management/process-state-listener=<process-state-listener name>:read-resource()`
To get the list of all the `core-management` `process-state-listener` use '*' for `<process-state-listener name>`." metadata = {parent=, title=syntax of the operation to get a `core-management` `process-state-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `core-management` `process-state-listener` `class`
class name of the listener.
get the `core-management` `process-state-listener` `class` attribute.
operation: `/subsystem=core-management/process-state-listener=<process-state-listener name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `core-management` `process-state-listener` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `core-management` `process-state-listener` `module`
module identifier of the listener.
get the `core-management` `process-state-listener` `module` attribute.
operation: `/subsystem=core-management/process-state-listener=<process-state-listener name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `core-management` `process-state-listener` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `core-management` `process-state-listener` `properties`
properties to initiate the process state listener.
get the `core-management` `process-state-listener` `properties` attribute.
operation: `/subsystem=core-management/process-state-listener=<process-state-listener name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `core-management` `process-state-listener` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `core-management` `process-state-listener` `timeout`
duration value before cancelling the execution of a listener.
get the `core-management` `process-state-listener` `timeout` attribute.
operation: `/subsystem=core-management/process-state-listener=<process-state-listener name>:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `core-management` `process-state-listener` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `bean-validation` `bean-validation` `enabled`
specify whether jakarta bean validation is enabled
get the `jca` `bean-validation` `bean-validation` `enabled` attribute.
operation: `/subsystem=jca/bean-validation=bean-validation:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `jca` `bean-validation` `bean-validation` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `debug`
`enable/disable` debug information logging
get the `jca` `cached-connection-manager` `cached-connection-manager` `debug` attribute.
operation: `/subsystem=jca/cached-connection-manager=cached-connection-manager:read-attribute(name=debug)`" metadata = {parent=, title=syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `debug`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `error`
`enable/disable` error information logging
get the `jca` `cached-connection-manager` `cached-connection-manager` `error` attribute.
operation: `/subsystem=jca/cached-connection-manager=cached-connection-manager:read-attribute(name=error)`" metadata = {parent=, title=syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `error`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `ignore-unknown-connections`
do not cache unknown connections
get the `jca` `cached-connection-manager` `cached-connection-manager` `ignore-unknown-connections` attribute.
operation: `/subsystem=jca/cached-connection-manager=cached-connection-manager:read-attribute(name=ignore-unknown-connections)`" metadata = {parent=, title=syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `ignore-unknown-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `install`
`enable/disable` the cached connection manager valve and interceptor
get the `jca` `cached-connection-manager` `cached-connection-manager` `install` attribute.
operation: `/subsystem=jca/cached-connection-manager=cached-connection-manager:read-attribute(name=install)`" metadata = {parent=, title=syntax of the operation to get the `jca` `cached-connection-manager` `cached-connection-manager` `install`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jca` `workmanager`
operation: `/subsystem=jca/workmanager=<workmanager name>:read-resource()`
To get the list of all the `jca` `workmanager` use '*' for `<workmanager name>`." metadata = {parent=, title=syntax of the operation to get a `jca` `workmanager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `elytron-enabled`
enables elytron security for this `workmanager`.
get the `jca` `workmanager` `elytron-enabled` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>:read-attribute(name=elytron-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `elytron-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `name`
the name of the `workmanager`
get the `jca` `workmanager` `name` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jca` `workmanager` `short-running-threads`
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-resource()`
To get the list of all the `jca` `workmanager` `short-running-threads` use '*' for `<short-running-threads name>`." metadata = {parent=, title=syntax of the operation to get a `jca` `workmanager` `short-running-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `allow-core-timeout`
whether core threads may time out.
get the `jca` `workmanager` `short-running-threads` `allow-core-timeout` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=allow-core-timeout)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `allow-core-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `core-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `jca` `workmanager` `short-running-threads` `core-threads` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=core-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `current-thread-count`
the current number of threads in the pool.
get the `jca` `workmanager` `short-running-threads` `current-thread-count` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `keepalive-time`
used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `jca` `workmanager` `short-running-threads` `keepalive-time` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool.
get the `jca` `workmanager` `short-running-threads` `largest-thread-count` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `max-threads`
the maximum thread pool size.
get the `jca` `workmanager` `short-running-threads` `max-threads` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `name`
the name of the thread pool.
get the `jca` `workmanager` `short-running-threads` `name` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `queue-length`
the queue length.
get the `jca` `workmanager` `short-running-threads` `queue-length` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `queue-size`
the queue size.
get the `jca` `workmanager` `short-running-threads` `queue-size` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `rejected-count`
the number of tasks that have been passed to the `handoff-executor` (if one is specified) or discarded.
get the `jca` `workmanager` `short-running-threads` `rejected-count` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=rejected-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `rejected-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `short-running-threads` `thread-factory`
specifies the name of a specific thread factory to use to create worker threads. if not defined an appropriate default thread factory will be used.
get the `jca` `workmanager` `short-running-threads` `thread-factory` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `short-running-threads` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jca` `workmanager` `long-running-threads`
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-resource()`
To get the list of all the `jca` `workmanager` `long-running-threads` use '*' for `<long-running-threads name>`." metadata = {parent=, title=syntax of the operation to get a `jca` `workmanager` `long-running-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `allow-core-timeout`
whether core threads may time out.
get the `jca` `workmanager` `long-running-threads` `allow-core-timeout` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=allow-core-timeout)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `allow-core-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `core-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `jca` `workmanager` `long-running-threads` `core-threads` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=core-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `current-thread-count`
the current number of threads in the pool.
get the `jca` `workmanager` `long-running-threads` `current-thread-count` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `keepalive-time`
used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `jca` `workmanager` `long-running-threads` `keepalive-time` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool.
get the `jca` `workmanager` `long-running-threads` `largest-thread-count` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `max-threads`
the maximum thread pool size.
get the `jca` `workmanager` `long-running-threads` `max-threads` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `name`
the name of the thread pool.
get the `jca` `workmanager` `long-running-threads` `name` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `queue-length`
the queue length.
get the `jca` `workmanager` `long-running-threads` `queue-length` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `queue-size`
the queue size.
get the `jca` `workmanager` `long-running-threads` `queue-size` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `rejected-count`
the number of tasks that have been passed to the `handoff-executor` (if one is specified) or discarded.
get the `jca` `workmanager` `long-running-threads` `rejected-count` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=rejected-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `rejected-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `workmanager` `long-running-threads` `thread-factory`
specifies the name of a specific thread factory to use to create worker threads. if not defined an appropriate default thread factory will be used.
get the `jca` `workmanager` `long-running-threads` `thread-factory` attribute.
operation: `/subsystem=jca/workmanager=<workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `jca` `workmanager` `long-running-threads` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `archive-validation` `archive-validation` `enabled`
specify whether archive validation is enabled
get the `jca` `archive-validation` `archive-validation` `enabled` attribute.
operation: `/subsystem=jca/archive-validation=archive-validation:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `jca` `archive-validation` `archive-validation` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `archive-validation` `archive-validation` `fail-on-error`
should an archive validation error report fail the deployment
get the `jca` `archive-validation` `archive-validation` `fail-on-error` attribute.
operation: `/subsystem=jca/archive-validation=archive-validation:read-attribute(name=fail-on-error)`" metadata = {parent=, title=syntax of the operation to get the `jca` `archive-validation` `archive-validation` `fail-on-error`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `archive-validation` `archive-validation` `fail-on-warn`
should an archive validation warning report fail the deployment
get the `jca` `archive-validation` `archive-validation` `fail-on-warn` attribute.
operation: `/subsystem=jca/archive-validation=archive-validation:read-attribute(name=fail-on-warn)`" metadata = {parent=, title=syntax of the operation to get the `jca` `archive-validation` `archive-validation` `fail-on-warn`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jca` `bootstrap-context`
operation: `/subsystem=jca/bootstrap-context=<bootstrap-context name>:read-resource()`
To get the list of all the `jca` `bootstrap-context` use '*' for `<bootstrap-context name>`." metadata = {parent=, title=syntax of the operation to get a `jca` `bootstrap-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `bootstrap-context` `name`
the name of the `bootstrapcontext`
get the `jca` `bootstrap-context` `name` attribute.
operation: `/subsystem=jca/bootstrap-context=<bootstrap-context name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `jca` `bootstrap-context` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `bootstrap-context` `workmanager`
the `workmanager` instance for the `bootstrapcontext`
get the `jca` `bootstrap-context` `workmanager` attribute.
operation: `/subsystem=jca/bootstrap-context=<bootstrap-context name>:read-attribute(name=workmanager)`" metadata = {parent=, title=syntax of the operation to get the `jca` `bootstrap-context` `workmanager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `tracer` `tracer` `enabled`
specify whether tracer is enabled
get the `jca` `tracer` `tracer` `enabled` attribute.
operation: `/subsystem=jca/tracer=tracer:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `jca` `tracer` `tracer` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jca` `distributed-workmanager`
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>:read-resource()`
To get the list of all the `jca` `distributed-workmanager` use '*' for `<distributed-workmanager name>`." metadata = {parent=, title=syntax of the operation to get a `jca` `distributed-workmanager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `elytron-enabled`
enables elytron security for this `workmanager`.
get the `jca` `distributed-workmanager` `elytron-enabled` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>:read-attribute(name=elytron-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `elytron-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `name`
the name of the `distributedworkmanager`
get the `jca` `distributed-workmanager` `name` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `policy`
the policy decides when to redistribute a work instance
get the `jca` `distributed-workmanager` `policy` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>:read-attribute(name=policy)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `policy-options`
list of `policy's` options `key/value` pairs
get the `jca` `distributed-workmanager` `policy-options` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>:read-attribute(name=policy-options)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `policy-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `selector`
the selector decides to which nodes in the network to redistribute the work instance to
get the `jca` `distributed-workmanager` `selector` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>:read-attribute(name=selector)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `selector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `selector-options`
list of `selector's` options `key/value` pairs
get the `jca` `distributed-workmanager` `selector-options` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>:read-attribute(name=selector-options)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `selector-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jca` `distributed-workmanager` `short-running-threads`
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-resource()`
To get the list of all the `jca` `distributed-workmanager` `short-running-threads` use '*' for `<short-running-threads name>`." metadata = {parent=, title=syntax of the operation to get a `jca` `distributed-workmanager` `short-running-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `allow-core-timeout`
whether core threads may time out.
get the `jca` `distributed-workmanager` `short-running-threads` `allow-core-timeout` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=allow-core-timeout)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `allow-core-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `core-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `jca` `distributed-workmanager` `short-running-threads` `core-threads` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=core-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `current-thread-count`
the current number of threads in the pool.
get the `jca` `distributed-workmanager` `short-running-threads` `current-thread-count` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `keepalive-time`
used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `jca` `distributed-workmanager` `short-running-threads` `keepalive-time` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool.
get the `jca` `distributed-workmanager` `short-running-threads` `largest-thread-count` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `max-threads`
the maximum thread pool size.
get the `jca` `distributed-workmanager` `short-running-threads` `max-threads` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `name`
the name of the thread pool.
get the `jca` `distributed-workmanager` `short-running-threads` `name` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `queue-length`
the queue length.
get the `jca` `distributed-workmanager` `short-running-threads` `queue-length` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `queue-size`
the queue size.
get the `jca` `distributed-workmanager` `short-running-threads` `queue-size` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `rejected-count`
the number of tasks that have been passed to the `handoff-executor` (if one is specified) or discarded.
get the `jca` `distributed-workmanager` `short-running-threads` `rejected-count` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=rejected-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `rejected-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `thread-factory`
specifies the name of a specific thread factory to use to create worker threads. if not defined an appropriate default thread factory will be used.
get the `jca` `distributed-workmanager` `short-running-threads` `thread-factory` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/short-running-threads=<short-running-threads name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `short-running-threads` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jca` `distributed-workmanager` `long-running-threads`
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-resource()`
To get the list of all the `jca` `distributed-workmanager` `long-running-threads` use '*' for `<long-running-threads name>`." metadata = {parent=, title=syntax of the operation to get a `jca` `distributed-workmanager` `long-running-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `allow-core-timeout`
whether core threads may time out.
get the `jca` `distributed-workmanager` `long-running-threads` `allow-core-timeout` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=allow-core-timeout)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `allow-core-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `core-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `jca` `distributed-workmanager` `long-running-threads` `core-threads` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=core-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `current-thread-count`
the current number of threads in the pool.
get the `jca` `distributed-workmanager` `long-running-threads` `current-thread-count` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `keepalive-time`
used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `jca` `distributed-workmanager` `long-running-threads` `keepalive-time` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool.
get the `jca` `distributed-workmanager` `long-running-threads` `largest-thread-count` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `max-threads`
the maximum thread pool size.
get the `jca` `distributed-workmanager` `long-running-threads` `max-threads` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `name`
the name of the thread pool.
get the `jca` `distributed-workmanager` `long-running-threads` `name` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `queue-length`
the queue length.
get the `jca` `distributed-workmanager` `long-running-threads` `queue-length` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `queue-size`
the queue size.
get the `jca` `distributed-workmanager` `long-running-threads` `queue-size` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `rejected-count`
the number of tasks that have been passed to the `handoff-executor` (if one is specified) or discarded.
get the `jca` `distributed-workmanager` `long-running-threads` `rejected-count` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=rejected-count)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `rejected-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `thread-factory`
specifies the name of a specific thread factory to use to create worker threads. if not defined an appropriate default thread factory will be used.
get the `jca` `distributed-workmanager` `long-running-threads` `thread-factory` attribute.
operation: `/subsystem=jca/distributed-workmanager=<distributed-workmanager name>/long-running-threads=<long-running-threads name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `jca` `distributed-workmanager` `long-running-threads` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `request-controller` `active-requests`
the number of requests that are currently running on the server.
get the `request-controller` `active-requests` attribute.
operation: `/subsystem=request-controller:read-attribute(name=active-requests)`" metadata = {parent=, title=syntax of the operation to get the `request-controller` `active-requests`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `request-controller` `max-requests`
the maximum number of all types of requests that can be running on a server at a time. once this limit is hit, any new requests will be rejected.
get the `request-controller` `max-requests` attribute.
operation: `/subsystem=request-controller:read-attribute(name=max-requests)`" metadata = {parent=, title=syntax of the operation to get the `request-controller` `max-requests`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `request-controller` `track-individual-endpoints`
if this is true, requests are tracked at an endpoint level, which will allow individual deployments to be suspended.
get the `request-controller` `track-individual-endpoints` attribute.
operation: `/subsystem=request-controller:read-attribute(name=track-individual-endpoints)`" metadata = {parent=, title=syntax of the operation to get the `request-controller` `track-individual-endpoints`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `microprofile-config-smallrye` `config-source-provider`
operation: `/subsystem=microprofile-config-smallrye/config-source-provider=<config-source-provider name>:read-resource()`
To get the list of all the `microprofile-config-smallrye` `config-source-provider` use '*' for `<config-source-provider name>`." metadata = {parent=, title=syntax of the operation to get a `microprofile-config-smallrye` `config-source-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-config-smallrye` `config-source-provider` `class`
class of the `configsourceprovider` to load
get the `microprofile-config-smallrye` `config-source-provider` `class` attribute.
operation: `/subsystem=microprofile-config-smallrye/config-source-provider=<config-source-provider name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-config-smallrye` `config-source-provider` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `microprofile-config-smallrye` `config-source`
operation: `/subsystem=microprofile-config-smallrye/config-source=<config-source name>:read-resource()`
To get the list of all the `microprofile-config-smallrye` `config-source` use '*' for `<config-source name>`." metadata = {parent=, title=syntax of the operation to get a `microprofile-config-smallrye` `config-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-config-smallrye` `config-source` `class`
class of the `config` source to load
get the `microprofile-config-smallrye` `config-source` `class` attribute.
operation: `/subsystem=microprofile-config-smallrye/config-source=<config-source name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-config-smallrye` `config-source` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-config-smallrye` `config-source` `dir`
directory that is scanned to `config` properties for this `config` source (file names are key, file content are value)
get the `microprofile-config-smallrye` `config-source` `dir` attribute.
operation: `/subsystem=microprofile-config-smallrye/config-source=<config-source name>:read-attribute(name=dir)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-config-smallrye` `config-source` `dir`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-config-smallrye` `config-source` `ordinal`
ordinal value for the `config` source
get the `microprofile-config-smallrye` `config-source` `ordinal` attribute.
operation: `/subsystem=microprofile-config-smallrye/config-source=<config-source name>:read-attribute(name=ordinal)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-config-smallrye` `config-source` `ordinal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-config-smallrye` `config-source` `properties`
properties configured for this `config` source and stored directly in `wildfly` management model.
get the `microprofile-config-smallrye` `config-source` `properties` attribute.
operation: `/subsystem=microprofile-config-smallrye/config-source=<config-source name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-config-smallrye` `config-source` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `default-security-domain`
the default security domain used by web deployments
get the `undertow` `default-security-domain` attribute.
operation: `/subsystem=undertow:read-attribute(name=default-security-domain)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `default-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `default-server`
the default server to use for deployments
get the `undertow` `default-server` attribute.
operation: `/subsystem=undertow:read-attribute(name=default-server)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `default-server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `default-servlet-container`
the default `servlet` container to use for deployments
get the `undertow` `default-servlet-container` attribute.
operation: `/subsystem=undertow:read-attribute(name=default-servlet-container)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `default-servlet-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `default-virtual-host`
the default virtual host to use for deployments
get the `undertow` `default-virtual-host` attribute.
operation: `/subsystem=undertow:read-attribute(name=default-virtual-host)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `default-virtual-host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `instance-id`
the cluster instance id (defaults to {$`jboss.node.name`} if undefined)
get the `undertow` `instance-id` attribute.
operation: `/subsystem=undertow:read-attribute(name=instance-id)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `instance-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `obfuscate-session-route`
obfuscate the `instance-id` when routing, thus preventing that data from being sent across connections when serving `http` requests with the `http` invoker
get the `undertow` `obfuscate-session-route` attribute.
operation: `/subsystem=undertow:read-attribute(name=obfuscate-session-route)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `obfuscate-session-route`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `statistics-enabled`
configures if statistics are enabled. changes take effect on the connector level statistics immediately, deployment level statistics will only be affected after the deployment is redeployed (or the container is reloaded).
get the `undertow` `statistics-enabled` attribute.
operation: `/subsystem=undertow:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `byte-buffer-pool`
operation: `/subsystem=undertow/byte-buffer-pool=<byte-buffer-pool name>:read-resource()`
To get the list of all the `undertow` `byte-buffer-pool` use '*' for `<byte-buffer-pool name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `byte-buffer-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `byte-buffer-pool` `buffer-size`
the size of the buffer
get the `undertow` `byte-buffer-pool` `buffer-size` attribute.
operation: `/subsystem=undertow/byte-buffer-pool=<byte-buffer-pool name>:read-attribute(name=buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `byte-buffer-pool` `buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `byte-buffer-pool` `direct`
if this is true the buffer pool will use direct buffers, this is recommended for best performance
get the `undertow` `byte-buffer-pool` `direct` attribute.
operation: `/subsystem=undertow/byte-buffer-pool=<byte-buffer-pool name>:read-attribute(name=direct)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `byte-buffer-pool` `direct`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `byte-buffer-pool` `leak-detection-percent`
the percentage of buffers that will be allocated with a leak detector. this should only be larger than zero if you are experiencing issues with buffers leaking.
get the `undertow` `byte-buffer-pool` `leak-detection-percent` attribute.
operation: `/subsystem=undertow/byte-buffer-pool=<byte-buffer-pool name>:read-attribute(name=leak-detection-percent)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `byte-buffer-pool` `leak-detection-percent`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `byte-buffer-pool` `max-pool-size`
the maximum amount of buffers to keep in the pool. if more buffers are required at runtime they will be allocated dynamically. setting this to zero effectively disables pooling.
get the `undertow` `byte-buffer-pool` `max-pool-size` attribute.
operation: `/subsystem=undertow/byte-buffer-pool=<byte-buffer-pool name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `byte-buffer-pool` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `byte-buffer-pool` `thread-local-cache-size`
the maximum number of buffers to cache on each thread. the actual number may be lower depending on the calculated usage pattern.
get the `undertow` `byte-buffer-pool` `thread-local-cache-size` attribute.
operation: `/subsystem=undertow/byte-buffer-pool=<byte-buffer-pool name>:read-attribute(name=thread-local-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `byte-buffer-pool` `thread-local-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `servlet-container`
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-resource()`
To get the list of all the `undertow` `servlet-container` use '*' for `<servlet-container name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `servlet-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `allow-non-standard-wrappers`
if true then request and response wrappers that do not extend the standard wrapper classes can be used
get the `undertow` `servlet-container` `allow-non-standard-wrappers` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=allow-non-standard-wrappers)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `allow-non-standard-wrappers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `allow-orphan-session`
indicates whether session creation should be permitted after a `response-closing` operation, `e.g`. `httpservletresponse.sendredirect`(...). enabling this behavior is generally discouraged, as the created session will be `unreferenceable`.
get the `undertow` `servlet-container` `allow-orphan-session` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=allow-orphan-session)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `allow-orphan-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `default-buffer-cache`
the buffer cache to use for caching static resources
get the `undertow` `servlet-container` `default-buffer-cache` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=default-buffer-cache)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `default-buffer-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `default-cookie-version`
the default cookie version `servlet` applications will send
get the `undertow` `servlet-container` `default-cookie-version` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=default-cookie-version)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `default-cookie-version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `default-encoding`
default encoding to use for all deployed applications
get the `undertow` `servlet-container` `default-encoding` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=default-encoding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `default-encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `default-session-timeout`
the default session timeout (in minutes) for all applications deployed in the container.
get the `undertow` `servlet-container` `default-session-timeout` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=default-session-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `default-session-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `directory-listing`
if directory listing should be enabled for default `servlets`.
get the `undertow` `servlet-container` `directory-listing` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=directory-listing)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `directory-listing`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `disable-caching-for-secured-pages`
if undertow should set headers to disable caching for secured paged. disabling this can cause security problems, as sensitive pages may be cached by an intermediary.
get the `undertow` `servlet-container` `disable-caching-for-secured-pages` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=disable-caching-for-secured-pages)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `disable-caching-for-secured-pages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `disable-file-watch-service`
if this is true then the file watch service will not be used to monitor exploded deployments for changes
get the `undertow` `servlet-container` `disable-file-watch-service` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=disable-file-watch-service)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `disable-file-watch-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `disable-session-id-reuse`
if this is true then an unknown session id will never be reused, and a new session id will be generated. if this is false then it will be `re-used` if and only if it is present in the session manager of another deployment, to allow the same session id to be shared between applications on the same server.
get the `undertow` `servlet-container` `disable-session-id-reuse` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=disable-session-id-reuse)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `disable-session-id-reuse`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `eager-filter-initialization`
if true undertow calls filter init() on deployment start rather than when first requested.
get the `undertow` `servlet-container` `eager-filter-initialization` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=eager-filter-initialization)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `eager-filter-initialization`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `file-cache-max-file-size`
the maximum size of a file that will be cached in the file cache
get the `undertow` `servlet-container` `file-cache-max-file-size` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=file-cache-max-file-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `file-cache-max-file-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `file-cache-metadata-size`
the maximum number of files that will have their `metadata` cached
get the `undertow` `servlet-container` `file-cache-metadata-size` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=file-cache-metadata-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `file-cache-metadata-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `file-cache-time-to-live`
the length of time in ms an item will stay cached. by default this is `2000` for exploded deployments, and -`1` (infinite) for archive deployments
get the `undertow` `servlet-container` `file-cache-time-to-live` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=file-cache-time-to-live)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `file-cache-time-to-live`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `ignore-flush`
ignore flushes on the `servlet` output stream. in most cases these just hurt performance for no good reason.
get the `undertow` `servlet-container` `ignore-flush` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=ignore-flush)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `ignore-flush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `max-sessions`
the maximum number of sessions that can be active at one time
get the `undertow` `servlet-container` `max-sessions` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=max-sessions)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `max-sessions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `preserve-path-on-forward`
if this is true undertow will reset request path, `url` and uri information to original values after forward.
get the `undertow` `servlet-container` `preserve-path-on-forward` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=preserve-path-on-forward)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `preserve-path-on-forward`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `proactive-authentication`
if proactive authentication should be used. if this is true a user will always be authenticated if credentials are present.
get the `undertow` `servlet-container` `proactive-authentication` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=proactive-authentication)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `proactive-authentication`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `session-id-length`
the length of the generated session id. longer session `id's` are more secure. this number refers to the number of bytes of randomness that are used to generate the session id, the actual id that is sent to the client will be `base64` encoded so will be approximately `33`% larger (`e.g`. a session id length of `30` will result in a cookie value of length `40`).
get the `undertow` `servlet-container` `session-id-length` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=session-id-length)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `session-id-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `stack-trace-on-error`
if an error page with the stack trace should be generated on error. values are all, none and `local-only`
get the `undertow` `servlet-container` `stack-trace-on-error` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=stack-trace-on-error)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `stack-trace-on-error`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `use-listener-encoding`
use encoding defined on listener
get the `undertow` `servlet-container` `use-listener-encoding` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>:read-attribute(name=use-listener-encoding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `use-listener-encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `servlet-container` `welcome-file`
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/welcome-file=<welcome-file name>:read-resource()`
To get the list of all the `undertow` `servlet-container` `welcome-file` use '*' for `<welcome-file name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `servlet-container` `welcome-file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `crawler-session-management` `session-timeout`
the session timeout for sessions that are owned by crawlers
get the `undertow` `servlet-container` `setting` `crawler-session-management` `session-timeout` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=crawler-session-management:read-attribute(name=session-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `crawler-session-management` `session-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `crawler-session-management` `user-agents`
regular expression that is used to match the user agent of a crawler
get the `undertow` `servlet-container` `setting` `crawler-session-management` `user-agents` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=crawler-session-management:read-attribute(name=user-agents)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `crawler-session-management` `user-agents`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `domain`
affinity cookie domain
get the `undertow` `servlet-container` `setting` `affinity-cookie` `domain` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=affinity-cookie:read-attribute(name=domain)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `http-only`
is affinity cookie `http-only`
get the `undertow` `servlet-container` `setting` `affinity-cookie` `http-only` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=affinity-cookie:read-attribute(name=http-only)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `http-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `max-age`
max age of affinity cookie
get the `undertow` `servlet-container` `setting` `affinity-cookie` `max-age` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=affinity-cookie:read-attribute(name=max-age)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `max-age`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `name`
name of the affinity cookie
get the `undertow` `servlet-container` `setting` `affinity-cookie` `name` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=affinity-cookie:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `secure`
is affinity cookie secure?
get the `undertow` `servlet-container` `setting` `affinity-cookie` `secure` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=affinity-cookie:read-attribute(name=secure)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `affinity-cookie` `secure`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `check-interval`
check interval for jakarta server pages updates using a background thread. this has no effect for most deployments where jakarta server pages change notifications are handled using the file system notification `api`. this only takes effect if the file watch service is disabled.
get the `undertow` `servlet-container` `setting` `jsp` `check-interval` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=check-interval)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `check-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `development`
enable development mode which enables reloading jakarta server pages `on-the-fly`
get the `undertow` `servlet-container` `setting` `jsp` `development` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=development)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `development`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `disabled`
disable the jakarta server pages container.
get the `undertow` `servlet-container` `setting` `jsp` `disabled` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=disabled)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `disabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `display-source-fragment`
when a runtime error occurs, attempts to display corresponding jakarta server pages source fragment
get the `undertow` `servlet-container` `setting` `jsp` `display-source-fragment` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=display-source-fragment)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `display-source-fragment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `dump-smap`
write `smap` data to a file.
get the `undertow` `servlet-container` `setting` `jsp` `dump-smap` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=dump-smap)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `dump-smap`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `error-on-use-bean-invalid-class-attribute`
enable errors when using a bad class in `usebean`.
get the `undertow` `servlet-container` `setting` `jsp` `error-on-use-bean-invalid-class-attribute` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=error-on-use-bean-invalid-class-attribute)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `error-on-use-bean-invalid-class-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `generate-strings-as-char-arrays`
generate string constants as char arrays.
get the `undertow` `servlet-container` `setting` `jsp` `generate-strings-as-char-arrays` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=generate-strings-as-char-arrays)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `generate-strings-as-char-arrays`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `java-encoding`
specify the encoding used for java sources.
get the `undertow` `servlet-container` `setting` `jsp` `java-encoding` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=java-encoding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `java-encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `keep-generated`
keep the generated `servlets`.
get the `undertow` `servlet-container` `setting` `jsp` `keep-generated` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=keep-generated)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `keep-generated`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `mapped-file`
map to the jakarta server pages source.
get the `undertow` `servlet-container` `setting` `jsp` `mapped-file` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=mapped-file)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `mapped-file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `modification-test-interval`
minimum amount of time between two tests for updates, in seconds.
get the `undertow` `servlet-container` `setting` `jsp` `modification-test-interval` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=modification-test-interval)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `modification-test-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `optimize-scriptlets`
if jakarta server pages `scriptlets` should be optimised to remove string concatenation
get the `undertow` `servlet-container` `setting` `jsp` `optimize-scriptlets` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=optimize-scriptlets)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `optimize-scriptlets`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `recompile-on-fail`
retry failed jakarta server pages compilations on each request.
get the `undertow` `servlet-container` `setting` `jsp` `recompile-on-fail` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=recompile-on-fail)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `recompile-on-fail`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `scratch-dir`
specify a different work directory.
get the `undertow` `servlet-container` `setting` `jsp` `scratch-dir` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=scratch-dir)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `scratch-dir`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `smap`
enable `smap`.
get the `undertow` `servlet-container` `setting` `jsp` `smap` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=smap)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `smap`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `source-vm`
source `vm` level for compilation.
get the `undertow` `servlet-container` `setting` `jsp` `source-vm` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=source-vm)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `source-vm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `tag-pooling`
enable tag pooling.
get the `undertow` `servlet-container` `setting` `jsp` `tag-pooling` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=tag-pooling)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `tag-pooling`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `target-vm`
target `vm` level for compilation.
get the `undertow` `servlet-container` `setting` `jsp` `target-vm` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=target-vm)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `target-vm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `trim-spaces`
trim some spaces from the generated `servlet`.
get the `undertow` `servlet-container` `setting` `jsp` `trim-spaces` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=trim-spaces)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `trim-spaces`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `x-powered-by`
enable advertising the jakarta server pages engine in `x-powered-by`.
get the `undertow` `servlet-container` `setting` `jsp` `x-powered-by` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=jsp:read-attribute(name=x-powered-by)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `jsp` `x-powered-by`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `persistent-sessions` `path`
the path to the persistent session data directory. if this is null sessions will be stored in memory
get the `undertow` `servlet-container` `setting` `persistent-sessions` `path` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=persistent-sessions:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `persistent-sessions` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `persistent-sessions` `relative-to`
the directory the path is relative to
get the `undertow` `servlet-container` `setting` `persistent-sessions` `relative-to` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=persistent-sessions:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `persistent-sessions` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `comment`
cookie comment
get the `undertow` `servlet-container` `setting` `session-cookie` `comment` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=session-cookie:read-attribute(name=comment)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `comment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `domain`
cookie domain
get the `undertow` `servlet-container` `setting` `session-cookie` `domain` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=session-cookie:read-attribute(name=domain)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `http-only`
is cookie `http-only`
get the `undertow` `servlet-container` `setting` `session-cookie` `http-only` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=session-cookie:read-attribute(name=http-only)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `http-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `max-age`
max age of cookie
get the `undertow` `servlet-container` `setting` `session-cookie` `max-age` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=session-cookie:read-attribute(name=max-age)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `max-age`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `name`
name of the cookie
get the `undertow` `servlet-container` `setting` `session-cookie` `name` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=session-cookie:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `secure`
is cookie secure?
get the `undertow` `servlet-container` `setting` `session-cookie` `secure` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=session-cookie:read-attribute(name=secure)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `session-cookie` `secure`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `buffer-pool`
the buffer pool to use for `websocket` deployments
get the `undertow` `servlet-container` `setting` `websockets` `buffer-pool` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=websockets:read-attribute(name=buffer-pool)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `buffer-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `deflater-level`
configures the level of compression of the deflate algorithm
get the `undertow` `servlet-container` `setting` `websockets` `deflater-level` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=websockets:read-attribute(name=deflater-level)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `deflater-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `dispatch-to-worker`
if callbacks should be dispatched to a worker thread. if this is false then they will be run in the io thread, which is faster however care must be taken not to perform blocking operations.
get the `undertow` `servlet-container` `setting` `websockets` `dispatch-to-worker` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=websockets:read-attribute(name=dispatch-to-worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `dispatch-to-worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `per-message-deflate`
enables `websocket's` `per-message` compression extension, `rfc-7692`
get the `undertow` `servlet-container` `setting` `websockets` `per-message-deflate` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=websockets:read-attribute(name=per-message-deflate)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `per-message-deflate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `worker`
the worker to use for `websocket` deployments
get the `undertow` `servlet-container` `setting` `websockets` `worker` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/setting=websockets:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `setting` `websockets` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `servlet-container` `mime-mapping`
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/mime-mapping=<mime-mapping name>:read-resource()`
To get the list of all the `undertow` `servlet-container` `mime-mapping` use '*' for `<mime-mapping name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `servlet-container` `mime-mapping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `servlet-container` `mime-mapping` `value`
the mime type for this mapping
get the `undertow` `servlet-container` `mime-mapping` `value` attribute.
operation: `/subsystem=undertow/servlet-container=<servlet-container name>/mime-mapping=<mime-mapping name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `servlet-container` `mime-mapping` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `error-page`
operation: `/subsystem=undertow/configuration=filter/error-page=<error-page name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `error-page` use '*' for `<error-page name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `error-page`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `error-page` `code`
error page code
get the `undertow` `configuration` `filter` `error-page` `code` attribute.
operation: `/subsystem=undertow/configuration=filter/error-page=<error-page name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `error-page` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `error-page` `path`
error page path
get the `undertow` `configuration` `filter` `error-page` `path` attribute.
operation: `/subsystem=undertow/configuration=filter/error-page=<error-page name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `error-page` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `expression-filter`
operation: `/subsystem=undertow/configuration=filter/expression-filter=<expression-filter name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `expression-filter` use '*' for `<expression-filter name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `expression-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `expression-filter` `expression`
the expression that defines the filter
get the `undertow` `configuration` `filter` `expression-filter` `expression` attribute.
operation: `/subsystem=undertow/configuration=filter/expression-filter=<expression-filter name>:read-attribute(name=expression)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `expression-filter` `expression`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `expression-filter` `module`
module to use to load the filter definitions
get the `undertow` `configuration` `filter` `expression-filter` `module` attribute.
operation: `/subsystem=undertow/configuration=filter/expression-filter=<expression-filter name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `expression-filter` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `gzip`
operation: `/subsystem=undertow/configuration=filter/gzip=<gzip name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `gzip` use '*' for `<gzip name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `gzip`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster`
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `mod-cluster` use '*' for `<mod-cluster name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-frequency`
the frequency (in milliseconds) that `mod-cluster` advertises itself on the network
get the `undertow` `configuration` `filter` `mod-cluster` `advertise-frequency` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=advertise-frequency)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-frequency`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-path`
the path that `mod-cluster` is registered under.
get the `undertow` `configuration` `filter` `mod-cluster` `advertise-path` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=advertise-path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-protocol`
the protocol that is in use.
get the `undertow` `configuration` `filter` `mod-cluster` `advertise-protocol` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=advertise-protocol)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-socket-binding`
the multicast group and port that is used to advertise.
get the `undertow` `configuration` `filter` `mod-cluster` `advertise-socket-binding` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=advertise-socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `advertise-socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `broken-node-timeout`
the amount of time that must elapse before a broken node is removed from the table
get the `undertow` `configuration` `filter` `mod-cluster` `broken-node-timeout` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=broken-node-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `broken-node-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `cached-connections-per-thread`
the number of connections that will be kept alive indefinitely
get the `undertow` `configuration` `filter` `mod-cluster` `cached-connections-per-thread` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=cached-connections-per-thread)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `cached-connections-per-thread`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `connection-idle-timeout`
the amount of time a connection can be idle before it will be closed. connections will not time out once the pool size is down to the configured minimum (as configured by `cached-connections-per-thread`)
get the `undertow` `configuration` `filter` `mod-cluster` `connection-idle-timeout` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=connection-idle-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `connection-idle-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `connections-per-thread`
the number of connections that will be maintained to `backend` servers, per io thread.
get the `undertow` `configuration` `filter` `mod-cluster` `connections-per-thread` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=connections-per-thread)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `connections-per-thread`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `enable-http2`
if the load balancer should attempt to upgrade back end connections to `http2`. if `http2` is not supported `http` or `https` will be used as normal
get the `undertow` `configuration` `filter` `mod-cluster` `enable-http2` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=enable-http2)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `enable-http2`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `failover-strategy`
determines how a `failover` node is chosen, in the event that the node to which a session has affinity is not available.
get the `undertow` `configuration` `filter` `mod-cluster` `failover-strategy` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=failover-strategy)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `failover-strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `health-check-interval`
the frequency of health check pings to `backend` nodes
get the `undertow` `configuration` `filter` `mod-cluster` `health-check-interval` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=health-check-interval)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `health-check-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-enable-push`
if push should be enabled for `http/2` connections
get the `undertow` `configuration` `filter` `mod-cluster` `http2-enable-push` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=http2-enable-push)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-enable-push`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-header-table-size`
the size of the header table used for `hpack` compression, in bytes. this amount of memory will be allocated per connection for compression. larger values use more memory but may give better compression.
get the `undertow` `configuration` `filter` `mod-cluster` `http2-header-table-size` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=http2-header-table-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-header-table-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-initial-window-size`
the flow control window size that controls how quickly the client can send data to the server
get the `undertow` `configuration` `filter` `mod-cluster` `http2-initial-window-size` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=http2-initial-window-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-initial-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-concurrent-streams`
the maximum number of `http/2` streams that can be active at any time on a single connection
get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-concurrent-streams` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=http2-max-concurrent-streams)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-concurrent-streams`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-frame-size`
the max `http/2` frame size
get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-frame-size` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=http2-max-frame-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-frame-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-header-list-size`
the maximum size of request headers the server is prepared to accept
get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-header-list-size` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=http2-max-header-list-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `http2-max-header-list-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `management-access-predicate`
a predicate that is applied to incoming requests to determine if they can perform mod cluster management commands. provides additional security on top of what is provided by limiting management to requests that originate from the `management-socket-binding`
get the `undertow` `configuration` `filter` `mod-cluster` `management-access-predicate` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=management-access-predicate)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `management-access-predicate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `management-socket-binding`
the socket binding of the `mod_cluster` management address and port. when using `mod_cluster` two `http` listeners should be defined, a public one to handle requests, and one bound to the internal network to handle mod cluster commands. this socket binding should correspond to the internal listener, and should not be publicly accessible.
get the `undertow` `configuration` `filter` `mod-cluster` `management-socket-binding` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=management-socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `management-socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `max-ajp-packet-size`
the maximum size for `ajp` packets. increasing this will allow `ajp` to work for `requests/responses` that have a large amount of headers. this is an advanced option, and must be the same between load balancers and `backend` servers.
get the `undertow` `configuration` `filter` `mod-cluster` `max-ajp-packet-size` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=max-ajp-packet-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `max-ajp-packet-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `max-request-time`
the max amount of time that a request to a `backend` node can take before it is killed
get the `undertow` `configuration` `filter` `mod-cluster` `max-request-time` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=max-request-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `max-request-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `max-retries`
the number of times to attempt to retry a request if it fails. note that if a request is not considered idempotent then it will only be retried if the proxy can be sure it was not sent to the `backend` server).
get the `undertow` `configuration` `filter` `mod-cluster` `max-retries` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=max-retries)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `max-retries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `request-queue-size`
the number of requests that can be queued if the connection pool is full before requests are rejected with a `503`
get the `undertow` `configuration` `filter` `mod-cluster` `request-queue-size` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=request-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `request-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `security-key`
the security key that is used for the `mod-cluster` group. all members must use the same security key.
get the `undertow` `configuration` `filter` `mod-cluster` `security-key` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=security-key)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `security-key`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `security-realm`
the security realm that provides the `ssl` configuration
get the `undertow` `configuration` `filter` `mod-cluster` `security-realm` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=security-realm)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `security-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `ssl-context`
reference to the `sslcontext` to be used by this filter.
get the `undertow` `configuration` `filter` `mod-cluster` `ssl-context` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `use-alias`
if an alias check is performed
get the `undertow` `configuration` `filter` `mod-cluster` `use-alias` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=use-alias)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `use-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `worker`
the `xnio` worker that is used to send the advertise notifications
get the `undertow` `configuration` `filter` `mod-cluster` `worker` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `affinity` `ranked` `delimiter`
the delimiter used to separate ranked routes within the session id.
get the `undertow` `configuration` `filter` `mod-cluster` `affinity` `ranked` `delimiter` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/affinity=ranked:read-attribute(name=delimiter)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `affinity` `ranked` `delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer`
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `mod-cluster` `balancer` use '*' for `<balancer name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `max-attempts`
maximum number of `failover` attempts by reverse proxy when sending the request to the `backend` server.
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `max-attempts` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-attribute(name=max-attempts)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `max-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session`
if sticky sessions are enabled
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-attribute(name=sticky-session)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-cookie`
the session cookie name
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-cookie` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-attribute(name=sticky-session-cookie)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-cookie`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-force`
if this is true then an error will be returned if the request cannot be routed to the sticky node, otherwise it will be routed to another node
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-force` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-attribute(name=sticky-session-force)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-force`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-path`
the path of the sticky session cookie
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-path` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-attribute(name=sticky-session-path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-remove`
remove the session cookie if the request cannot be routed to the correct host
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-remove` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-attribute(name=sticky-session-remove)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `sticky-session-remove`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `wait-worker`
the number of seconds to wait for an available worker
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `wait-worker` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>:read-attribute(name=wait-worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `wait-worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer` `node`
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` use '*' for `<node name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer` `node`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `aliases`
the nodes aliases
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `aliases` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=aliases)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `aliases`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `cache-connections`
the number of connections to keep alive indefinitely
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `cache-connections` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=cache-connections)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `cache-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `elected`
the elected count
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `elected` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=elected)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `elected`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `flush-packets`
if received data should be immediately flushed
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `flush-packets` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=flush-packets)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `flush-packets`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `load`
the current load of this node
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `load` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=load)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `load`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `load-balancing-group`
the load balancing group this node belongs to
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `load-balancing-group` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=load-balancing-group)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `load-balancing-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `max-connections`
the maximum number of connections per io thread
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `max-connections` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=max-connections)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `max-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `open-connections`
the current number of open connections
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `open-connections` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=open-connections)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `open-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `ping`
the nodes ping
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `ping` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=ping)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `ping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `queue-new-requests`
if a request is received and there is no worker immediately available should it be queued
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `queue-new-requests` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=queue-new-requests)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `queue-new-requests`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `read`
the number of bytes read from the node
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `read` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=read)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `read`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `request-queue-size`
the size of the request queue
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `request-queue-size` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=request-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `request-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `status`
the current status of this node
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `status` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=status)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `timeout`
the request timeout
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `timeout` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `ttl`
the time connections will stay alive with no requests before being closed, if the number of connections is larger than `cache-connections`
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `ttl` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=ttl)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `uri`
the uri that the load balancer uses to connect to the node
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `uri` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=uri)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `uri`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `written`
the number of bytes transferred to the node
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `written` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>:read-attribute(name=written)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `written`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context`
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>/context=<context name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context` use '*' for `<context name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context` `requests`
the number of requests against this context
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context` `requests` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>/context=<context name>:read-attribute(name=requests)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context` `requests`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context` `status`
the status of this context
get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context` `status` attribute.
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/node=<node name>/context=<context name>:read-attribute(name=status)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `mod-cluster` `balancer` `node` `context` `status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer` `load-balancing-group`
operation: `/subsystem=undertow/configuration=filter/mod-cluster=<mod-cluster name>/balancer=<balancer name>/load-balancing-group=<load-balancing-group name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `mod-cluster` `balancer` `load-balancing-group` use '*' for `<load-balancing-group name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `mod-cluster` `balancer` `load-balancing-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `rewrite`
operation: `/subsystem=undertow/configuration=filter/rewrite=<rewrite name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `rewrite` use '*' for `<rewrite name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `rewrite`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `rewrite` `redirect`
if this is true then a redirect will be done instead of a rewrite
get the `undertow` `configuration` `filter` `rewrite` `redirect` attribute.
operation: `/subsystem=undertow/configuration=filter/rewrite=<rewrite name>:read-attribute(name=redirect)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `rewrite` `redirect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `rewrite` `target`
the expression that defines the target. if you are redirecting to a constant target put single quotes around the value
get the `undertow` `configuration` `filter` `rewrite` `target` attribute.
operation: `/subsystem=undertow/configuration=filter/rewrite=<rewrite name>:read-attribute(name=target)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `rewrite` `target`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `response-header`
operation: `/subsystem=undertow/configuration=filter/response-header=<response-header name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `response-header` use '*' for `<response-header name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `response-header`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `response-header` `header-name`
header name
get the `undertow` `configuration` `filter` `response-header` `header-name` attribute.
operation: `/subsystem=undertow/configuration=filter/response-header=<response-header name>:read-attribute(name=header-name)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `response-header` `header-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `response-header` `header-value`
value for header
get the `undertow` `configuration` `filter` `response-header` `header-value` attribute.
operation: `/subsystem=undertow/configuration=filter/response-header=<response-header name>:read-attribute(name=header-value)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `response-header` `header-value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `request-limit`
operation: `/subsystem=undertow/configuration=filter/request-limit=<request-limit name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `request-limit` use '*' for `<request-limit name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `request-limit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `request-limit` `max-concurrent-requests`
maximum number of concurrent requests
get the `undertow` `configuration` `filter` `request-limit` `max-concurrent-requests` attribute.
operation: `/subsystem=undertow/configuration=filter/request-limit=<request-limit name>:read-attribute(name=max-concurrent-requests)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `request-limit` `max-concurrent-requests`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `request-limit` `queue-size`
number of requests to queue before they start being rejected
get the `undertow` `configuration` `filter` `request-limit` `queue-size` attribute.
operation: `/subsystem=undertow/configuration=filter/request-limit=<request-limit name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `request-limit` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `filter` `custom-filter`
operation: `/subsystem=undertow/configuration=filter/custom-filter=<custom-filter name>:read-resource()`
To get the list of all the `undertow` `configuration` `filter` `custom-filter` use '*' for `<custom-filter name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `filter` `custom-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `custom-filter` `class-name`
class name of `httphandler`
get the `undertow` `configuration` `filter` `custom-filter` `class-name` attribute.
operation: `/subsystem=undertow/configuration=filter/custom-filter=<custom-filter name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `custom-filter` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `custom-filter` `module`
module name where class can be loaded from
get the `undertow` `configuration` `filter` `custom-filter` `module` attribute.
operation: `/subsystem=undertow/configuration=filter/custom-filter=<custom-filter name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `custom-filter` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `filter` `custom-filter` `parameters`
filter parameters
get the `undertow` `configuration` `filter` `custom-filter` `parameters` attribute.
operation: `/subsystem=undertow/configuration=filter/custom-filter=<custom-filter name>:read-attribute(name=parameters)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `filter` `custom-filter` `parameters`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `handler` `file`
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-resource()`
To get the list of all the `undertow` `configuration` `handler` `file` use '*' for `<file name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `file` `cache-buffer-size`
size of the buffers, in bytes.
get the `undertow` `configuration` `handler` `file` `cache-buffer-size` attribute.
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-attribute(name=cache-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `file` `cache-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `file` `cache-buffers`
number of buffers
get the `undertow` `configuration` `handler` `file` `cache-buffers` attribute.
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-attribute(name=cache-buffers)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `file` `cache-buffers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `file` `case-sensitive`
use case sensitive file handling
get the `undertow` `configuration` `handler` `file` `case-sensitive` attribute.
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-attribute(name=case-sensitive)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `file` `case-sensitive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `file` `directory-listing`
enable directory listing?
get the `undertow` `configuration` `handler` `file` `directory-listing` attribute.
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-attribute(name=directory-listing)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `file` `directory-listing`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `file` `follow-symlink`
enable following symbolic links
get the `undertow` `configuration` `handler` `file` `follow-symlink` attribute.
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-attribute(name=follow-symlink)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `file` `follow-symlink`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `file` `path`
path on `filesystem` from where file handler will serve resources
get the `undertow` `configuration` `handler` `file` `path` attribute.
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `file` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `file` `safe-symlink-paths`
paths that are safe to be targets of symbolic links
get the `undertow` `configuration` `handler` `file` `safe-symlink-paths` attribute.
operation: `/subsystem=undertow/configuration=handler/file=<file name>:read-attribute(name=safe-symlink-paths)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `file` `safe-symlink-paths`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `handler` `reverse-proxy`
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-resource()`
To get the list of all the `undertow` `configuration` `handler` `reverse-proxy` use '*' for `<reverse-proxy name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `handler` `reverse-proxy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `cached-connections-per-thread`
the number of connections that will be kept alive indefinitely
get the `undertow` `configuration` `handler` `reverse-proxy` `cached-connections-per-thread` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=cached-connections-per-thread)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `cached-connections-per-thread`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `connection-idle-timeout`
the amount of time a connection can be idle before it will be closed. connections will not time out once the pool size is down to the configured minimum (as configured by `cached-connections-per-thread`)
get the `undertow` `configuration` `handler` `reverse-proxy` `connection-idle-timeout` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=connection-idle-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `connection-idle-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `connections-per-thread`
the number of connections that will be maintained to `backend` servers, per io thread.
get the `undertow` `configuration` `handler` `reverse-proxy` `connections-per-thread` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=connections-per-thread)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `connections-per-thread`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `max-request-time`
the maximum time that a proxy request can be active for, before being killed
get the `undertow` `configuration` `handler` `reverse-proxy` `max-request-time` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=max-request-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `max-request-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `max-retries`
the number of times to attempt to retry a request if it fails. note that if a request is not considered idempotent then it will only be retried if the proxy can be sure it was not sent to the `backend` server).
get the `undertow` `configuration` `handler` `reverse-proxy` `max-retries` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=max-retries)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `max-retries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `problem-server-retry`
time in seconds to wait before attempting to reconnect to a server that is down
get the `undertow` `configuration` `handler` `reverse-proxy` `problem-server-retry` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=problem-server-retry)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `problem-server-retry`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `request-queue-size`
the number of requests that can be queued if the connection pool is full before requests are rejected with a `503`
get the `undertow` `configuration` `handler` `reverse-proxy` `request-queue-size` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=request-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `request-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `reuse-x-forwarded-header`
`append(reuse` existing) remote hop to `x-forwarded`-* headers, if not, previous value is discarded and remote hop becomes the value.
get the `undertow` `configuration` `handler` `reverse-proxy` `reuse-x-forwarded-header` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=reuse-x-forwarded-header)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `reuse-x-forwarded-header`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `rewrite-host-header`
set host header to connection remote end and create `x-forwarded-host` header.
get the `undertow` `configuration` `handler` `reverse-proxy` `rewrite-host-header` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=rewrite-host-header)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `rewrite-host-header`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `session-cookie-names`
comma separated list of session cookie names. generally this will just be `jsessionid`.
get the `undertow` `configuration` `handler` `reverse-proxy` `session-cookie-names` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>:read-attribute(name=session-cookie-names)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `session-cookie-names`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `configuration` `handler` `reverse-proxy` `host`
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-resource()`
To get the list of all the `undertow` `configuration` `handler` `reverse-proxy` `host` use '*' for `<host name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `configuration` `handler` `reverse-proxy` `host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `enable-http2`
if this is true then the proxy will attempt to use `http/2` to connect to the `backend`. if it is not supported it will fall back to `http/1.1`.
get the `undertow` `configuration` `handler` `reverse-proxy` `host` `enable-http2` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-attribute(name=enable-http2)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `enable-http2`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `instance-id`
the instance id (aka `jvm` route) that will be used to enable sticky sessions
get the `undertow` `configuration` `handler` `reverse-proxy` `host` `instance-id` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-attribute(name=instance-id)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `instance-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `outbound-socket-binding`
outbound socket binding for this host
get the `undertow` `configuration` `handler` `reverse-proxy` `host` `outbound-socket-binding` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-attribute(name=outbound-socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `outbound-socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `path`
optional path if host is using non root resource
get the `undertow` `configuration` `handler` `reverse-proxy` `host` `path` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `scheme`
what kind of scheme is used
get the `undertow` `configuration` `handler` `reverse-proxy` `host` `scheme` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-attribute(name=scheme)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `scheme`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `security-realm`
the security realm that provides the `ssl` configuration for the connection to the host
get the `undertow` `configuration` `handler` `reverse-proxy` `host` `security-realm` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-attribute(name=security-realm)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `security-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `ssl-context`
reference to the `sslcontext` to be used by this handler.
get the `undertow` `configuration` `handler` `reverse-proxy` `host` `ssl-context` attribute.
operation: `/subsystem=undertow/configuration=handler/reverse-proxy=<reverse-proxy name>/host=<host name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `configuration` `handler` `reverse-proxy` `host` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `application-security-domain`
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-resource()`
To get the list of all the `undertow` `application-security-domain` use '*' for `<application-security-domain name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `application-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `enable-jacc`
enable authorization using jakarta authorization
get the `undertow` `application-security-domain` `enable-jacc` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-attribute(name=enable-jacc)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `enable-jacc`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `enable-jaspi`
enable `jaspi` authentication for the associated deployments.
get the `undertow` `application-security-domain` `enable-jaspi` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-attribute(name=enable-jaspi)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `enable-jaspi`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `http-authentication-factory`
the `http` authentication factory to be used by deployments that reference the mapped security domain.
get the `undertow` `application-security-domain` `http-authentication-factory` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-attribute(name=http-authentication-factory)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `http-authentication-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `integrated-jaspi`
whether integrated `jaspi` should be used. if 'false', an ad hoc identity will be created instead.
get the `undertow` `application-security-domain` `integrated-jaspi` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-attribute(name=integrated-jaspi)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `integrated-jaspi`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `override-deployment-config`
should the authentication configuration in the deployment be overridden by the factory.
get the `undertow` `application-security-domain` `override-deployment-config` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-attribute(name=override-deployment-config)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `override-deployment-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `referencing-deployments`
the deployments currently referencing this mapping.
get the `undertow` `application-security-domain` `referencing-deployments` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-attribute(name=referencing-deployments)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `referencing-deployments`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `security-domain`
the `securitydomain` to be used by deployments that reference the mapped security domain.
get the `undertow` `application-security-domain` `security-domain` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `client-ssl-context`
reference to the `ssl` context used to secure `back-channel` logout connection.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `client-ssl-context` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=client-ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `client-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `cookie-name`
name of the cookie
get the `undertow` `application-security-domain` `setting` `single-sign-on` `cookie-name` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=cookie-name)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `cookie-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `credential-reference`
the credential reference to decrypt the private key entry.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `credential-reference` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `domain`
the cookie domain that will be used.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `domain` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=domain)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `http-only`
set cookie `httponly` attribute.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `http-only` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=http-only)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `http-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `key-alias`
alias of the private key entry used for signing and verifying `back-channel` logout connection.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `key-alias` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=key-alias)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `key-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `key-store`
reference to key store containing a private key entry.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `key-store` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=key-store)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `path`
cookie path.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `path` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `secure`
set cookie secure attribute.
get the `undertow` `application-security-domain` `setting` `single-sign-on` `secure` attribute.
operation: `/subsystem=undertow/application-security-domain=<application-security-domain name>/setting=single-sign-on:read-attribute(name=secure)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `application-security-domain` `setting` `single-sign-on` `secure`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server`
operation: `/subsystem=undertow/server=<server name>:read-resource()`
To get the list of all the `undertow` `server` use '*' for `<server name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `default-host`
the servers default virtual host
get the `undertow` `server` `default-host` attribute.
operation: `/subsystem=undertow/server=<server name>:read-attribute(name=default-host)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `default-host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `servlet-container`
the servers default `servlet` container
get the `undertow` `server` `servlet-container` attribute.
operation: `/subsystem=undertow/server=<server name>:read-attribute(name=servlet-container)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `servlet-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server` `host`
operation: `/subsystem=undertow/server=<server name>/host=<host name>:read-resource()`
To get the list of all the `undertow` `server` `host` use '*' for `<host name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server` `host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `alias`
aliases for the host
get the `undertow` `server` `host` `alias` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>:read-attribute(name=alias)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `default-response-code`
if set, this will be response code sent back in case requested context does not exist on server.
get the `undertow` `server` `host` `default-response-code` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>:read-attribute(name=default-response-code)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `default-response-code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `default-web-module`
default web module
get the `undertow` `server` `host` `default-web-module` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>:read-attribute(name=default-web-module)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `default-web-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `disable-console-redirect`
if set to true, /console redirect wont be enabled for this host, default is false
get the `undertow` `server` `host` `disable-console-redirect` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>:read-attribute(name=disable-console-redirect)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `disable-console-redirect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `queue-requests-on-start`
if requests should be queued on start for this host. if this is set to false the default response code will be returned instead.
get the `undertow` `server` `host` `queue-requests-on-start` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>:read-attribute(name=queue-requests-on-start)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `queue-requests-on-start`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server` `host` `location`
operation: `/subsystem=undertow/server=<server name>/host=<host name>/location=<location name>:read-resource()`
To get the list of all the `undertow` `server` `host` `location` use '*' for `<location name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server` `host` `location`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `location` `handler`
default handler for this location
get the `undertow` `server` `host` `location` `handler` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/location=<location name>:read-attribute(name=handler)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `location` `handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server` `host` `location` `filter-ref`
operation: `/subsystem=undertow/server=<server name>/host=<host name>/location=<location name>/filter-ref=<filter-ref name>:read-resource()`
To get the list of all the `undertow` `server` `host` `location` `filter-ref` use '*' for `<filter-ref name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server` `host` `location` `filter-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `location` `filter-ref` `predicate`
predicates provide a simple way of making a `true/false` decision  based on an exchange. many handlers have a requirement that they be applied conditionally, and predicates provide a general way to specify a condition.
get the `undertow` `server` `host` `location` `filter-ref` `predicate` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/location=<location name>/filter-ref=<filter-ref name>:read-attribute(name=predicate)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `location` `filter-ref` `predicate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `location` `filter-ref` `priority`
defines filter order. a lower number instructs the server to be included earlier in the handler chain than others with higher numbers. values range from `1`, indicating the filter will be handled first, to `2147483647`, resulting in the filter being handled last.
get the `undertow` `server` `host` `location` `filter-ref` `priority` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/location=<location name>/filter-ref=<filter-ref name>:read-attribute(name=priority)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `location` `filter-ref` `priority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `directory`
directory in which to save logs
get the `undertow` `server` `host` `setting` `access-log` `directory` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=directory)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `directory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `extended`
if the log uses the extended log file format
get the `undertow` `server` `host` `setting` `access-log` `extended` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=extended)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `extended`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `pattern`
the access log pattern.
get the `undertow` `server` `host` `setting` `access-log` `pattern` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `predicate`
predicate that determines if the request should be logged
get the `undertow` `server` `host` `setting` `access-log` `predicate` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=predicate)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `predicate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `prefix`
prefix for the log file name.
get the `undertow` `server` `host` `setting` `access-log` `prefix` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `relative-to`
the directory the path is relative to
get the `undertow` `server` `host` `setting` `access-log` `relative-to` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `rotate`
rotate the access log every day.
get the `undertow` `server` `host` `setting` `access-log` `rotate` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=rotate)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `rotate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `suffix`
suffix for the log file name.
get the `undertow` `server` `host` `setting` `access-log` `suffix` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `use-server-log`
if the log should be written to the server log, rather than a separate file.
get the `undertow` `server` `host` `setting` `access-log` `use-server-log` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=use-server-log)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `use-server-log`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `worker`
name of the worker to use for logging
get the `undertow` `server` `host` `setting` `access-log` `worker` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=access-log:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `access-log` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `attributes`
the attributes to be included in the structured output.
get the `undertow` `server` `host` `setting` `console-access-log` `attributes` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=console-access-log:read-attribute(name=attributes)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `attributes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `include-host-name`
indicates whether or not the host name should included in the `json` structured output. if set to true the key will be `hostname` in the structured data and the value will be the host this `console-access-log` belongs to.
get the `undertow` `server` `host` `setting` `console-access-log` `include-host-name` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=console-access-log:read-attribute(name=include-host-name)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `include-host-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `metadata`
any additional `metadata` to add to the `json` structured output.
get the `undertow` `server` `host` `setting` `console-access-log` `metadata` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=console-access-log:read-attribute(name=metadata)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `metadata`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `predicate`
predicate that determines if the request should be logged.
get the `undertow` `server` `host` `setting` `console-access-log` `predicate` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=console-access-log:read-attribute(name=predicate)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `predicate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `worker`
name of the worker to use for logging.
get the `undertow` `server` `host` `setting` `console-access-log` `worker` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=console-access-log:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `console-access-log` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `cookie-name`
name of the cookie
get the `undertow` `server` `host` `setting` `single-sign-on` `cookie-name` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=single-sign-on:read-attribute(name=cookie-name)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `cookie-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `domain`
the cookie domain that will be used.
get the `undertow` `server` `host` `setting` `single-sign-on` `domain` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=single-sign-on:read-attribute(name=domain)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `http-only`
set cookie `httponly` attribute.
get the `undertow` `server` `host` `setting` `single-sign-on` `http-only` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=single-sign-on:read-attribute(name=http-only)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `http-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `path`
cookie path.
get the `undertow` `server` `host` `setting` `single-sign-on` `path` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=single-sign-on:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `secure`
set cookie secure attribute.
get the `undertow` `server` `host` `setting` `single-sign-on` `secure` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=single-sign-on:read-attribute(name=secure)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `single-sign-on` `secure`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `http-invoker` `http-authentication-factory`
the `http` authentication factory to use for authentication
get the `undertow` `server` `host` `setting` `http-invoker` `http-authentication-factory` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=http-invoker:read-attribute(name=http-authentication-factory)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `http-invoker` `http-authentication-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `http-invoker` `path`
the path that the services are installed under
get the `undertow` `server` `host` `setting` `http-invoker` `path` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=http-invoker:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `http-invoker` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `setting` `http-invoker` `security-realm`
the legacy security realm to use for authentication
get the `undertow` `server` `host` `setting` `http-invoker` `security-realm` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/setting=http-invoker:read-attribute(name=security-realm)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `setting` `http-invoker` `security-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server` `host` `filter-ref`
operation: `/subsystem=undertow/server=<server name>/host=<host name>/filter-ref=<filter-ref name>:read-resource()`
To get the list of all the `undertow` `server` `host` `filter-ref` use '*' for `<filter-ref name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server` `host` `filter-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `filter-ref` `predicate`
predicates provide a simple way of making a `true/false` decision  based on an exchange. many handlers have a requirement that they be applied conditionally, and predicates provide a general way to specify a condition.
get the `undertow` `server` `host` `filter-ref` `predicate` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/filter-ref=<filter-ref name>:read-attribute(name=predicate)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `filter-ref` `predicate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `host` `filter-ref` `priority`
defines filter order. a lower number instructs the server to be included earlier in the handler chain than others with higher numbers. values range from `1`, indicating the filter will be handled first, to `2147483647`, resulting in the filter being handled last.
get the `undertow` `server` `host` `filter-ref` `priority` attribute.
operation: `/subsystem=undertow/server=<server name>/host=<host name>/filter-ref=<filter-ref name>:read-attribute(name=priority)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `host` `filter-ref` `priority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server` `http-listener`
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-resource()`
To get the list of all the `undertow` `server` `http-listener` use '*' for `<http-listener name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server` `http-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `allow-encoded-slash`
if a request comes in with encoded / characters (`i.e`. %`2f`), will these be decoded.
get the `undertow` `server` `http-listener` `allow-encoded-slash` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=allow-encoded-slash)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `allow-encoded-slash`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `allow-equals-in-cookie-value`
if this is true then undertow will allow `non-escaped` equals characters in unquoted cookie values. unquoted cookie values may not contain equals characters. if present the value ends before the equals sign. the remainder of the cookie value will be dropped.
get the `undertow` `server` `http-listener` `allow-equals-in-cookie-value` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=allow-equals-in-cookie-value)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `allow-equals-in-cookie-value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `allow-unescaped-characters-in-url`
if this is true undertow will accept `non-encoded` characters that are disallowed by the uri specification. this defaults to false, and in general should not be needed as most clients correctly encode characters. note that setting this to true can be considered a security risk, as allowing `non-standard` characters can allow request smuggling attacks in some circumstances.
get the `undertow` `server` `http-listener` `allow-unescaped-characters-in-url` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=allow-unescaped-characters-in-url)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `allow-unescaped-characters-in-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `always-set-keep-alive`
if this is true then a connection: `keep-alive` header will be added to responses, even when it is not strictly required by the specification.
get the `undertow` `server` `http-listener` `always-set-keep-alive` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=always-set-keep-alive)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `always-set-keep-alive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `buffer-pipelined-data`
if we should buffer pipelined requests.
get the `undertow` `server` `http-listener` `buffer-pipelined-data` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=buffer-pipelined-data)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `buffer-pipelined-data`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `buffer-pool`
the listeners buffer pool
get the `undertow` `server` `http-listener` `buffer-pool` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=buffer-pool)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `buffer-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `bytes-received`
the number of bytes that have been received by this listener
get the `undertow` `server` `http-listener` `bytes-received` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=bytes-received)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `bytes-received`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `bytes-sent`
the number of bytes that have been sent out on this listener
get the `undertow` `server` `http-listener` `bytes-sent` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=bytes-sent)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `bytes-sent`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `certificate-forwarding`
if certificate forwarding should be enabled. if this is enabled then the listener will take the certificate from the `ssl_client_cert` attribute. this should only be enabled if behind a proxy, and the proxy is configured to always set these headers.
get the `undertow` `server` `http-listener` `certificate-forwarding` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=certificate-forwarding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `certificate-forwarding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `decode-url`
if this is true then the parser will decode the `url` and query parameters using the selected character encoding (`utf-8` by default). if this is false they will not be decoded. this will allow a later handler to decode them into whatever `charset` is desired.
get the `undertow` `server` `http-listener` `decode-url` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=decode-url)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `decode-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `disallowed-methods`
a comma separated list of `http` methods that are not allowed
get the `undertow` `server` `http-listener` `disallowed-methods` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=disallowed-methods)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `disallowed-methods`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `enable-http2`
enables `http2` support for this listener
get the `undertow` `server` `http-listener` `enable-http2` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=enable-http2)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `enable-http2`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `enabled`
if the listener is enabled
get the `undertow` `server` `http-listener` `enabled` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `error-count`
the number of `500` responses that have been sent by this listener
get the `undertow` `server` `http-listener` `error-count` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=error-count)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `error-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `http2-enable-push`
if server push is enabled for this connection
get the `undertow` `server` `http-listener` `http2-enable-push` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=http2-enable-push)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `http2-enable-push`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `http2-header-table-size`
the size of the header table used for `hpack` compression, in bytes. this amount of memory will be allocated per connection for compression. larger values use more memory but may give better compression.
get the `undertow` `server` `http-listener` `http2-header-table-size` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=http2-header-table-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `http2-header-table-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `http2-initial-window-size`
the flow control window size that controls how quickly the client can send data to the server
get the `undertow` `server` `http-listener` `http2-initial-window-size` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=http2-initial-window-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `http2-initial-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `http2-max-concurrent-streams`
the maximum number of `http/2` streams that can be active at any time on a single connection
get the `undertow` `server` `http-listener` `http2-max-concurrent-streams` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=http2-max-concurrent-streams)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `http2-max-concurrent-streams`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `http2-max-frame-size`
the max `http/2` frame size
get the `undertow` `server` `http-listener` `http2-max-frame-size` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=http2-max-frame-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `http2-max-frame-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `http2-max-header-list-size`
the maximum size of request headers the server is prepared to accept
get the `undertow` `server` `http-listener` `http2-max-header-list-size` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=http2-max-header-list-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `http2-max-header-list-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-buffered-request-size`
maximum size of a buffered request, in bytes. requests are not usually buffered, the most common case is when performing `ssl` renegotiation for a post request, and the post data must be fully buffered in order to perform the renegotiation.
get the `undertow` `server` `http-listener` `max-buffered-request-size` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-buffered-request-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-buffered-request-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-connections`
the maximum number of concurrent connections. only values greater than `0` are allowed. for unlimited connections simply undefine this attribute value.
get the `undertow` `server` `http-listener` `max-connections` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-connections)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-cookies`
the maximum number of cookies that will be parsed. this is used to protect against hash vulnerabilities.
get the `undertow` `server` `http-listener` `max-cookies` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-cookies)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-cookies`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-header-size`
the maximum size of a `http` request header, in bytes.
get the `undertow` `server` `http-listener` `max-header-size` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-header-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-header-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-headers`
the maximum number of headers that will be parsed. this is used to protect against hash vulnerabilities.
get the `undertow` `server` `http-listener` `max-headers` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-headers)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-parameters`
the maximum number of parameters that will be parsed. this is used to protect against hash vulnerabilities. this applies to both query parameters, and to post data, but is not cumulative (`i.e`. you can potentially have max parameters * `2` total parameters).
get the `undertow` `server` `http-listener` `max-parameters` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-parameters)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-parameters`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-post-size`
the maximum size of a post that will be accepted, in bytes.
get the `undertow` `server` `http-listener` `max-post-size` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-post-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-post-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `max-processing-time`
the maximum processing time taken by a request on this listener
get the `undertow` `server` `http-listener` `max-processing-time` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=max-processing-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `max-processing-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `no-request-timeout`
the length of time in milliseconds that the connection can be idle before it is closed by the container.
get the `undertow` `server` `http-listener` `no-request-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=no-request-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `no-request-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `processing-time`
the total processing time of all requests handed by this listener
get the `undertow` `server` `http-listener` `processing-time` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=processing-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `processing-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `proxy-address-forwarding`
enables  handling of `x-forwarded-host` header (and other `x-forwarded`-* headers) and use this header information to set the remote address. this should only be used behind a trusted proxy that sets these headers otherwise a remote user can spoof their `ip` address.
get the `undertow` `server` `http-listener` `proxy-address-forwarding` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=proxy-address-forwarding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `proxy-address-forwarding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `proxy-protocol`
if this is true then the listener will use the proxy protocol `v1`, as defined by `https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt`. this option must only be enabled for listeners that are behind a load balancer that supports the same protocol.
get the `undertow` `server` `http-listener` `proxy-protocol` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=proxy-protocol)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `proxy-protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `read-timeout`
configure a read timeout for a socket, in milliseconds.  if the given amount of time elapses without a successful read taking place, the `socket's` next read will throw a {@link `readtimeoutexception`}.
get the `undertow` `server` `http-listener` `read-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=read-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `read-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `receive-buffer`
the receive buffer size, in bytes.
get the `undertow` `server` `http-listener` `receive-buffer` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=receive-buffer)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `receive-buffer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `record-request-start-time`
if this is true then undertow will record the request start time, to allow for request time to be logged. this has a small but measurable performance impact
get the `undertow` `server` `http-listener` `record-request-start-time` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=record-request-start-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `record-request-start-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `redirect-socket`
if this listener is supporting `non-ssl` requests, and a request is received for which a matching <`security-constraint`> requires `ssl` transport, undertow will automatically redirect the request to the socket binding port specified here.
get the `undertow` `server` `http-listener` `redirect-socket` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=redirect-socket)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `redirect-socket`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `request-count`
the number of requests this listener has served
get the `undertow` `server` `http-listener` `request-count` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=request-count)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `request-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `request-parse-timeout`
the maximum amount of time (in milliseconds) that can be spent parsing the request
get the `undertow` `server` `http-listener` `request-parse-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=request-parse-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `request-parse-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `require-host-http11`
require that all `http/1.1` requests have a 'host' header, as per the `rfc`. if the request does not include this header it will be rejected with a `403`.
get the `undertow` `server` `http-listener` `require-host-http11` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=require-host-http11)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `require-host-http11`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `resolve-peer-address`
enables host `dns` lookup
get the `undertow` `server` `http-listener` `resolve-peer-address` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=resolve-peer-address)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `resolve-peer-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `rfc6265-cookie-validation`
if cookies should be validated to ensure they comply with `rfc6265`.
get the `undertow` `server` `http-listener` `rfc6265-cookie-validation` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=rfc6265-cookie-validation)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `rfc6265-cookie-validation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `secure`
if this is true then requests that originate from this listener are marked as secure, even if the request is not using `https`.
get the `undertow` `server` `http-listener` `secure` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=secure)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `secure`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `send-buffer`
the send buffer size, in bytes.
get the `undertow` `server` `http-listener` `send-buffer` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=send-buffer)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `send-buffer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `socket-binding`
the listener socket binding
get the `undertow` `server` `http-listener` `socket-binding` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `tcp-backlog`
configure a server with the specified backlog.
get the `undertow` `server` `http-listener` `tcp-backlog` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=tcp-backlog)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `tcp-backlog`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `tcp-keep-alive`
configure a channel to send `tcp` `keep-alive` messages in an `implementation-dependent` manner.
get the `undertow` `server` `http-listener` `tcp-keep-alive` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=tcp-keep-alive)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `tcp-keep-alive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `url-charset`
`url` `charset`
get the `undertow` `server` `http-listener` `url-charset` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=url-charset)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `url-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `worker`
the listeners `xnio` worker
get the `undertow` `server` `http-listener` `worker` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `http-listener` `write-timeout`
configure a write timeout for a socket, in milliseconds.  if the given amount of time elapses without a successful write taking place, the `socket's` next write will throw a {@link `writetimeoutexception`}.
get the `undertow` `server` `http-listener` `write-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/http-listener=<http-listener name>:read-attribute(name=write-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `http-listener` `write-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server` `ajp-listener`
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-resource()`
To get the list of all the `undertow` `server` `ajp-listener` use '*' for `<ajp-listener name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server` `ajp-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `allow-encoded-slash`
if a request comes in with encoded / characters (`i.e`. %`2f`), will these be decoded.
get the `undertow` `server` `ajp-listener` `allow-encoded-slash` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=allow-encoded-slash)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `allow-encoded-slash`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `allow-equals-in-cookie-value`
if this is true then undertow will allow `non-escaped` equals characters in unquoted cookie values. unquoted cookie values may not contain equals characters. if present the value ends before the equals sign. the remainder of the cookie value will be dropped.
get the `undertow` `server` `ajp-listener` `allow-equals-in-cookie-value` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=allow-equals-in-cookie-value)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `allow-equals-in-cookie-value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `allow-unescaped-characters-in-url`
if this is true undertow will accept `non-encoded` characters that are disallowed by the uri specification. this defaults to false, and in general should not be needed as most clients correctly encode characters. note that setting this to true can be considered a security risk, as allowing `non-standard` characters can allow request smuggling attacks in some circumstances.
get the `undertow` `server` `ajp-listener` `allow-unescaped-characters-in-url` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=allow-unescaped-characters-in-url)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `allow-unescaped-characters-in-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `allowed-request-attributes-pattern`
`pattern(regex`) which specifies allowed custom `ajp` request attributes.
get the `undertow` `server` `ajp-listener` `allowed-request-attributes-pattern` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=allowed-request-attributes-pattern)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `allowed-request-attributes-pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `always-set-keep-alive`
if this is true then a connection: `keep-alive` header will be added to responses, even when it is not strictly required by the specification.
get the `undertow` `server` `ajp-listener` `always-set-keep-alive` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=always-set-keep-alive)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `always-set-keep-alive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `buffer-pipelined-data`
if we should buffer pipelined requests.
get the `undertow` `server` `ajp-listener` `buffer-pipelined-data` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=buffer-pipelined-data)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `buffer-pipelined-data`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `buffer-pool`
the listeners buffer pool
get the `undertow` `server` `ajp-listener` `buffer-pool` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=buffer-pool)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `buffer-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `bytes-received`
the number of bytes that have been received by this listener
get the `undertow` `server` `ajp-listener` `bytes-received` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=bytes-received)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `bytes-received`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `bytes-sent`
the number of bytes that have been sent out on this listener
get the `undertow` `server` `ajp-listener` `bytes-sent` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=bytes-sent)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `bytes-sent`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `decode-url`
if this is true then the parser will decode the `url` and query parameters using the selected character encoding (`utf-8` by default). if this is false they will not be decoded. this will allow a later handler to decode them into whatever `charset` is desired.
get the `undertow` `server` `ajp-listener` `decode-url` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=decode-url)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `decode-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `disallowed-methods`
a comma separated list of `http` methods that are not allowed
get the `undertow` `server` `ajp-listener` `disallowed-methods` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=disallowed-methods)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `disallowed-methods`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `enabled`
if the listener is enabled
get the `undertow` `server` `ajp-listener` `enabled` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `error-count`
the number of `500` responses that have been sent by this listener
get the `undertow` `server` `ajp-listener` `error-count` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=error-count)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `error-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-ajp-packet-size`
the maximum supported size of `ajp` packets. if this is modified it has to be increased on the load balancer and the `backend` server.
get the `undertow` `server` `ajp-listener` `max-ajp-packet-size` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-ajp-packet-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-ajp-packet-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-buffered-request-size`
maximum size of a buffered request, in bytes. requests are not usually buffered, the most common case is when performing `ssl` renegotiation for a post request, and the post data must be fully buffered in order to perform the renegotiation.
get the `undertow` `server` `ajp-listener` `max-buffered-request-size` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-buffered-request-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-buffered-request-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-connections`
the maximum number of concurrent connections. only values greater than `0` are allowed. for unlimited connections simply undefine this attribute value.
get the `undertow` `server` `ajp-listener` `max-connections` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-connections)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-cookies`
the maximum number of cookies that will be parsed. this is used to protect against hash vulnerabilities.
get the `undertow` `server` `ajp-listener` `max-cookies` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-cookies)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-cookies`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-header-size`
the maximum size of a `http` request header, in bytes.
get the `undertow` `server` `ajp-listener` `max-header-size` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-header-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-header-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-headers`
the maximum number of headers that will be parsed. this is used to protect against hash vulnerabilities.
get the `undertow` `server` `ajp-listener` `max-headers` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-headers)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-parameters`
the maximum number of parameters that will be parsed. this is used to protect against hash vulnerabilities. this applies to both query parameters, and to post data, but is not cumulative (`i.e`. you can potentially have max parameters * `2` total parameters).
get the `undertow` `server` `ajp-listener` `max-parameters` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-parameters)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-parameters`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-post-size`
the maximum size of a post that will be accepted, in bytes.
get the `undertow` `server` `ajp-listener` `max-post-size` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-post-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-post-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `max-processing-time`
the maximum processing time taken by a request on this listener
get the `undertow` `server` `ajp-listener` `max-processing-time` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=max-processing-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `max-processing-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `no-request-timeout`
the length of time in milliseconds that the connection can be idle before it is closed by the container.
get the `undertow` `server` `ajp-listener` `no-request-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=no-request-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `no-request-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `processing-time`
the total processing time of all requests handed by this listener
get the `undertow` `server` `ajp-listener` `processing-time` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=processing-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `processing-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `read-timeout`
configure a read timeout for a socket, in milliseconds.  if the given amount of time elapses without a successful read taking place, the `socket's` next read will throw a {@link `readtimeoutexception`}.
get the `undertow` `server` `ajp-listener` `read-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=read-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `read-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `receive-buffer`
the receive buffer size, in bytes.
get the `undertow` `server` `ajp-listener` `receive-buffer` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=receive-buffer)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `receive-buffer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `record-request-start-time`
if this is true then undertow will record the request start time, to allow for request time to be logged. this has a small but measurable performance impact
get the `undertow` `server` `ajp-listener` `record-request-start-time` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=record-request-start-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `record-request-start-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `redirect-socket`
if this listener is supporting `non-ssl` requests, and a request is received for which a matching <`security-constraint`> requires `ssl` transport, undertow will automatically redirect the request to the socket binding port specified here.
get the `undertow` `server` `ajp-listener` `redirect-socket` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=redirect-socket)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `redirect-socket`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `request-count`
the number of requests this listener has served
get the `undertow` `server` `ajp-listener` `request-count` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=request-count)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `request-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `request-parse-timeout`
the maximum amount of time (in milliseconds) that can be spent parsing the request
get the `undertow` `server` `ajp-listener` `request-parse-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=request-parse-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `request-parse-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `resolve-peer-address`
enables host `dns` lookup
get the `undertow` `server` `ajp-listener` `resolve-peer-address` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=resolve-peer-address)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `resolve-peer-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `rfc6265-cookie-validation`
if cookies should be validated to ensure they comply with `rfc6265`.
get the `undertow` `server` `ajp-listener` `rfc6265-cookie-validation` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=rfc6265-cookie-validation)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `rfc6265-cookie-validation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `scheme`
the listener scheme, can be `http` or `https`. by default the scheme will be taken from the incoming `ajp` request.
get the `undertow` `server` `ajp-listener` `scheme` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=scheme)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `scheme`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `secure`
if this is true then requests that originate from this listener are marked as secure, even if the request is not using `https`.
get the `undertow` `server` `ajp-listener` `secure` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=secure)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `secure`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `send-buffer`
the send buffer size, in bytes.
get the `undertow` `server` `ajp-listener` `send-buffer` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=send-buffer)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `send-buffer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `socket-binding`
the listener socket binding
get the `undertow` `server` `ajp-listener` `socket-binding` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `tcp-backlog`
configure a server with the specified backlog.
get the `undertow` `server` `ajp-listener` `tcp-backlog` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=tcp-backlog)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `tcp-backlog`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `tcp-keep-alive`
configure a channel to send `tcp` `keep-alive` messages in an `implementation-dependent` manner.
get the `undertow` `server` `ajp-listener` `tcp-keep-alive` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=tcp-keep-alive)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `tcp-keep-alive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `url-charset`
`url` `charset`
get the `undertow` `server` `ajp-listener` `url-charset` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=url-charset)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `url-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `worker`
the listeners `xnio` worker
get the `undertow` `server` `ajp-listener` `worker` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `ajp-listener` `write-timeout`
configure a write timeout for a socket, in milliseconds.  if the given amount of time elapses without a successful write taking place, the `socket's` next write will throw a {@link `writetimeoutexception`}.
get the `undertow` `server` `ajp-listener` `write-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/ajp-listener=<ajp-listener name>:read-attribute(name=write-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `ajp-listener` `write-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `server` `https-listener`
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-resource()`
To get the list of all the `undertow` `server` `https-listener` use '*' for `<https-listener name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `server` `https-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `allow-encoded-slash`
if a request comes in with encoded / characters (`i.e`. %`2f`), will these be decoded.
get the `undertow` `server` `https-listener` `allow-encoded-slash` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=allow-encoded-slash)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `allow-encoded-slash`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `allow-equals-in-cookie-value`
if this is true then undertow will allow `non-escaped` equals characters in unquoted cookie values. unquoted cookie values may not contain equals characters. if present the value ends before the equals sign. the remainder of the cookie value will be dropped.
get the `undertow` `server` `https-listener` `allow-equals-in-cookie-value` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=allow-equals-in-cookie-value)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `allow-equals-in-cookie-value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `allow-unescaped-characters-in-url`
if this is true undertow will accept `non-encoded` characters that are disallowed by the uri specification. this defaults to false, and in general should not be needed as most clients correctly encode characters. note that setting this to true can be considered a security risk, as allowing `non-standard` characters can allow request smuggling attacks in some circumstances.
get the `undertow` `server` `https-listener` `allow-unescaped-characters-in-url` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=allow-unescaped-characters-in-url)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `allow-unescaped-characters-in-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `always-set-keep-alive`
if this is true then a connection: `keep-alive` header will be added to responses, even when it is not strictly required by the specification.
get the `undertow` `server` `https-listener` `always-set-keep-alive` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=always-set-keep-alive)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `always-set-keep-alive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `buffer-pipelined-data`
if we should buffer pipelined requests.
get the `undertow` `server` `https-listener` `buffer-pipelined-data` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=buffer-pipelined-data)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `buffer-pipelined-data`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `buffer-pool`
the listeners buffer pool
get the `undertow` `server` `https-listener` `buffer-pool` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=buffer-pool)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `buffer-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `bytes-received`
the number of bytes that have been received by this listener
get the `undertow` `server` `https-listener` `bytes-received` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=bytes-received)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `bytes-received`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `bytes-sent`
the number of bytes that have been sent out on this listener
get the `undertow` `server` `https-listener` `bytes-sent` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=bytes-sent)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `bytes-sent`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `certificate-forwarding`
if certificate forwarding should be enabled. if this is enabled then the listener will take the certificate from the `ssl_client_cert` attribute. this should only be enabled if behind a proxy, and the proxy is configured to always set these headers.
get the `undertow` `server` `https-listener` `certificate-forwarding` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=certificate-forwarding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `certificate-forwarding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `decode-url`
if this is true then the parser will decode the `url` and query parameters using the selected character encoding (`utf-8` by default). if this is false they will not be decoded. this will allow a later handler to decode them into whatever `charset` is desired.
get the `undertow` `server` `https-listener` `decode-url` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=decode-url)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `decode-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `disallowed-methods`
a comma separated list of `http` methods that are not allowed
get the `undertow` `server` `https-listener` `disallowed-methods` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=disallowed-methods)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `disallowed-methods`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `enable-http2`
enables `http2` support for this listener
get the `undertow` `server` `https-listener` `enable-http2` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=enable-http2)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `enable-http2`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `enable-spdy`
enables `spdy` support for this listener. this has been deprecated and has no effect, `http/2` should be used instead
get the `undertow` `server` `https-listener` `enable-spdy` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=enable-spdy)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `enable-spdy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `enabled`
if the listener is enabled
get the `undertow` `server` `https-listener` `enabled` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `enabled-cipher-suites`
configures enabled `ssl` ciphers
get the `undertow` `server` `https-listener` `enabled-cipher-suites` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=enabled-cipher-suites)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `enabled-cipher-suites`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `enabled-protocols`
configures `ssl` protocols
get the `undertow` `server` `https-listener` `enabled-protocols` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=enabled-protocols)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `enabled-protocols`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `error-count`
the number of `500` responses that have been sent by this listener
get the `undertow` `server` `https-listener` `error-count` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=error-count)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `error-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `http2-enable-push`
if server push is enabled for this connection
get the `undertow` `server` `https-listener` `http2-enable-push` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=http2-enable-push)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `http2-enable-push`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `http2-header-table-size`
the size of the header table used for `hpack` compression, in bytes. this amount of memory will be allocated per connection for compression. larger values use more memory but may give better compression.
get the `undertow` `server` `https-listener` `http2-header-table-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=http2-header-table-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `http2-header-table-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `http2-initial-window-size`
the flow control window size that controls how quickly the client can send data to the server
get the `undertow` `server` `https-listener` `http2-initial-window-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=http2-initial-window-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `http2-initial-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `http2-max-concurrent-streams`
the maximum number of `http/2` streams that can be active at any time on a single connection
get the `undertow` `server` `https-listener` `http2-max-concurrent-streams` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=http2-max-concurrent-streams)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `http2-max-concurrent-streams`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `http2-max-frame-size`
the max `http/2` frame size
get the `undertow` `server` `https-listener` `http2-max-frame-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=http2-max-frame-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `http2-max-frame-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `http2-max-header-list-size`
the maximum size of request headers the server is prepared to accept
get the `undertow` `server` `https-listener` `http2-max-header-list-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=http2-max-header-list-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `http2-max-header-list-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-buffered-request-size`
maximum size of a buffered request, in bytes. requests are not usually buffered, the most common case is when performing `ssl` renegotiation for a post request, and the post data must be fully buffered in order to perform the renegotiation.
get the `undertow` `server` `https-listener` `max-buffered-request-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-buffered-request-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-buffered-request-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-connections`
the maximum number of concurrent connections. only values greater than `0` are allowed. for unlimited connections simply undefine this attribute value.
get the `undertow` `server` `https-listener` `max-connections` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-connections)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-connections`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-cookies`
the maximum number of cookies that will be parsed. this is used to protect against hash vulnerabilities.
get the `undertow` `server` `https-listener` `max-cookies` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-cookies)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-cookies`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-header-size`
the maximum size of a `http` request header, in bytes.
get the `undertow` `server` `https-listener` `max-header-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-header-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-header-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-headers`
the maximum number of headers that will be parsed. this is used to protect against hash vulnerabilities.
get the `undertow` `server` `https-listener` `max-headers` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-headers)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-parameters`
the maximum number of parameters that will be parsed. this is used to protect against hash vulnerabilities. this applies to both query parameters, and to post data, but is not cumulative (`i.e`. you can potentially have max parameters * `2` total parameters).
get the `undertow` `server` `https-listener` `max-parameters` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-parameters)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-parameters`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-post-size`
the maximum size of a post that will be accepted, in bytes.
get the `undertow` `server` `https-listener` `max-post-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-post-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-post-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `max-processing-time`
the maximum processing time taken by a request on this listener
get the `undertow` `server` `https-listener` `max-processing-time` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=max-processing-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `max-processing-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `no-request-timeout`
the length of time in milliseconds that the connection can be idle before it is closed by the container.
get the `undertow` `server` `https-listener` `no-request-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=no-request-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `no-request-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `processing-time`
the total processing time of all requests handed by this listener
get the `undertow` `server` `https-listener` `processing-time` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=processing-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `processing-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `proxy-address-forwarding`
enables  handling of `x-forwarded-host` header (and other `x-forwarded`-* headers) and use this header information to set the remote address. this should only be used behind a trusted proxy that sets these headers otherwise a remote user can spoof their `ip` address.
get the `undertow` `server` `https-listener` `proxy-address-forwarding` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=proxy-address-forwarding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `proxy-address-forwarding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `proxy-protocol`
if this is true then the listener will use the proxy protocol `v1`, as defined by `https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt`. this option must only be enabled for listeners that are behind a load balancer that supports the same protocol.
get the `undertow` `server` `https-listener` `proxy-protocol` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=proxy-protocol)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `proxy-protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `read-timeout`
configure a read timeout for a socket, in milliseconds.  if the given amount of time elapses without a successful read taking place, the `socket's` next read will throw a {@link `readtimeoutexception`}.
get the `undertow` `server` `https-listener` `read-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=read-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `read-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `receive-buffer`
the receive buffer size, in bytes.
get the `undertow` `server` `https-listener` `receive-buffer` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=receive-buffer)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `receive-buffer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `record-request-start-time`
if this is true then undertow will record the request start time, to allow for request time to be logged. this has a small but measurable performance impact
get the `undertow` `server` `https-listener` `record-request-start-time` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=record-request-start-time)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `record-request-start-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `request-count`
the number of requests this listener has served
get the `undertow` `server` `https-listener` `request-count` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=request-count)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `request-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `request-parse-timeout`
the maximum amount of time (in milliseconds) that can be spent parsing the request
get the `undertow` `server` `https-listener` `request-parse-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=request-parse-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `request-parse-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `require-host-http11`
require that all `http/1.1` requests have a 'host' header, as per the `rfc`. if the request does not include this header it will be rejected with a `403`.
get the `undertow` `server` `https-listener` `require-host-http11` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=require-host-http11)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `require-host-http11`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `resolve-peer-address`
enables host `dns` lookup
get the `undertow` `server` `https-listener` `resolve-peer-address` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=resolve-peer-address)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `resolve-peer-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `rfc6265-cookie-validation`
if cookies should be validated to ensure they comply with `rfc6265`.
get the `undertow` `server` `https-listener` `rfc6265-cookie-validation` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=rfc6265-cookie-validation)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `rfc6265-cookie-validation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `secure`
if this is true then requests that originate from this listener are marked as secure, even if the request is not using `https`.
get the `undertow` `server` `https-listener` `secure` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=secure)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `secure`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `security-realm`
the listeners security realm
get the `undertow` `server` `https-listener` `security-realm` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=security-realm)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `security-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `send-buffer`
the send buffer size, in bytes.
get the `undertow` `server` `https-listener` `send-buffer` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=send-buffer)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `send-buffer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `socket-binding`
the listener socket binding
get the `undertow` `server` `https-listener` `socket-binding` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `ssl-context`
reference to the `sslcontext` to be used by this listener.
get the `undertow` `server` `https-listener` `ssl-context` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `ssl-session-cache-size`
the maximum number of active `ssl` sessions
get the `undertow` `server` `https-listener` `ssl-session-cache-size` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=ssl-session-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `ssl-session-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `ssl-session-timeout`
the timeout for `ssl` sessions, in seconds
get the `undertow` `server` `https-listener` `ssl-session-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=ssl-session-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `ssl-session-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `tcp-backlog`
configure a server with the specified backlog.
get the `undertow` `server` `https-listener` `tcp-backlog` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=tcp-backlog)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `tcp-backlog`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `tcp-keep-alive`
configure a channel to send `tcp` `keep-alive` messages in an `implementation-dependent` manner.
get the `undertow` `server` `https-listener` `tcp-keep-alive` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=tcp-keep-alive)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `tcp-keep-alive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `url-charset`
`url` `charset`
get the `undertow` `server` `https-listener` `url-charset` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=url-charset)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `url-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `verify-client`
the desired `ssl` client authentication mode for `ssl` channels
get the `undertow` `server` `https-listener` `verify-client` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=verify-client)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `verify-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `worker`
the listeners `xnio` worker
get the `undertow` `server` `https-listener` `worker` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `server` `https-listener` `write-timeout`
configure a write timeout for a socket, in milliseconds.  if the given amount of time elapses without a successful write taking place, the `socket's` next write will throw a {@link `writetimeoutexception`}.
get the `undertow` `server` `https-listener` `write-timeout` attribute.
operation: `/subsystem=undertow/server=<server name>/https-listener=<https-listener name>:read-attribute(name=write-timeout)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `server` `https-listener` `write-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `undertow` `buffer-cache`
operation: `/subsystem=undertow/buffer-cache=<buffer-cache name>:read-resource()`
To get the list of all the `undertow` `buffer-cache` use '*' for `<buffer-cache name>`." metadata = {parent=, title=syntax of the operation to get a `undertow` `buffer-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `buffer-cache` `buffer-size`
the size of an individual buffer, in bytes.
get the `undertow` `buffer-cache` `buffer-size` attribute.
operation: `/subsystem=undertow/buffer-cache=<buffer-cache name>:read-attribute(name=buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `buffer-cache` `buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `buffer-cache` `buffers-per-region`
the numbers of buffers in a region
get the `undertow` `buffer-cache` `buffers-per-region` attribute.
operation: `/subsystem=undertow/buffer-cache=<buffer-cache name>:read-attribute(name=buffers-per-region)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `buffer-cache` `buffers-per-region`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `undertow` `buffer-cache` `max-regions`
the maximum number of regions
get the `undertow` `buffer-cache` `max-regions` attribute.
operation: `/subsystem=undertow/buffer-cache=<buffer-cache name>:read-attribute(name=max-regions)`" metadata = {parent=, title=syntax of the operation to get the `undertow` `buffer-cache` `max-regions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security-manager` `deployment-permissions` `default` `maximum-permissions`
the maximum set of permissions that can be granted to a deployment or jars.
get the `security-manager` `deployment-permissions` `default` `maximum-permissions` attribute.
operation: `/subsystem=security-manager/deployment-permissions=default:read-attribute(name=maximum-permissions)`" metadata = {parent=, title=syntax of the operation to get the `security-manager` `deployment-permissions` `default` `maximum-permissions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security-manager` `deployment-permissions` `default` `minimum-permissions`
the minimum set of permissions to be granted to a deployment or jars.
get the `security-manager` `deployment-permissions` `default` `minimum-permissions` attribute.
operation: `/subsystem=security-manager/deployment-permissions=default:read-attribute(name=minimum-permissions)`" metadata = {parent=, title=syntax of the operation to get the `security-manager` `deployment-permissions` `default` `minimum-permissions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `installed-drivers`
list of `jdbc` drivers that have been installed in the runtime
get the `datasources` `installed-drivers` attribute.
operation: `/subsystem=datasources:read-attribute(name=installed-drivers)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `installed-drivers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `datasources` `jdbc-driver`
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-resource()`
To get the list of all the `datasources` `jdbc-driver` use '*' for `<jdbc-driver name>`." metadata = {parent=, title=syntax of the operation to get a `datasources` `jdbc-driver`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `datasource-class-info`
the available properties for the `datasource-class`, and `xa-datasource-class` for the `jdbc-driver`
get the `datasources` `jdbc-driver` `datasource-class-info` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=datasource-class-info)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `datasource-class-info`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `deployment-name`
the name of the deployment unit from which the driver was loaded
get the `datasources` `jdbc-driver` `deployment-name` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=deployment-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `deployment-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `driver-class-name`
the fully qualified class name of the `java.sql.driver` implementation
get the `datasources` `jdbc-driver` `driver-class-name` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=driver-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `driver-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `driver-datasource-class-name`
the fully qualified class name of the `javax.sql.datasource` implementation
get the `datasources` `jdbc-driver` `driver-datasource-class-name` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=driver-datasource-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `driver-datasource-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `driver-major-version`
the `driver's` major version number
get the `datasources` `jdbc-driver` `driver-major-version` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=driver-major-version)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `driver-major-version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `driver-minor-version`
the `driver's` minor version number
get the `datasources` `jdbc-driver` `driver-minor-version` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=driver-minor-version)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `driver-minor-version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `driver-module-name`
the name of the module from which the driver was loaded, if it was loaded from the module path
get the `datasources` `jdbc-driver` `driver-module-name` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=driver-module-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `driver-module-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `driver-name`
defines the `jdbc` driver the `datasource` should use. it is a symbolic name matching the the name of installed driver. in case the driver is deployed as a jar, the name is the name of the deployment unit
get the `datasources` `jdbc-driver` `driver-name` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=driver-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `driver-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `driver-xa-datasource-class-name`
the fully qualified class name of the `javax.sql.xadatasource` implementation
get the `datasources` `jdbc-driver` `driver-xa-datasource-class-name` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=driver-xa-datasource-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `driver-xa-datasource-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `jdbc-compliant`
whether or not the driver is `jdbc` compliant
get the `datasources` `jdbc-driver` `jdbc-compliant` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=jdbc-compliant)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `jdbc-compliant`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `module-slot`
the slot of the module from which the driver was loaded, if it was loaded from the module path
get the `datasources` `jdbc-driver` `module-slot` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=module-slot)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `module-slot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `jdbc-driver` `profile`
domain profile in which driver is defined. null in case of `standalone` server
get the `datasources` `jdbc-driver` `profile` attribute.
operation: `/subsystem=datasources/jdbc-driver=<jdbc-driver name>:read-attribute(name=profile)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `jdbc-driver` `profile`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `datasources` `data-source`
operation: `/subsystem=datasources/data-source=<data-source name>:read-resource()`
To get the list of all the `datasources` `data-source` use '*' for `<data-source name>`." metadata = {parent=, title=syntax of the operation to get a `datasources` `data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `allocation-retry`
the allocation retry element indicates the number of times that allocating a connection should be tried before throwing an exception
get the `datasources` `data-source` `allocation-retry` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=allocation-retry)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `allocation-retry`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `allocation-retry-wait-millis`
the allocation retry wait `millis` element specifies the amount of time, in milliseconds, to wait between retrying to allocate a connection
get the `datasources` `data-source` `allocation-retry-wait-millis` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=allocation-retry-wait-millis)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `allocation-retry-wait-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `allow-multiple-users`
specifies if multiple users will access the `datasource` through the `getconnection(user`, password) method and hence if the internal pool type should account for that
get the `datasources` `data-source` `allow-multiple-users` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=allow-multiple-users)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `allow-multiple-users`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `authentication-context`
the elytron authentication context which defines the `javax.security.auth.subject` that is used to distinguish connections in the pool.
get the `datasources` `data-source` `authentication-context` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `background-validation`
an element to specify that connections should be validated on a background thread versus being validated prior to use. changing this value can be done only on disabled `datasource`,  requires a server restart otherwise.
get the `datasources` `data-source` `background-validation` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=background-validation)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `background-validation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `background-validation-millis`
the `background-validation-millis` element specifies the amount of time, in milliseconds, that background validation will run. changing this value can be done only on disabled `datasource`,  requires a server restart otherwise
get the `datasources` `data-source` `background-validation-millis` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=background-validation-millis)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `background-validation-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `blocking-timeout-wait-millis`
the `blocking-timeout-millis` element specifies the maximum time, in milliseconds, to block while waiting for a connection before throwing an exception. note that this blocks only while waiting for locking a connection, and will never throw an exception if creating a new connection takes an inordinately long time
get the `datasources` `data-source` `blocking-timeout-wait-millis` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=blocking-timeout-wait-millis)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `blocking-timeout-wait-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `capacity-decrementer-class`
class defining the policy for decrementing connections in the pool
get the `datasources` `data-source` `capacity-decrementer-class` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=capacity-decrementer-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `capacity-decrementer-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `capacity-decrementer-properties`
properties to be injected in class defining the policy for decrementing connections in the pool
get the `datasources` `data-source` `capacity-decrementer-properties` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=capacity-decrementer-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `capacity-decrementer-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `capacity-incrementer-class`
class defining the policy for incrementing connections in the pool
get the `datasources` `data-source` `capacity-incrementer-class` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=capacity-incrementer-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `capacity-incrementer-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `capacity-incrementer-properties`
properties to be injected in class defining the policy for incrementing connections in the pool
get the `datasources` `data-source` `capacity-incrementer-properties` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=capacity-incrementer-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `capacity-incrementer-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `check-valid-connection-sql`
specify an `sql` statement to check validity of a pool connection. this may be called when managed connection is obtained from the pool
get the `datasources` `data-source` `check-valid-connection-sql` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=check-valid-connection-sql)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `check-valid-connection-sql`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `connectable`
enable the use of `cmr`. this feature means that a local resource can reliably participate in an `xa` transaction.
get the `datasources` `data-source` `connectable` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=connectable)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `connectable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `connection-listener-class`
`speciefies` class name extending `org.jboss.jca.adapters.jdbc.spi.listener.connectionlistener` that provides a possible to listen for connection activation and passivation in order to perform actions before the connection is returned to the application or returned to the pool.
get the `datasources` `data-source` `connection-listener-class` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=connection-listener-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `connection-listener-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `connection-listener-property`
properties to be injected in class `specidied` in `connection-listener-class`
get the `datasources` `data-source` `connection-listener-property` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=connection-listener-property)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `connection-listener-property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `connection-url`
the `jdbc` driver connection `url`
get the `datasources` `data-source` `connection-url` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=connection-url)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `connection-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `credential-reference`
credential (from credential store) to authenticate on data source
get the `datasources` `data-source` `credential-reference` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `datasource-class`
the fully qualified name of the `jdbc` `datasource` class
get the `datasources` `data-source` `datasource-class` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=datasource-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `datasource-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `driver-class`
the fully qualified name of the `jdbc` driver class
get the `datasources` `data-source` `driver-class` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=driver-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `driver-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `driver-name`
defines the `jdbc` driver the `datasource` should use. it is a symbolic name matching the the name of installed driver. in case the driver is deployed as a jar, the name is the name of the deployment unit
get the `datasources` `data-source` `driver-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=driver-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `driver-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `elytron-enabled`
enables elytron security for handling authentication of connections. the elytron `authentication-context` to be used will be current context if no context is specified (see `authentication-context`).
get the `datasources` `data-source` `elytron-enabled` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=elytron-enabled)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `elytron-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `enabled`
specifies if the `datasource` should be enabled. note this attribute will not be supported runtime in next versions.
get the `datasources` `data-source` `enabled` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `enlistment-trace`
defines if `wildfly/ironjacamar` should record enlistment traces
get the `datasources` `data-source` `enlistment-trace` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=enlistment-trace)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `enlistment-trace`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `exception-sorter-class-name`
an `org.jboss.jca.adapters.jdbc.exceptionsorter` that provides an `isexceptionfatal(sqlexception`) method to validate if an exception should broadcast an error
get the `datasources` `data-source` `exception-sorter-class-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=exception-sorter-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `exception-sorter-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `exception-sorter-module`
the name of the module which makes the implementation of `org.jboss.jca.adapters.jdbc.exceptionsorter` available
get the `datasources` `data-source` `exception-sorter-module` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=exception-sorter-module)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `exception-sorter-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `exception-sorter-properties`
the exception sorter properties
get the `datasources` `data-source` `exception-sorter-properties` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=exception-sorter-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `exception-sorter-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `flush-strategy`
specifies how the pool should be flush in case of an error.
get the `datasources` `data-source` `flush-strategy` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=flush-strategy)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `flush-strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `idle-timeout-minutes`
the `idle-timeout-minutes` elements specifies the maximum time, in minutes, a connection may be idle before being closed. the actual maximum time depends also on the `idleremover` scan time, which is half of the smallest `idle-timeout-minutes` value of any pool. changing this value can be done only on disabled `datasource`, requires a server restart otherwise.
get the `datasources` `data-source` `idle-timeout-minutes` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=idle-timeout-minutes)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `idle-timeout-minutes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `initial-pool-size`
the `initial-pool-size` element indicates the initial number of connections a pool should hold.
get the `datasources` `data-source` `initial-pool-size` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=initial-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `initial-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `jndi-name`
specifies the `jndi` name for the `datasource`
get the `datasources` `data-source` `jndi-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `jta`
enable jakarta transactions integration
get the `datasources` `data-source` `jta` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=jta)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `jta`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `max-pool-size`
the `max-pool-size` element specifies the maximum number of connections for a pool. no more connections will be created in each `sub-pool`
get the `datasources` `data-source` `max-pool-size` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `mcp`
defines the `managedconnectionpool` implementation, `f.ex`. `org.jboss.jca.core.connectionmanager.pool.mcp.semaphorearraylistmanagedconnectionpool`
get the `datasources` `data-source` `mcp` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=mcp)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `mcp`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `min-pool-size`
the `min-pool-size` element specifies the minimum number of connections for a pool
get the `datasources` `data-source` `min-pool-size` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=min-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `min-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `new-connection-sql`
specifies an `sql` statement to execute whenever a connection is added to the connection pool
get the `datasources` `data-source` `new-connection-sql` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=new-connection-sql)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `new-connection-sql`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `password`
specifies the password used when creating a new connection
get the `datasources` `data-source` `password` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `pool-fair`
defines if pool use should be fair
get the `datasources` `data-source` `pool-fair` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=pool-fair)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `pool-fair`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `pool-prefill`
should the pool be `prefilled`. changing this value can be done only on disabled `datasource`, requires a server restart otherwise.
get the `datasources` `data-source` `pool-prefill` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=pool-prefill)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `pool-prefill`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `pool-use-strict-min`
specifies if the `min-pool-size` should be considered strictly
get the `datasources` `data-source` `pool-use-strict-min` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=pool-use-strict-min)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `pool-use-strict-min`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `prepared-statements-cache-size`
the number of prepared statements per connection in an `lru` cache
get the `datasources` `data-source` `prepared-statements-cache-size` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=prepared-statements-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `prepared-statements-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `query-timeout`
any configured query timeout in seconds. if not provided no timeout will be set
get the `datasources` `data-source` `query-timeout` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=query-timeout)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `query-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `reauth-plugin-class-name`
the fully qualified class name of the reauthentication `plugin` implementation
get the `datasources` `data-source` `reauth-plugin-class-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=reauth-plugin-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `reauth-plugin-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `reauth-plugin-properties`
the properties for the reauthentication `plugin`
get the `datasources` `data-source` `reauth-plugin-properties` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=reauth-plugin-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `reauth-plugin-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `security-domain`
specifies the `picketbox` security domain which defines the `picketbox` `javax.security.auth.subject` that are used to distinguish connections in the pool
get the `datasources` `data-source` `security-domain` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `set-tx-query-timeout`
whether to set the query timeout based on the time remaining until transaction timeout. any configured query timeout will be used if there is no transaction
get the `datasources` `data-source` `set-tx-query-timeout` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=set-tx-query-timeout)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `set-tx-query-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `share-prepared-statements`
whether to share prepared statements, `i.e`. whether asking for same statement twice without closing uses the same underlying prepared statement
get the `datasources` `data-source` `share-prepared-statements` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=share-prepared-statements)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `share-prepared-statements`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `spy`
enable spying of `sql` statements
get the `datasources` `data-source` `spy` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=spy)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `spy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `stale-connection-checker-class-name`
an `org.jboss.jca.adapters.jdbc.staleconnectionchecker` that provides an `isstaleconnection(sqlexception`) method which if it returns true will wrap the exception in an `org.jboss.jca.adapters.jdbc.staleconnectionexception`
get the `datasources` `data-source` `stale-connection-checker-class-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=stale-connection-checker-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `stale-connection-checker-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `stale-connection-checker-module`
the name of the module which makes the implementation of `org.jboss.jca.adapters.jdbc.staleconnectionchecker` available
get the `datasources` `data-source` `stale-connection-checker-module` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=stale-connection-checker-module)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `stale-connection-checker-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `stale-connection-checker-properties`
the stale connection checker properties
get the `datasources` `data-source` `stale-connection-checker-properties` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=stale-connection-checker-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `stale-connection-checker-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `statistics-enabled`
define whether runtime statistics are enabled or not.
get the `datasources` `data-source` `statistics-enabled` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `track-statements`
whether to check for unclosed statements when a connection is returned to the pool, result sets are closed, a statement is closed or return to the prepared statement cache. valid values are: "false" - do not track statements, "true" - track statements and result sets and warn when they are not closed, "`nowarn`" - track statements but do not warn about them being unclosed
get the `datasources` `data-source` `track-statements` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=track-statements)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `track-statements`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `tracking`
defines if `ironjacamar` should track connection handles across transaction boundaries
get the `datasources` `data-source` `tracking` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=tracking)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `tracking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `transaction-isolation`
set the `java.sql.connection` transaction isolation level. valid values are: `transaction_read_uncommitted`, `transaction_read_committed`, `transaction_repeatable_read`, `transaction_serializable` and `transaction_none`. different values are used to set `customlevel` using `transactionisolation#customlevel`
get the `datasources` `data-source` `transaction-isolation` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=transaction-isolation)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `transaction-isolation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `url-delimiter`
specifies the delimiter for `urls` in `connection-url` for ha `datasources`
get the `datasources` `data-source` `url-delimiter` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=url-delimiter)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `url-delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `url-selector-strategy-class-name`
a class that implements `org.jboss.jca.adapters.jdbc.urlselectorstrategy`
get the `datasources` `data-source` `url-selector-strategy-class-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=url-selector-strategy-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `url-selector-strategy-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `use-ccm`
enable the use of a cached connection manager
get the `datasources` `data-source` `use-ccm` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=use-ccm)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `use-ccm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `use-fast-fail`
whether to fail a connection allocation on the first try if it is invalid (true) or keep trying until the pool is exhausted of all potential connections (false)
get the `datasources` `data-source` `use-fast-fail` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=use-fast-fail)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `use-fast-fail`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `use-java-context`
setting this to false will bind the `datasource` into global `jndi`
get the `datasources` `data-source` `use-java-context` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=use-java-context)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `use-java-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `use-try-lock`
any configured timeout for internal locks on the resource adapter objects in seconds
get the `datasources` `data-source` `use-try-lock` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=use-try-lock)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `use-try-lock`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `user-name`
specify the user name used when creating a new connection
get the `datasources` `data-source` `user-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=user-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `user-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `valid-connection-checker-class-name`
an `org.jboss.jca.adapters.jdbc.validconnectionchecker` that provides an `isvalidconnection(connection`) method to validate a connection. if an exception is returned that means the connection is invalid. this overrides the `check-valid-connection-sql` element
get the `datasources` `data-source` `valid-connection-checker-class-name` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=valid-connection-checker-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `valid-connection-checker-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `valid-connection-checker-module`
the name of the module which makes the implementation of `org.jboss.jca.adapters.jdbc.validconnectionchecker` available
get the `datasources` `data-source` `valid-connection-checker-module` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=valid-connection-checker-module)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `valid-connection-checker-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `valid-connection-checker-properties`
the valid connection checker properties
get the `datasources` `data-source` `valid-connection-checker-properties` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=valid-connection-checker-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `valid-connection-checker-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `validate-on-match`
the `validate-on-match` element specifies if connection validation should be done when a connection factory attempts to match a managed connection. this is typically exclusive to the use of background validation
get the `datasources` `data-source` `validate-on-match` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>:read-attribute(name=validate-on-match)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `validate-on-match`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `datasources` `data-source` `connection-properties`
operation: `/subsystem=datasources/data-source=<data-source name>/connection-properties=<connection-properties name>:read-resource()`
To get the list of all the `datasources` `data-source` `connection-properties` use '*' for `<connection-properties name>`." metadata = {parent=, title=syntax of the operation to get a `datasources` `data-source` `connection-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `data-source` `connection-properties` `value`
each `connection-property` specifies a string `name/value` pair with the property name coming from the name attribute and the value coming from the element content
get the `datasources` `data-source` `connection-properties` `value` attribute.
operation: `/subsystem=datasources/data-source=<data-source name>/connection-properties=<connection-properties name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `data-source` `connection-properties` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `datasources` `xa-data-source`
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-resource()`
To get the list of all the `datasources` `xa-data-source` use '*' for `<xa-data-source name>`." metadata = {parent=, title=syntax of the operation to get a `datasources` `xa-data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `allocation-retry`
the allocation retry element indicates the number of times that allocating a connection should be tried before throwing an exception
get the `datasources` `xa-data-source` `allocation-retry` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=allocation-retry)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `allocation-retry`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `allocation-retry-wait-millis`
the allocation retry wait `millis` element specifies the amount of time, in milliseconds, to wait between retrying to allocate a connection
get the `datasources` `xa-data-source` `allocation-retry-wait-millis` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=allocation-retry-wait-millis)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `allocation-retry-wait-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `allow-multiple-users`
specifies if multiple users will access the `datasource` through the `getconnection(user`, password) method and hence if the internal pool type should account for that
get the `datasources` `xa-data-source` `allow-multiple-users` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=allow-multiple-users)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `allow-multiple-users`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `authentication-context`
the elytron authentication context which defines the `javax.security.auth.subject` that is used to distinguish connections in the pool.
get the `datasources` `xa-data-source` `authentication-context` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `background-validation`
an element to specify that connections should be validated on a background thread versus being validated prior to use.
get the `datasources` `xa-data-source` `background-validation` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=background-validation)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `background-validation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `background-validation-millis`
the `background-validation-millis` element specifies the amount of time, in milliseconds, that background validation will run.
get the `datasources` `xa-data-source` `background-validation-millis` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=background-validation-millis)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `background-validation-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `blocking-timeout-wait-millis`
the `blocking-timeout-millis` element specifies the maximum time, in milliseconds, to block while waiting for a connection before throwing an exception. note that this blocks only while waiting for locking a connection, and will never throw an exception if creating a new connection takes an inordinately long time
get the `datasources` `xa-data-source` `blocking-timeout-wait-millis` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=blocking-timeout-wait-millis)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `blocking-timeout-wait-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `capacity-decrementer-class`
class defining the policy for decrementing connections in the pool
get the `datasources` `xa-data-source` `capacity-decrementer-class` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=capacity-decrementer-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `capacity-decrementer-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `capacity-decrementer-properties`
properties to inject in class defining the policy for decrementing connections in the pool
get the `datasources` `xa-data-source` `capacity-decrementer-properties` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=capacity-decrementer-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `capacity-decrementer-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `capacity-incrementer-class`
class defining the policy for incrementing connections in the pool
get the `datasources` `xa-data-source` `capacity-incrementer-class` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=capacity-incrementer-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `capacity-incrementer-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `capacity-incrementer-properties`
properties to inject in class defining the policy for incrementing connections in the pool
get the `datasources` `xa-data-source` `capacity-incrementer-properties` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=capacity-incrementer-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `capacity-incrementer-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `check-valid-connection-sql`
specify an `sql` statement to check validity of a pool connection. this may be called when managed connection is obtained from the pool
get the `datasources` `xa-data-source` `check-valid-connection-sql` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=check-valid-connection-sql)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `check-valid-connection-sql`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `connectable`
enable the use of `cmr` for this `datasource`. this feature means that a local resource can reliably participate in an `xa` transaction.
get the `datasources` `xa-data-source` `connectable` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=connectable)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `connectable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `connection-listener-class`
`speciefies` class name extending `org.jboss.jca.adapters.jdbc.spi.listener.connectionlistener` that provides a possible to listen for connection activation and passivation in order to perform actions before the connection is returned to the application or returned to the pool.
get the `datasources` `xa-data-source` `connection-listener-class` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=connection-listener-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `connection-listener-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `connection-listener-property`
properties to be injected in class specified in `connection-listener-class`
get the `datasources` `xa-data-source` `connection-listener-property` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=connection-listener-property)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `connection-listener-property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `credential-reference`
credential (from credential store) to authenticate on data source
get the `datasources` `xa-data-source` `credential-reference` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `driver-name`
defines the `jdbc` driver the `datasource` should use. it is a symbolic name matching the the name of installed driver. in case the driver is deployed as a jar, the name is the name of the deployment unit
get the `datasources` `xa-data-source` `driver-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=driver-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `driver-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `elytron-enabled`
enables elytron security for handling authentication of connections for recovery. the elytron `authentication-context` to be used will be current context if no context is specified (see `authentication-context`).
get the `datasources` `xa-data-source` `elytron-enabled` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=elytron-enabled)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `elytron-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `enabled`
specifies if the `datasource` should be enabled. note this attribute will not be supported runtime in next versions.
get the `datasources` `xa-data-source` `enabled` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `enlistment-trace`
defines if `wildfly/ironjacamar` should record enlistment traces
get the `datasources` `xa-data-source` `enlistment-trace` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=enlistment-trace)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `enlistment-trace`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `exception-sorter-class-name`
an `org.jboss.jca.adapters.jdbc.exceptionsorter` that provides an `isexceptionfatal(sqlexception`) method to validate if an exception should broadcast an error
get the `datasources` `xa-data-source` `exception-sorter-class-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=exception-sorter-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `exception-sorter-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `exception-sorter-module`
the name of the module which makes the implementation of `org.jboss.jca.adapters.jdbc.exceptionsorter` available
get the `datasources` `xa-data-source` `exception-sorter-module` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=exception-sorter-module)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `exception-sorter-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `exception-sorter-properties`
the exception sorter properties
get the `datasources` `xa-data-source` `exception-sorter-properties` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=exception-sorter-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `exception-sorter-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `flush-strategy`
specifies how the pool should be flush in case of an error.
get the `datasources` `xa-data-source` `flush-strategy` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=flush-strategy)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `flush-strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `idle-timeout-minutes`
the `idle-timeout-minutes` elements specifies the maximum time, in minutes, a connection may be idle before being closed. the actual maximum time depends also on the `idleremover` scan time, which is half of the smallest `idle-timeout-minutes` value of any pool. changing this value can be done only on disabled `datasource`, requires a server restart otherwise.
get the `datasources` `xa-data-source` `idle-timeout-minutes` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=idle-timeout-minutes)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `idle-timeout-minutes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `initial-pool-size`
the `initial-pool-size` element indicates the initial number of connections a pool should hold.
get the `datasources` `xa-data-source` `initial-pool-size` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=initial-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `initial-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `interleaving`
an element to enable interleaving for `xa` connections
get the `datasources` `xa-data-source` `interleaving` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=interleaving)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `interleaving`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `jndi-name`
specifies the `jndi` name for the `datasource`
get the `datasources` `xa-data-source` `jndi-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `max-pool-size`
the `max-pool-size` element specifies the maximum number of connections for a pool. no more connections will be created in each `sub-pool`
get the `datasources` `xa-data-source` `max-pool-size` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `mcp`
defines the `managedconnectionpool` implementation, `f.ex`. `org.jboss.jca.core.connectionmanager.pool.mcp.semaphorearraylistmanagedconnectionpool`
get the `datasources` `xa-data-source` `mcp` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=mcp)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `mcp`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `min-pool-size`
the `min-pool-size` element specifies the minimum number of connections for a pool
get the `datasources` `xa-data-source` `min-pool-size` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=min-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `min-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `new-connection-sql`
specifies an `sql` statement to execute whenever a connection is added to the connection pool
get the `datasources` `xa-data-source` `new-connection-sql` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=new-connection-sql)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `new-connection-sql`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `no-recovery`
specifies if the connection pool should be excluded from recovery
get the `datasources` `xa-data-source` `no-recovery` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=no-recovery)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `no-recovery`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `no-tx-separate-pool`
oracle does not like `xa` connections getting used both inside and outside a jakarta transactions transaction. to `workaround` the problem you can create separate `sub-pools` for the different contexts
get the `datasources` `xa-data-source` `no-tx-separate-pool` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=no-tx-separate-pool)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `no-tx-separate-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `pad-xid`
should the `xid` be padded
get the `datasources` `xa-data-source` `pad-xid` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=pad-xid)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `pad-xid`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `password`
specifies the password used when creating a new connection
get the `datasources` `xa-data-source` `password` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `pool-fair`
defines if pool use should be fair
get the `datasources` `xa-data-source` `pool-fair` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=pool-fair)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `pool-fair`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `pool-prefill`
should the pool be `prefilled`. changing this value can be done only on disabled `datasource`, requires a server restart otherwise.
get the `datasources` `xa-data-source` `pool-prefill` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=pool-prefill)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `pool-prefill`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `pool-use-strict-min`
specifies if the `min-pool-size` should be considered strictly
get the `datasources` `xa-data-source` `pool-use-strict-min` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=pool-use-strict-min)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `pool-use-strict-min`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `prepared-statements-cache-size`
the number of prepared statements per connection in an `lru` cache
get the `datasources` `xa-data-source` `prepared-statements-cache-size` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=prepared-statements-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `prepared-statements-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `query-timeout`
any configured query timeout in seconds. if not provided no timeout will be set
get the `datasources` `xa-data-source` `query-timeout` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=query-timeout)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `query-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `reauth-plugin-class-name`
the fully qualified class name of the reauthentication `plugin` implementation
get the `datasources` `xa-data-source` `reauth-plugin-class-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=reauth-plugin-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `reauth-plugin-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `reauth-plugin-properties`
the properties for the reauthentication `plugin`
get the `datasources` `xa-data-source` `reauth-plugin-properties` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=reauth-plugin-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `reauth-plugin-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-authentication-context`
the elytron authentication context which defines the `javax.security.auth.subject` that is used to distinguish connections in the pool.
get the `datasources` `xa-data-source` `recovery-authentication-context` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-credential-reference`
credential (from credential store) to authenticate on data source
get the `datasources` `xa-data-source` `recovery-credential-reference` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-elytron-enabled`
enables elytron security for handling authentication of connections for recovery. the elytron `authentication-context` to be used will be current context if no context is specified (see `authentication-context`).
get the `datasources` `xa-data-source` `recovery-elytron-enabled` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-elytron-enabled)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-elytron-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-password`
the password used for recovery
get the `datasources` `xa-data-source` `recovery-password` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-password)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-plugin-class-name`
the fully qualified class name of the recovery `plugin` implementation
get the `datasources` `xa-data-source` `recovery-plugin-class-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-plugin-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-plugin-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-plugin-properties`
the properties for the recovery `plugin`
get the `datasources` `xa-data-source` `recovery-plugin-properties` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-plugin-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-plugin-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-security-domain`
the security domain used for recovery
get the `datasources` `xa-data-source` `recovery-security-domain` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-security-domain)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `recovery-username`
the user name used for recovery
get the `datasources` `xa-data-source` `recovery-username` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=recovery-username)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `recovery-username`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `same-rm-override`
the `is-same-rm-override` element allows one to unconditionally set whether the `javax.transaction.xa.xaresource.issamerm(xaresource`) returns true or false
get the `datasources` `xa-data-source` `same-rm-override` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=same-rm-override)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `same-rm-override`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `security-domain`
specifies the `picketbox` security domain which defines the `javax.security.auth.subject` that are used to distinguish connections in the pool
get the `datasources` `xa-data-source` `security-domain` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `set-tx-query-timeout`
whether to set the query timeout based on the time remaining until transaction timeout. any configured query timeout will be used if there is no transaction
get the `datasources` `xa-data-source` `set-tx-query-timeout` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=set-tx-query-timeout)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `set-tx-query-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `share-prepared-statements`
whether to share prepared statements, `i.e`. whether asking for same statement twice without closing uses the same underlying prepared statement
get the `datasources` `xa-data-source` `share-prepared-statements` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=share-prepared-statements)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `share-prepared-statements`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `spy`
enable spying of `sql` statements
get the `datasources` `xa-data-source` `spy` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=spy)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `spy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `stale-connection-checker-class-name`
an `org.jboss.jca.adapters.jdbc.staleconnectionchecker` that provides an `isstaleconnection(sqlexception`) method which if it returns true will wrap the exception in an `org.jboss.jca.adapters.jdbc.staleconnectionexception`
get the `datasources` `xa-data-source` `stale-connection-checker-class-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=stale-connection-checker-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `stale-connection-checker-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `stale-connection-checker-module`
the name of the module which makes the implementation of `org.jboss.jca.adapters.jdbc.staleconnectionchecker` available
get the `datasources` `xa-data-source` `stale-connection-checker-module` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=stale-connection-checker-module)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `stale-connection-checker-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `stale-connection-checker-properties`
the stale connection checker properties
get the `datasources` `xa-data-source` `stale-connection-checker-properties` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=stale-connection-checker-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `stale-connection-checker-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `statistics-enabled`
define whether runtime statistics are enabled or not.
get the `datasources` `xa-data-source` `statistics-enabled` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `track-statements`
whether to check for unclosed statements when a connection is returned to the pool, result sets are closed, a statement is closed or return to the prepared statement cache. valid values are: "false" - do not track statements, "true" - track statements and result sets and warn when they are not closed, "`nowarn`" - track statements but do not warn about them being unclosed
get the `datasources` `xa-data-source` `track-statements` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=track-statements)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `track-statements`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `tracking`
defines if `ironjacamar` should track connection handles across transaction boundaries
get the `datasources` `xa-data-source` `tracking` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=tracking)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `tracking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `transaction-isolation`
set the `java.sql.connection` transaction isolation level. valid values are: `transaction_read_uncommitted`, `transaction_read_committed`, `transaction_repeatable_read`, `transaction_serializable` and `transaction_none`. different values are used to set `customlevel` using `transactionisolation#customlevel`.
get the `datasources` `xa-data-source` `transaction-isolation` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=transaction-isolation)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `transaction-isolation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `url-delimiter`
specifies the delimiter for `urls` in `connection-url` for ha `datasources`
get the `datasources` `xa-data-source` `url-delimiter` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=url-delimiter)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `url-delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `url-property`
specifies the property for the `url` property in the `xa-datasource-property` values
get the `datasources` `xa-data-source` `url-property` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=url-property)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `url-property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `url-selector-strategy-class-name`
a class that implements `org.jboss.jca.adapters.jdbc.urlselectorstrategy`
get the `datasources` `xa-data-source` `url-selector-strategy-class-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=url-selector-strategy-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `url-selector-strategy-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `use-ccm`
enable the use of a cached connection manager
get the `datasources` `xa-data-source` `use-ccm` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=use-ccm)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `use-ccm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `use-fast-fail`
whether to fail a connection allocation on the first try if it is invalid (true) or keep trying until the pool is exhausted of all potential connections (false)
get the `datasources` `xa-data-source` `use-fast-fail` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=use-fast-fail)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `use-fast-fail`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `use-java-context`
setting this to false will bind the `datasource` into global `jndi`
get the `datasources` `xa-data-source` `use-java-context` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=use-java-context)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `use-java-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `use-try-lock`
any configured timeout for internal locks on the resource adapter objects in seconds
get the `datasources` `xa-data-source` `use-try-lock` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=use-try-lock)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `use-try-lock`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `user-name`
specify the user name used when creating a new connection
get the `datasources` `xa-data-source` `user-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=user-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `user-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `valid-connection-checker-class-name`
an `org.jboss.jca.adapters.jdbc.validconnectionchecker` that provides an `isvalidconnection(connection`) method to validate a connection. if an exception is returned that means the connection is invalid. this overrides the `check-valid-connection-sql` element
get the `datasources` `xa-data-source` `valid-connection-checker-class-name` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=valid-connection-checker-class-name)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `valid-connection-checker-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `valid-connection-checker-module`
the name of the module which makes the implementation of `org.jboss.jca.adapters.jdbc.validconnectionchecker` available
get the `datasources` `xa-data-source` `valid-connection-checker-module` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=valid-connection-checker-module)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `valid-connection-checker-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `valid-connection-checker-properties`
the valid connection checker properties
get the `datasources` `xa-data-source` `valid-connection-checker-properties` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=valid-connection-checker-properties)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `valid-connection-checker-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `validate-on-match`
the `validate-on-match` element specifies if connection validation should be done when a connection factory attempts to match a managed connection. this is typically exclusive to the use of background validation
get the `datasources` `xa-data-source` `validate-on-match` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=validate-on-match)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `validate-on-match`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `wrap-xa-resource`
should the `xaresource` instances be wrapped in an `org.jboss.tm.xaresourcewrapper` instance
get the `datasources` `xa-data-source` `wrap-xa-resource` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=wrap-xa-resource)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `wrap-xa-resource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `xa-datasource-class`
the fully qualified name of the `javax.sql.xadatasource` implementation
get the `datasources` `xa-data-source` `xa-datasource-class` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=xa-datasource-class)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `xa-datasource-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `xa-resource-timeout`
the value is passed to `xaresource.settransactiontimeout`(), in seconds. default is zero
get the `datasources` `xa-data-source` `xa-resource-timeout` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>:read-attribute(name=xa-resource-timeout)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `xa-resource-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `datasources` `xa-data-source` `xa-datasource-properties`
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>/xa-datasource-properties=<xa-datasource-properties name>:read-resource()`
To get the list of all the `datasources` `xa-data-source` `xa-datasource-properties` use '*' for `<xa-datasource-properties name>`." metadata = {parent=, title=syntax of the operation to get a `datasources` `xa-data-source` `xa-datasource-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `datasources` `xa-data-source` `xa-datasource-properties` `value`
specifies a property value to assign to the `xadatasource` implementation class. each property is identified by the name attribute and the property value is given by the `xa-datasource-property` element content. the property is mapped onto the `xadatasource` implementation by looking for a `javabeans` style getter method for the property name. if found, the value of the property is set using the `javabeans` setter with the element text translated to the true property type using the `java.beans.propertyeditor`
get the `datasources` `xa-data-source` `xa-datasource-properties` `value` attribute.
operation: `/subsystem=datasources/xa-data-source=<xa-data-source name>/xa-datasource-properties=<xa-datasource-properties name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `datasources` `xa-data-source` `xa-datasource-properties` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `add-logging-api-dependencies`
indicates whether or not logging `api` dependencies should be added to deployments during the deployment process. a value of true will add the dependencies to the deployment. a value of false will skip the deployment from being processed for logging `api` dependencies.
get the `logging` `add-logging-api-dependencies` attribute.
operation: `/subsystem=logging:read-attribute(name=add-logging-api-dependencies)`" metadata = {parent=, title=syntax of the operation to get the `logging` `add-logging-api-dependencies`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `use-deployment-logging-config`
indicates whether or not deployments should use a logging configuration file found in the deployment to configure the log manager. if set to true and a logging configuration file is found in the `deployment's` `meta-inf` or `web-inf/classes` directory, then a log manager will be configured with those settings. if set to false, the `server's` logging configuration will be used regardless of any logging configuration files supplied in the deployment.
get the `logging` `use-deployment-logging-config` attribute.
operation: `/subsystem=logging:read-attribute(name=use-deployment-logging-config)`" metadata = {parent=, title=syntax of the operation to get the `logging` `use-deployment-logging-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `periodic-rotating-file-handler`
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-resource()`
To get the list of all the `logging` `periodic-rotating-file-handler` use '*' for `<periodic-rotating-file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `periodic-rotating-file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `append`
specify whether to append to the target file.
get the `logging` `periodic-rotating-file-handler` `append` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `autoflush`
automatically flush after each write.
get the `logging` `periodic-rotating-file-handler` `autoflush` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `periodic-rotating-file-handler` `enabled` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `periodic-rotating-file-handler` `encoding` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `periodic-rotating-file-handler` `file` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `filter`
defines a simple filter type.
get the `logging` `periodic-rotating-file-handler` `filter` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `periodic-rotating-file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `periodic-rotating-file-handler` `formatter` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `periodic-rotating-file-handler` `level` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `name`
the name of the handler.
get the `logging` `periodic-rotating-file-handler` `name` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `periodic-rotating-file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-rotating-file-handler` `suffix`
set the suffix string.  the string is in a format which can be understood by `java.text.simpledateformat`. the period of the rotation is automatically calculated based on the suffix.
get the `logging` `periodic-rotating-file-handler` `suffix` attribute.
operation: `/subsystem=logging/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-rotating-file-handler` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `json-formatter`
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-resource()`
To get the list of all the `logging` `json-formatter` use '*' for `<json-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `json-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `date-format`
the `date/time` format pattern. the pattern must be a valid `java.time.format.datetimeformatter.ofpattern`() pattern. the default pattern is an `iso-8601` extended offset `date-time` format.
get the `logging` `json-formatter` `date-format` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=date-format)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `date-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `exception-output-type`
indicates how the cause of the logged message, if one is available, will be added to the `json` output.
get the `logging` `json-formatter` `exception-output-type` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=exception-output-type)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `exception-output-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `key-overrides`
allows the names of the keys for the `json` properties to be overridden.
get the `logging` `json-formatter` `key-overrides` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=key-overrides)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `key-overrides`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `meta-data`
sets the meta data to use in the `json` format. properties will be added to each log message.
get the `logging` `json-formatter` `meta-data` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=meta-data)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `meta-data`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `pretty-print`
indicates whether or not pretty printing should be used when formatting.
get the `logging` `json-formatter` `pretty-print` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=pretty-print)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `pretty-print`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `print-details`
sets whether or not details should be printed. printing the details can be expensive as the values are retrieved from the caller. the details include the source class name, source file name, source method name, source module name, source module version and source line number.
get the `logging` `json-formatter` `print-details` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=print-details)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `print-details`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `record-delimiter`
the value to be used to indicate the end of a record. if set to null no delimiter will be used at the end of the record. the default value is a line feed.
get the `logging` `json-formatter` `record-delimiter` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=record-delimiter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `record-delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `json-formatter` `zone-id`
the zone id for formatting the date and time. the system default is used if left undefined.
get the `logging` `json-formatter` `zone-id` attribute.
operation: `/subsystem=logging/json-formatter=<json-formatter name>:read-attribute(name=zone-id)`" metadata = {parent=, title=syntax of the operation to get the `logging` `json-formatter` `zone-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `socket-handler`
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-resource()`
To get the list of all the `logging` `socket-handler` use '*' for `<socket-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `socket-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `autoflush`
automatically flush after each write.
get the `logging` `socket-handler` `autoflush` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `block-on-reconnect`
if set to true the write methods will block when attempting to reconnect. this is only advisable to be set to true if using an asynchronous handler.
get the `logging` `socket-handler` `block-on-reconnect` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=block-on-reconnect)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `block-on-reconnect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `socket-handler` `enabled` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `encoding`
the character encoding used by this handler.
get the `logging` `socket-handler` `encoding` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `socket-handler` `filter-spec` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `socket-handler` `level` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `socket-handler` `named-formatter` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `outbound-socket-binding-ref`
outbound socket reference for the socket connection.
get the `logging` `socket-handler` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `protocol`
the protocol the socket should communicate over.
get the `logging` `socket-handler` `protocol` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `socket-handler` `ssl-context`
the reference to the defined `ssl` context. this is only used if the protocol is set to `ssl_tcp`.
get the `logging` `socket-handler` `ssl-context` attribute.
operation: `/subsystem=logging/socket-handler=<socket-handler name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `logging` `socket-handler` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `periodic-size-rotating-file-handler`
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-resource()`
To get the list of all the `logging` `periodic-size-rotating-file-handler` use '*' for `<periodic-size-rotating-file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `periodic-size-rotating-file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `append`
specify whether to append to the target file.
get the `logging` `periodic-size-rotating-file-handler` `append` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `autoflush`
automatically flush after each write.
get the `logging` `periodic-size-rotating-file-handler` `autoflush` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `periodic-size-rotating-file-handler` `enabled` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `periodic-size-rotating-file-handler` `encoding` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `periodic-size-rotating-file-handler` `file` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `periodic-size-rotating-file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `periodic-size-rotating-file-handler` `formatter` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `periodic-size-rotating-file-handler` `level` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `max-backup-index`
the maximum number of backups to keep.
get the `logging` `periodic-size-rotating-file-handler` `max-backup-index` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=max-backup-index)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `max-backup-index`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `name`
the name of the handler.
get the `logging` `periodic-size-rotating-file-handler` `name` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `periodic-size-rotating-file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `rotate-on-boot`
indicates the file should be rotated each time the file attribute is changed. this always happens when at initialization time.
get the `logging` `periodic-size-rotating-file-handler` `rotate-on-boot` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=rotate-on-boot)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `rotate-on-boot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `rotate-size`
the size at which to rotate the log file.
get the `logging` `periodic-size-rotating-file-handler` `rotate-size` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=rotate-size)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `rotate-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `suffix`
set the suffix string.  the string is in a format which can be understood by `java.text.simpledateformat`. the period of the rotation is automatically calculated based on the suffix.
get the `logging` `periodic-size-rotating-file-handler` `suffix` attribute.
operation: `/subsystem=logging/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `logging` `periodic-size-rotating-file-handler` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `async-handler`
operation: `/subsystem=logging/async-handler=<async-handler name>:read-resource()`
To get the list of all the `logging` `async-handler` use '*' for `<async-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `async-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `async-handler` `enabled` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `filter`
defines a simple filter type.
get the `logging` `async-handler` `filter` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `async-handler` `filter-spec` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `level`
the log level specifying which message levels will be logged by this handler. message levels lower than this value will be discarded.
get the `logging` `async-handler` `level` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `name`
the name of the handler.
get the `logging` `async-handler` `name` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `overflow-action`
specify what action to take when the overflowing.  the valid options are 'block' and 'discard'
get the `logging` `async-handler` `overflow-action` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=overflow-action)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `overflow-action`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `queue-length`
the queue length to use before flushing writing
get the `logging` `async-handler` `queue-length` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `async-handler` `subhandlers`
the handlers associated with this async handler.
get the `logging` `async-handler` `subhandlers` attribute.
operation: `/subsystem=logging/async-handler=<async-handler name>:read-attribute(name=subhandlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `async-handler` `subhandlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `syslog-handler`
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-resource()`
To get the list of all the `logging` `syslog-handler` use '*' for `<syslog-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `syslog-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `app-name`
the app name used when formatting the message in `rfc5424` format. by default the app name is "java".
get the `logging` `syslog-handler` `app-name` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=app-name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `app-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `syslog-handler` `enabled` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `facility`
facility as defined by `rfc-5424` (`http://tools.ietf.org/html/rfc5424)and` `rfc-3164` (`http://tools.ietf.org/html/rfc3164`).
get the `logging` `syslog-handler` `facility` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=facility)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `facility`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `hostname`
the name of the host the messages are being sent from. for example the name of the host the application server is running on.
get the `logging` `syslog-handler` `hostname` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=hostname)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `hostname`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `syslog-handler` `level` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `syslog-handler` `named-formatter` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `port`
the port the `syslog` server is listening on.
get the `logging` `syslog-handler` `port` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=port)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `server-address`
the address of the `syslog` server.
get the `logging` `syslog-handler` `server-address` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=server-address)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `server-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `syslog-handler` `syslog-format`
formats the log message according to the `rfc` specification.
get the `logging` `syslog-handler` `syslog-format` attribute.
operation: `/subsystem=logging/syslog-handler=<syslog-handler name>:read-attribute(name=syslog-format)`" metadata = {parent=, title=syntax of the operation to get the `logging` `syslog-handler` `syslog-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `file-handler`
operation: `/subsystem=logging/file-handler=<file-handler name>:read-resource()`
To get the list of all the `logging` `file-handler` use '*' for `<file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `append`
specify whether to append to the target file.
get the `logging` `file-handler` `append` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `autoflush`
automatically flush after each write.
get the `logging` `file-handler` `autoflush` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `file-handler` `enabled` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `file-handler` `encoding` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `file-handler` `file` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `filter`
defines a simple filter type.
get the `logging` `file-handler` `filter` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `file-handler` `formatter` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `file-handler` `level` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `name`
the name of the handler.
get the `logging` `file-handler` `name` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/file-handler=<file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `root-logger` `ROOT` `filter`
defines a simple filter type.
get the `logging` `root-logger` `ROOT` `filter` attribute.
operation: `/subsystem=logging/root-logger=ROOT:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `root-logger` `ROOT` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `root-logger` `ROOT` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `root-logger` `ROOT` `filter-spec` attribute.
operation: `/subsystem=logging/root-logger=ROOT:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `root-logger` `ROOT` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `root-logger` `ROOT` `handlers`
the handlers associated with the root logger.
get the `logging` `root-logger` `ROOT` `handlers` attribute.
operation: `/subsystem=logging/root-logger=ROOT:read-attribute(name=handlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `root-logger` `ROOT` `handlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `root-logger` `ROOT` `level`
the log level specifying which message levels will be logged by the root logger. message levels lower than this value will be discarded.
get the `logging` `root-logger` `ROOT` `level` attribute.
operation: `/subsystem=logging/root-logger=ROOT:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `root-logger` `ROOT` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile`
operation: `/subsystem=logging/logging-profile=<logging-profile name>:read-resource()`
To get the list of all the `logging` `logging-profile` use '*' for `<logging-profile name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `periodic-rotating-file-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `periodic-rotating-file-handler` use '*' for `<periodic-rotating-file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `periodic-rotating-file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `append`
specify whether to append to the target file.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `append` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `autoflush`
automatically flush after each write.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `autoflush` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `encoding` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `file` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `periodic-rotating-file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `name`
the name of the handler.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `suffix`
set the suffix string.  the string is in a format which can be understood by `java.text.simpledateformat`. the period of the rotation is automatically calculated based on the suffix.
get the `logging` `logging-profile` `periodic-rotating-file-handler` `suffix` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-rotating-file-handler=<periodic-rotating-file-handler name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-rotating-file-handler` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `json-formatter`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-resource()`
To get the list of all the `logging` `logging-profile` `json-formatter` use '*' for `<json-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `json-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `date-format`
the `date/time` format pattern. the pattern must be a valid `java.time.format.datetimeformatter.ofpattern`() pattern. the default pattern is an `iso-8601` extended offset `date-time` format.
get the `logging` `logging-profile` `json-formatter` `date-format` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=date-format)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `date-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `exception-output-type`
indicates how the cause of the logged message, if one is available, will be added to the `json` output.
get the `logging` `logging-profile` `json-formatter` `exception-output-type` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=exception-output-type)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `exception-output-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `key-overrides`
allows the names of the keys for the `json` properties to be overridden.
get the `logging` `logging-profile` `json-formatter` `key-overrides` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=key-overrides)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `key-overrides`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `meta-data`
sets the meta data to use in the `json` format. properties will be added to each log message.
get the `logging` `logging-profile` `json-formatter` `meta-data` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=meta-data)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `meta-data`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `pretty-print`
indicates whether or not pretty printing should be used when formatting.
get the `logging` `logging-profile` `json-formatter` `pretty-print` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=pretty-print)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `pretty-print`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `print-details`
sets whether or not details should be printed. printing the details can be expensive as the values are retrieved from the caller. the details include the source class name, source file name, source method name, source module name, source module version and source line number.
get the `logging` `logging-profile` `json-formatter` `print-details` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=print-details)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `print-details`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `record-delimiter`
the value to be used to indicate the end of a record. if set to null no delimiter will be used at the end of the record. the default value is a line feed.
get the `logging` `logging-profile` `json-formatter` `record-delimiter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=record-delimiter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `record-delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `json-formatter` `zone-id`
the zone id for formatting the date and time. the system default is used if left undefined.
get the `logging` `logging-profile` `json-formatter` `zone-id` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/json-formatter=<json-formatter name>:read-attribute(name=zone-id)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `json-formatter` `zone-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `socket-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `socket-handler` use '*' for `<socket-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `socket-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `autoflush`
automatically flush after each write.
get the `logging` `logging-profile` `socket-handler` `autoflush` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `block-on-reconnect`
if set to true the write methods will block when attempting to reconnect. this is only advisable to be set to true if using an asynchronous handler.
get the `logging` `logging-profile` `socket-handler` `block-on-reconnect` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=block-on-reconnect)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `block-on-reconnect`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `socket-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `encoding`
the character encoding used by this handler.
get the `logging` `logging-profile` `socket-handler` `encoding` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `socket-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `socket-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `socket-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `outbound-socket-binding-ref`
outbound socket reference for the socket connection.
get the `logging` `logging-profile` `socket-handler` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `protocol`
the protocol the socket should communicate over.
get the `logging` `logging-profile` `socket-handler` `protocol` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `socket-handler` `ssl-context`
the reference to the defined `ssl` context. this is only used if the protocol is set to `ssl_tcp`.
get the `logging` `logging-profile` `socket-handler` `ssl-context` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/socket-handler=<socket-handler name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `socket-handler` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `periodic-size-rotating-file-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `periodic-size-rotating-file-handler` use '*' for `<periodic-size-rotating-file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `periodic-size-rotating-file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `append`
specify whether to append to the target file.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `append` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `autoflush`
automatically flush after each write.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `autoflush` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `encoding` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `file` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `max-backup-index`
the maximum number of backups to keep.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `max-backup-index` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=max-backup-index)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `max-backup-index`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `name`
the name of the handler.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `rotate-on-boot`
indicates the file should be rotated each time the file attribute is changed. this always happens when at initialization time.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `rotate-on-boot` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=rotate-on-boot)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `rotate-on-boot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `rotate-size`
the size at which to rotate the log file.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `rotate-size` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=rotate-size)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `rotate-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `suffix`
set the suffix string.  the string is in a format which can be understood by `java.text.simpledateformat`. the period of the rotation is automatically calculated based on the suffix.
get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `suffix` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/periodic-size-rotating-file-handler=<periodic-size-rotating-file-handler name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `periodic-size-rotating-file-handler` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `async-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `async-handler` use '*' for `<async-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `async-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `async-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `async-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `async-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `async-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `async-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `async-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `async-handler` `level`
the log level specifying which message levels will be logged by this handler. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `async-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `async-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `async-handler` `name`
the name of the handler.
get the `logging` `logging-profile` `async-handler` `name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `async-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `async-handler` `overflow-action`
specify what action to take when the overflowing.  the valid options are 'block' and 'discard'
get the `logging` `logging-profile` `async-handler` `overflow-action` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-attribute(name=overflow-action)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `async-handler` `overflow-action`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `async-handler` `queue-length`
the queue length to use before flushing writing
get the `logging` `logging-profile` `async-handler` `queue-length` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `async-handler` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `async-handler` `subhandlers`
the handlers associated with this async handler.
get the `logging` `logging-profile` `async-handler` `subhandlers` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/async-handler=<async-handler name>:read-attribute(name=subhandlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `async-handler` `subhandlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `syslog-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `syslog-handler` use '*' for `<syslog-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `syslog-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `app-name`
the app name used when formatting the message in `rfc5424` format. by default the app name is "java".
get the `logging` `logging-profile` `syslog-handler` `app-name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=app-name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `app-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `syslog-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `facility`
facility as defined by `rfc-5424` (`http://tools.ietf.org/html/rfc5424)and` `rfc-3164` (`http://tools.ietf.org/html/rfc3164`).
get the `logging` `logging-profile` `syslog-handler` `facility` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=facility)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `facility`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `hostname`
the name of the host the messages are being sent from. for example the name of the host the application server is running on.
get the `logging` `logging-profile` `syslog-handler` `hostname` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=hostname)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `hostname`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `syslog-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `syslog-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `port`
the port the `syslog` server is listening on.
get the `logging` `logging-profile` `syslog-handler` `port` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=port)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `server-address`
the address of the `syslog` server.
get the `logging` `logging-profile` `syslog-handler` `server-address` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=server-address)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `server-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `syslog-format`
formats the log message according to the `rfc` specification.
get the `logging` `logging-profile` `syslog-handler` `syslog-format` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/syslog-handler=<syslog-handler name>:read-attribute(name=syslog-format)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `syslog-handler` `syslog-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `file-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `file-handler` use '*' for `<file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `append`
specify whether to append to the target file.
get the `logging` `logging-profile` `file-handler` `append` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `autoflush`
automatically flush after each write.
get the `logging` `logging-profile` `file-handler` `autoflush` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `file-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `logging-profile` `file-handler` `encoding` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `logging-profile` `file-handler` `file` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `logging-profile` `file-handler` `formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `file-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `name`
the name of the handler.
get the `logging` `logging-profile` `file-handler` `name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/file-handler=<file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `root-logger` `ROOT` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `root-logger` `ROOT` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/root-logger=ROOT:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `root-logger` `ROOT` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `root-logger` `ROOT` `handlers`
the handlers associated with the root logger.
get the `logging` `logging-profile` `root-logger` `ROOT` `handlers` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/root-logger=ROOT:read-attribute(name=handlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `root-logger` `ROOT` `handlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `root-logger` `ROOT` `level`
the log level specifying which message levels will be logged by the root logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `root-logger` `ROOT` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/root-logger=ROOT:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `root-logger` `ROOT` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `custom-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `custom-handler` use '*' for `<custom-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `custom-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `class`
the logging handler class to be used.
get the `logging` `logging-profile` `custom-handler` `class` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `custom-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `encoding`
the character encoding used by this handler.
get the `logging` `logging-profile` `custom-handler` `encoding` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `custom-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `logging-profile` `custom-handler` `formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `custom-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `module`
the module that the logging handler depends on.
get the `logging` `logging-profile` `custom-handler` `module` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `name`
the name of the handler.
get the `logging` `logging-profile` `custom-handler` `name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `custom-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-handler` `properties`
defines the properties used for the logging handler. all properties must be accessible via a setter method.
get the `logging` `logging-profile` `custom-handler` `properties` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-handler=<custom-handler name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-handler` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `size-rotating-file-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `size-rotating-file-handler` use '*' for `<size-rotating-file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `size-rotating-file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `append`
specify whether to append to the target file.
get the `logging` `logging-profile` `size-rotating-file-handler` `append` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `autoflush`
automatically flush after each write.
get the `logging` `logging-profile` `size-rotating-file-handler` `autoflush` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `size-rotating-file-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `logging-profile` `size-rotating-file-handler` `encoding` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `logging-profile` `size-rotating-file-handler` `file` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `size-rotating-file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `logging-profile` `size-rotating-file-handler` `formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `size-rotating-file-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `max-backup-index`
the maximum number of backups to keep.
get the `logging` `logging-profile` `size-rotating-file-handler` `max-backup-index` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=max-backup-index)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `max-backup-index`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `name`
the name of the handler.
get the `logging` `logging-profile` `size-rotating-file-handler` `name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `size-rotating-file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `rotate-on-boot`
indicates the file should be rotated each time the file attribute is changed. this always happens when at initialization time.
get the `logging` `logging-profile` `size-rotating-file-handler` `rotate-on-boot` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=rotate-on-boot)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `rotate-on-boot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `rotate-size`
the size at which to rotate the log file.
get the `logging` `logging-profile` `size-rotating-file-handler` `rotate-size` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=rotate-size)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `rotate-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `suffix`
set the suffix string. the string is in a format which can be understood by `java.text.simpledateformat`. the suffix does not determine when the file should be rotated.
get the `logging` `logging-profile` `size-rotating-file-handler` `suffix` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `size-rotating-file-handler` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `console-handler`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-resource()`
To get the list of all the `logging` `logging-profile` `console-handler` use '*' for `<console-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `console-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `autoflush`
automatically flush after each write.
get the `logging` `logging-profile` `console-handler` `autoflush` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `logging-profile` `console-handler` `enabled` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `encoding`
the character encoding used by this handler.
get the `logging` `logging-profile` `console-handler` `encoding` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `console-handler` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `logging-profile` `console-handler` `formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `console-handler` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `name`
the name of the handler.
get the `logging` `logging-profile` `console-handler` `name` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `logging-profile` `console-handler` `named-formatter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `console-handler` `target`
defines the target of the console handler. the value can be `system.out`, `system.err` or console.
get the `logging` `logging-profile` `console-handler` `target` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/console-handler=<console-handler name>:read-attribute(name=target)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `console-handler` `target`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `custom-formatter`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-formatter=<custom-formatter name>:read-resource()`
To get the list of all the `logging` `logging-profile` `custom-formatter` use '*' for `<custom-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `custom-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-formatter` `class`
the logging formatter class to be used.
get the `logging` `logging-profile` `custom-formatter` `class` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-formatter=<custom-formatter name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-formatter` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-formatter` `module`
the module that the logging formatter depends on.
get the `logging` `logging-profile` `custom-formatter` `module` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-formatter=<custom-formatter name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-formatter` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `custom-formatter` `properties`
defines the properties used for the logging formatter. all properties must be accessible via a setter method.
get the `logging` `logging-profile` `custom-formatter` `properties` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/custom-formatter=<custom-formatter name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `custom-formatter` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `log-file`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/log-file=<log-file name>:read-resource()`
To get the list of all the `logging` `logging-profile` `log-file` use '*' for `<log-file name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `log-file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `log-file` `file-size`
the size of the log file in bytes.
get the `logging` `logging-profile` `log-file` `file-size` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/log-file=<log-file name>:read-attribute(name=file-size)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `log-file` `file-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `log-file` `last-modified-time`
the date, in milliseconds, the file was last modified.
get the `logging` `logging-profile` `log-file` `last-modified-time` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/log-file=<log-file name>:read-attribute(name=last-modified-time)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `log-file` `last-modified-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `log-file` `last-modified-timestamp`
the date, in iso `8601` format, the file was last modified.
get the `logging` `logging-profile` `log-file` `last-modified-timestamp` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/log-file=<log-file name>:read-attribute(name=last-modified-timestamp)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `log-file` `last-modified-timestamp`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `log-file` `stream`
provides the server log as a response attachment. the response result value is the unique id of the attachment.
get the `logging` `logging-profile` `log-file` `stream` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/log-file=<log-file name>:read-attribute(name=stream)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `log-file` `stream`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `filter`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/filter=<filter name>:read-resource()`
To get the list of all the `logging` `logging-profile` `filter` use '*' for `<filter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `filter` `class`
the logging filter class to be used.
get the `logging` `logging-profile` `filter` `class` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/filter=<filter name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `filter` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `filter` `constructor-properties`
defines the constructor properties used for the logging filter.
get the `logging` `logging-profile` `filter` `constructor-properties` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/filter=<filter name>:read-attribute(name=constructor-properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `filter` `constructor-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `filter` `module`
the module that the logging filter depends on.
get the `logging` `logging-profile` `filter` `module` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/filter=<filter name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `filter` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `filter` `properties`
defines the properties used for the logging filter. all properties must be accessible via a setter method.
get the `logging` `logging-profile` `filter` `properties` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/filter=<filter name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `filter` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `xml-formatter`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-resource()`
To get the list of all the `logging` `logging-profile` `xml-formatter` use '*' for `<xml-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `xml-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `date-format`
the `date/time` format pattern. the pattern must be a valid `java.time.format.datetimeformatter.ofpattern`() pattern. the default pattern is an `iso-8601` extended offset `date-time` format.
get the `logging` `logging-profile` `xml-formatter` `date-format` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=date-format)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `date-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `exception-output-type`
indicates how the cause of the logged message, if one is available, will be added to the `xml` output.
get the `logging` `logging-profile` `xml-formatter` `exception-output-type` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=exception-output-type)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `exception-output-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `key-overrides`
allows the names of the keys for the `xml` properties to be overridden.
get the `logging` `logging-profile` `xml-formatter` `key-overrides` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=key-overrides)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `key-overrides`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `meta-data`
sets the meta data to use in the `xml` format. properties will be added to each log message.
get the `logging` `logging-profile` `xml-formatter` `meta-data` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=meta-data)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `meta-data`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `namespace-uri`
sets the `namespace` uri used for each record if `print-namespace` attribute is true. note that if no `namespace-uri` is defined and there are overridden keys no `namespace` will be written regardless if the `print-namespace` attribute is set to true.
get the `logging` `logging-profile` `xml-formatter` `namespace-uri` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=namespace-uri)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `namespace-uri`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `pretty-print`
indicates whether or not pretty printing should be used when formatting.
get the `logging` `logging-profile` `xml-formatter` `pretty-print` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=pretty-print)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `pretty-print`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `print-details`
sets whether or not details should be printed. printing the details can be expensive as the values are retrieved from the caller. the details include the source class name, source file name, source method name, source module name, source module version and source line number.
get the `logging` `logging-profile` `xml-formatter` `print-details` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=print-details)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `print-details`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `print-namespace`
turns on or off the printing of the `namespace` for each <record/>. this is set to false by default.
get the `logging` `logging-profile` `xml-formatter` `print-namespace` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=print-namespace)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `print-namespace`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `record-delimiter`
the value to be used to indicate the end of a record. if set to null no delimiter will be used at the end of the record. the default value is a line feed.
get the `logging` `logging-profile` `xml-formatter` `record-delimiter` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=record-delimiter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `record-delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `zone-id`
the zone id for formatting the date and time. the system default is used if left undefined.
get the `logging` `logging-profile` `xml-formatter` `zone-id` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/xml-formatter=<xml-formatter name>:read-attribute(name=zone-id)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `xml-formatter` `zone-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `pattern-formatter`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/pattern-formatter=<pattern-formatter name>:read-resource()`
To get the list of all the `logging` `logging-profile` `pattern-formatter` use '*' for `<pattern-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `pattern-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `pattern-formatter` `color-map`
the `color-map` attribute allows for a comma delimited list of colors to be used for different levels with a pattern formatter. the format for the color mapping pattern is `level-name:color-name.valid` levels; severe, fatal, error, warn, warning, info, debug, trace, `config`, fine, finer, finest valid colors; black, green, red, yellow, blue, magenta, cyan, white, `brightblack`, `brightred`, `brightgreen`, `brightblue`, `brightyellow`, `brightmagenta`, `brightcyan`, `brightwhite`
get the `logging` `logging-profile` `pattern-formatter` `color-map` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/pattern-formatter=<pattern-formatter name>:read-attribute(name=color-map)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `pattern-formatter` `color-map`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `pattern-formatter` `pattern`
defines a pattern for the formatter.
get the `logging` `logging-profile` `pattern-formatter` `pattern` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/pattern-formatter=<pattern-formatter name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `pattern-formatter` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logging-profile` `logger`
operation: `/subsystem=logging/logging-profile=<logging-profile name>/logger=<logger name>:read-resource()`
To get the list of all the `logging` `logging-profile` `logger` use '*' for `<logger name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logging-profile` `logger`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `logger` `category`
specifies the category for the logger.
get the `logging` `logging-profile` `logger` `category` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/logger=<logger name>:read-attribute(name=category)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `logger` `category`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `logger` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logging-profile` `logger` `filter-spec` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/logger=<logger name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `logger` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `logger` `handlers`
the handlers associated with the logger.
get the `logging` `logging-profile` `logger` `handlers` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/logger=<logger name>:read-attribute(name=handlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `logger` `handlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `logger` `level`
the log level specifying which message levels will be logged by the logger. message levels lower than this value will be discarded.
get the `logging` `logging-profile` `logger` `level` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/logger=<logger name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `logger` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logging-profile` `logger` `use-parent-handlers`
specifies whether or not this logger should send its output to its parent logger.
get the `logging` `logging-profile` `logger` `use-parent-handlers` attribute.
operation: `/subsystem=logging/logging-profile=<logging-profile name>/logger=<logger name>:read-attribute(name=use-parent-handlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logging-profile` `logger` `use-parent-handlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `custom-handler`
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-resource()`
To get the list of all the `logging` `custom-handler` use '*' for `<custom-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `custom-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `class`
the logging handler class to be used.
get the `logging` `custom-handler` `class` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `custom-handler` `enabled` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `encoding`
the character encoding used by this handler.
get the `logging` `custom-handler` `encoding` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `filter`
defines a simple filter type.
get the `logging` `custom-handler` `filter` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `custom-handler` `filter-spec` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `custom-handler` `formatter` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `custom-handler` `level` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `module`
the module that the logging handler depends on.
get the `logging` `custom-handler` `module` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `name`
the name of the handler.
get the `logging` `custom-handler` `name` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `custom-handler` `named-formatter` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-handler` `properties`
defines the properties used for the logging handler. all properties must be accessible via a setter method.
get the `logging` `custom-handler` `properties` attribute.
operation: `/subsystem=logging/custom-handler=<custom-handler name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-handler` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `size-rotating-file-handler`
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-resource()`
To get the list of all the `logging` `size-rotating-file-handler` use '*' for `<size-rotating-file-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `size-rotating-file-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `append`
specify whether to append to the target file.
get the `logging` `size-rotating-file-handler` `append` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=append)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `append`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `autoflush`
automatically flush after each write.
get the `logging` `size-rotating-file-handler` `autoflush` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `size-rotating-file-handler` `enabled` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `encoding`
the character encoding used by this handler.
get the `logging` `size-rotating-file-handler` `encoding` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `file`
the file description consisting of the path and optional relative to path.
get the `logging` `size-rotating-file-handler` `file` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=file)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `filter`
defines a simple filter type.
get the `logging` `size-rotating-file-handler` `filter` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `size-rotating-file-handler` `filter-spec` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `size-rotating-file-handler` `formatter` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `size-rotating-file-handler` `level` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `max-backup-index`
the maximum number of backups to keep.
get the `logging` `size-rotating-file-handler` `max-backup-index` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=max-backup-index)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `max-backup-index`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `name`
the name of the handler.
get the `logging` `size-rotating-file-handler` `name` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `size-rotating-file-handler` `named-formatter` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `rotate-on-boot`
indicates the file should be rotated each time the file attribute is changed. this always happens when at initialization time.
get the `logging` `size-rotating-file-handler` `rotate-on-boot` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=rotate-on-boot)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `rotate-on-boot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `rotate-size`
the size at which to rotate the log file.
get the `logging` `size-rotating-file-handler` `rotate-size` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=rotate-size)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `rotate-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `size-rotating-file-handler` `suffix`
set the suffix string. the string is in a format which can be understood by `java.text.simpledateformat`. the suffix does not determine when the file should be rotated.
get the `logging` `size-rotating-file-handler` `suffix` attribute.
operation: `/subsystem=logging/size-rotating-file-handler=<size-rotating-file-handler name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `logging` `size-rotating-file-handler` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `console-handler`
operation: `/subsystem=logging/console-handler=<console-handler name>:read-resource()`
To get the list of all the `logging` `console-handler` use '*' for `<console-handler name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `console-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `autoflush`
automatically flush after each write.
get the `logging` `console-handler` `autoflush` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `enabled`
if set to true the handler is enabled and functioning as normal, if set to false the handler is ignored when processing log messages.
get the `logging` `console-handler` `enabled` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `encoding`
the character encoding used by this handler.
get the `logging` `console-handler` `encoding` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `filter`
defines a simple filter type.
get the `logging` `console-handler` `filter` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `console-handler` `filter-spec` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `formatter`
defines a pattern for the formatter.
get the `logging` `console-handler` `formatter` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `level`
the log level specifying which message levels will be logged by this logger. message levels lower than this value will be discarded.
get the `logging` `console-handler` `level` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `name`
the name of the handler.
get the `logging` `console-handler` `name` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `named-formatter`
the name of the defined formatter to be used on the handler.
get the `logging` `console-handler` `named-formatter` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=named-formatter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `named-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `console-handler` `target`
defines the target of the console handler. the value can be `system.out`, `system.err` or console.
get the `logging` `console-handler` `target` attribute.
operation: `/subsystem=logging/console-handler=<console-handler name>:read-attribute(name=target)`" metadata = {parent=, title=syntax of the operation to get the `logging` `console-handler` `target`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `custom-formatter`
operation: `/subsystem=logging/custom-formatter=<custom-formatter name>:read-resource()`
To get the list of all the `logging` `custom-formatter` use '*' for `<custom-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `custom-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-formatter` `class`
the logging formatter class to be used.
get the `logging` `custom-formatter` `class` attribute.
operation: `/subsystem=logging/custom-formatter=<custom-formatter name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-formatter` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-formatter` `module`
the module that the logging formatter depends on.
get the `logging` `custom-formatter` `module` attribute.
operation: `/subsystem=logging/custom-formatter=<custom-formatter name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-formatter` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `custom-formatter` `properties`
defines the properties used for the logging formatter. all properties must be accessible via a setter method.
get the `logging` `custom-formatter` `properties` attribute.
operation: `/subsystem=logging/custom-formatter=<custom-formatter name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `custom-formatter` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `log-file`
operation: `/subsystem=logging/log-file=<log-file name>:read-resource()`
To get the list of all the `logging` `log-file` use '*' for `<log-file name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `log-file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `log-file` `file-size`
the size of the log file in bytes.
get the `logging` `log-file` `file-size` attribute.
operation: `/subsystem=logging/log-file=<log-file name>:read-attribute(name=file-size)`" metadata = {parent=, title=syntax of the operation to get the `logging` `log-file` `file-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `log-file` `last-modified-time`
the date, in milliseconds, the file was last modified.
get the `logging` `log-file` `last-modified-time` attribute.
operation: `/subsystem=logging/log-file=<log-file name>:read-attribute(name=last-modified-time)`" metadata = {parent=, title=syntax of the operation to get the `logging` `log-file` `last-modified-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `log-file` `last-modified-timestamp`
the date, in iso `8601` format, the file was last modified.
get the `logging` `log-file` `last-modified-timestamp` attribute.
operation: `/subsystem=logging/log-file=<log-file name>:read-attribute(name=last-modified-timestamp)`" metadata = {parent=, title=syntax of the operation to get the `logging` `log-file` `last-modified-timestamp`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `log-file` `stream`
provides the server log as a response attachment. the response result value is the unique id of the attachment.
get the `logging` `log-file` `stream` attribute.
operation: `/subsystem=logging/log-file=<log-file name>:read-attribute(name=stream)`" metadata = {parent=, title=syntax of the operation to get the `logging` `log-file` `stream`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `filter`
operation: `/subsystem=logging/filter=<filter name>:read-resource()`
To get the list of all the `logging` `filter` use '*' for `<filter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `filter` `class`
the logging filter class to be used.
get the `logging` `filter` `class` attribute.
operation: `/subsystem=logging/filter=<filter name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `logging` `filter` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `filter` `constructor-properties`
defines the constructor properties used for the logging filter.
get the `logging` `filter` `constructor-properties` attribute.
operation: `/subsystem=logging/filter=<filter name>:read-attribute(name=constructor-properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `filter` `constructor-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `filter` `module`
the module that the logging filter depends on.
get the `logging` `filter` `module` attribute.
operation: `/subsystem=logging/filter=<filter name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `logging` `filter` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `filter` `properties`
defines the properties used for the logging filter. all properties must be accessible via a setter method.
get the `logging` `filter` `properties` attribute.
operation: `/subsystem=logging/filter=<filter name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `logging` `filter` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `xml-formatter`
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-resource()`
To get the list of all the `logging` `xml-formatter` use '*' for `<xml-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `xml-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `date-format`
the `date/time` format pattern. the pattern must be a valid `java.time.format.datetimeformatter.ofpattern`() pattern. the default pattern is an `iso-8601` extended offset `date-time` format.
get the `logging` `xml-formatter` `date-format` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=date-format)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `date-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `exception-output-type`
indicates how the cause of the logged message, if one is available, will be added to the `xml` output.
get the `logging` `xml-formatter` `exception-output-type` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=exception-output-type)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `exception-output-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `key-overrides`
allows the names of the keys for the `xml` properties to be overridden.
get the `logging` `xml-formatter` `key-overrides` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=key-overrides)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `key-overrides`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `meta-data`
sets the meta data to use in the `xml` format. properties will be added to each log message.
get the `logging` `xml-formatter` `meta-data` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=meta-data)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `meta-data`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `namespace-uri`
sets the `namespace` uri used for each record if `print-namespace` attribute is true. note that if no `namespace-uri` is defined and there are overridden keys no `namespace` will be written regardless if the `print-namespace` attribute is set to true.
get the `logging` `xml-formatter` `namespace-uri` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=namespace-uri)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `namespace-uri`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `pretty-print`
indicates whether or not pretty printing should be used when formatting.
get the `logging` `xml-formatter` `pretty-print` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=pretty-print)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `pretty-print`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `print-details`
sets whether or not details should be printed. printing the details can be expensive as the values are retrieved from the caller. the details include the source class name, source file name, source method name, source module name, source module version and source line number.
get the `logging` `xml-formatter` `print-details` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=print-details)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `print-details`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `print-namespace`
turns on or off the printing of the `namespace` for each <record/>. this is set to false by default.
get the `logging` `xml-formatter` `print-namespace` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=print-namespace)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `print-namespace`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `record-delimiter`
the value to be used to indicate the end of a record. if set to null no delimiter will be used at the end of the record. the default value is a line feed.
get the `logging` `xml-formatter` `record-delimiter` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=record-delimiter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `record-delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `xml-formatter` `zone-id`
the zone id for formatting the date and time. the system default is used if left undefined.
get the `logging` `xml-formatter` `zone-id` attribute.
operation: `/subsystem=logging/xml-formatter=<xml-formatter name>:read-attribute(name=zone-id)`" metadata = {parent=, title=syntax of the operation to get the `logging` `xml-formatter` `zone-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `pattern-formatter`
operation: `/subsystem=logging/pattern-formatter=<pattern-formatter name>:read-resource()`
To get the list of all the `logging` `pattern-formatter` use '*' for `<pattern-formatter name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `pattern-formatter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `pattern-formatter` `color-map`
the `color-map` attribute allows for a comma delimited list of colors to be used for different levels with a pattern formatter. the format for the color mapping pattern is `level-name:color-name.valid` levels; severe, fatal, error, warn, warning, info, debug, trace, `config`, fine, finer, finest valid colors; black, green, red, yellow, blue, magenta, cyan, white, `brightblack`, `brightred`, `brightgreen`, `brightblue`, `brightyellow`, `brightmagenta`, `brightcyan`, `brightwhite`
get the `logging` `pattern-formatter` `color-map` attribute.
operation: `/subsystem=logging/pattern-formatter=<pattern-formatter name>:read-attribute(name=color-map)`" metadata = {parent=, title=syntax of the operation to get the `logging` `pattern-formatter` `color-map`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `pattern-formatter` `pattern`
defines a pattern for the formatter.
get the `logging` `pattern-formatter` `pattern` attribute.
operation: `/subsystem=logging/pattern-formatter=<pattern-formatter name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `logging` `pattern-formatter` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `logging` `logger`
operation: `/subsystem=logging/logger=<logger name>:read-resource()`
To get the list of all the `logging` `logger` use '*' for `<logger name>`." metadata = {parent=, title=syntax of the operation to get a `logging` `logger`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logger` `category`
specifies the category for the logger.
get the `logging` `logger` `category` attribute.
operation: `/subsystem=logging/logger=<logger name>:read-attribute(name=category)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logger` `category`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logger` `filter`
defines a simple filter type.
get the `logging` `logger` `filter` attribute.
operation: `/subsystem=logging/logger=<logger name>:read-attribute(name=filter)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logger` `filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logger` `filter-spec`
a filter expression value to define a filter. example for a filter that does not match a pattern: `not(match("jbas`.*"))
get the `logging` `logger` `filter-spec` attribute.
operation: `/subsystem=logging/logger=<logger name>:read-attribute(name=filter-spec)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logger` `filter-spec`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logger` `handlers`
the handlers associated with the logger.
get the `logging` `logger` `handlers` attribute.
operation: `/subsystem=logging/logger=<logger name>:read-attribute(name=handlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logger` `handlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logger` `level`
the log level specifying which message levels will be logged by the logger. message levels lower than this value will be discarded.
get the `logging` `logger` `level` attribute.
operation: `/subsystem=logging/logger=<logger name>:read-attribute(name=level)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logger` `level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `logging` `logger` `use-parent-handlers`
specifies whether or not this logger should send its output to its parent logger.
get the `logging` `logger` `use-parent-handlers` attribute.
operation: `/subsystem=logging/logger=<logger name>:read-attribute(name=use-parent-handlers)`" metadata = {parent=, title=syntax of the operation to get the `logging` `logger` `use-parent-handlers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `naming` `binding`
operation: `/subsystem=naming/binding=<binding name>:read-resource()`
To get the list of all the `naming` `binding` use '*' for `<binding name>`." metadata = {parent=, title=syntax of the operation to get a `naming` `binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `binding-type`
the type of binding to create, may be simple, lookup, `external-context` or `object-factory`
get the `naming` `binding` `binding-type` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=binding-type)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `binding-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `cache`
if the external context should be cached
get the `naming` `binding` `cache` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `class`
the object factory class name for object factory bindings
get the `naming` `binding` `class` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `environment`
the environment to use on object factory instance retrieval
get the `naming` `binding` `environment` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=environment)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `environment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `lookup`
the entry to lookup in `jndi` for lookup bindings
get the `naming` `binding` `lookup` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=lookup)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `lookup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `module`
the module to load the object factory from for object factory bindings
get the `naming` `binding` `module` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `type`
the type of the value to bind for simple bindings, this must be a primitive type
get the `naming` `binding` `type` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `naming` `binding` `value`
the value to bind for simple bindings
get the `naming` `binding` `value` attribute.
operation: `/subsystem=naming/binding=<binding name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `naming` `binding` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `modify-wsdl-address`
whether the soap address can be modified.
get the `webservices` `modify-wsdl-address` attribute.
operation: `/subsystem=webservices:read-attribute(name=modify-wsdl-address)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `modify-wsdl-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `statistics-enabled`
whether statistics are to be gathered for endpoints, default value is 'false'.
get the `webservices` `statistics-enabled` attribute.
operation: `/subsystem=webservices:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `wsdl-host`
the `wsdl`, that is a required deployment artifact for an endpoint, has a <`soap:address`> element which points to the location of the endpoint. `jboss` supports rewriting of that soap address. if the content of <`soap:address`> is a valid `url`, `jbossws` will not rewrite it unless '`modify-wsdl-address`' is true. if the content of <`soap:address`> is not a valid `url`, `jbossws` will rewrite it using the attribute values given below. if '`wsdl-host`' is set to '`jbossws.undefined.host`', `jbossws` uses requesters host when rewriting the <`soap:address`>
get the `webservices` `wsdl-host` attribute.
operation: `/subsystem=webservices:read-attribute(name=wsdl-host)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `wsdl-host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `wsdl-path-rewrite-rule`
this string defines a sed substitution command (`e.g`., '`s/regexp/replacement/g`') that `jbossws` executes against the path component of each <`soap:address`> `url` published from the server. when `wsdl-path-rewrite-rule` is not defined, `jbossws` retains the original path component of each <`soap:address`> `url`. when '`modify-wsdl-address`' is set to "false" this element is ignored.
get the `webservices` `wsdl-path-rewrite-rule` attribute.
operation: `/subsystem=webservices:read-attribute(name=wsdl-path-rewrite-rule)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `wsdl-path-rewrite-rule`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `wsdl-port`
the `non-secure` port that will be used for rewriting the soap address. if absent the port will be identified by querying the list of installed connectors.
get the `webservices` `wsdl-port` attribute.
operation: `/subsystem=webservices:read-attribute(name=wsdl-port)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `wsdl-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `wsdl-secure-port`
the secure port that will be used for rewriting the soap address. if absent the port will be identified by querying the list of installed connectors.
get the `webservices` `wsdl-secure-port` attribute.
operation: `/subsystem=webservices:read-attribute(name=wsdl-secure-port)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `wsdl-secure-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `wsdl-uri-scheme`
the uri scheme to use for rewriting <`soap:address`> . valid values are '`http`' and '`https`'. this configuration overrides scheme computed by processing the endpoint (even if a transport guarantee is specified). the provided values for '`wsdl-port`' and '`wsdl-secure-port`' (or their default values) are used depending on specified scheme.
get the `webservices` `wsdl-uri-scheme` attribute.
operation: `/subsystem=webservices:read-attribute(name=wsdl-uri-scheme)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `wsdl-uri-scheme`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `client-config`
operation: `/subsystem=webservices/client-config=<client-config name>:read-resource()`
To get the list of all the `webservices` `client-config` use '*' for `<client-config name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `client-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `client-config` `pre-handler-chain`
operation: `/subsystem=webservices/client-config=<client-config name>/pre-handler-chain=<pre-handler-chain name>:read-resource()`
To get the list of all the `webservices` `client-config` `pre-handler-chain` use '*' for `<pre-handler-chain name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `client-config` `pre-handler-chain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `client-config` `pre-handler-chain` `protocol-bindings`
protocol binding
get the `webservices` `client-config` `pre-handler-chain` `protocol-bindings` attribute.
operation: `/subsystem=webservices/client-config=<client-config name>/pre-handler-chain=<pre-handler-chain name>:read-attribute(name=protocol-bindings)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `client-config` `pre-handler-chain` `protocol-bindings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `client-config` `pre-handler-chain` `handler`
operation: `/subsystem=webservices/client-config=<client-config name>/pre-handler-chain=<pre-handler-chain name>/handler=<handler name>:read-resource()`
To get the list of all the `webservices` `client-config` `pre-handler-chain` `handler` use '*' for `<handler name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `client-config` `pre-handler-chain` `handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `client-config` `pre-handler-chain` `handler` `class`
handler class
get the `webservices` `client-config` `pre-handler-chain` `handler` `class` attribute.
operation: `/subsystem=webservices/client-config=<client-config name>/pre-handler-chain=<pre-handler-chain name>/handler=<handler name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `client-config` `pre-handler-chain` `handler` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `client-config` `post-handler-chain`
operation: `/subsystem=webservices/client-config=<client-config name>/post-handler-chain=<post-handler-chain name>:read-resource()`
To get the list of all the `webservices` `client-config` `post-handler-chain` use '*' for `<post-handler-chain name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `client-config` `post-handler-chain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `client-config` `post-handler-chain` `protocol-bindings`
protocol binding
get the `webservices` `client-config` `post-handler-chain` `protocol-bindings` attribute.
operation: `/subsystem=webservices/client-config=<client-config name>/post-handler-chain=<post-handler-chain name>:read-attribute(name=protocol-bindings)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `client-config` `post-handler-chain` `protocol-bindings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `client-config` `post-handler-chain` `handler`
operation: `/subsystem=webservices/client-config=<client-config name>/post-handler-chain=<post-handler-chain name>/handler=<handler name>:read-resource()`
To get the list of all the `webservices` `client-config` `post-handler-chain` `handler` use '*' for `<handler name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `client-config` `post-handler-chain` `handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `client-config` `post-handler-chain` `handler` `class`
handler class
get the `webservices` `client-config` `post-handler-chain` `handler` `class` attribute.
operation: `/subsystem=webservices/client-config=<client-config name>/post-handler-chain=<post-handler-chain name>/handler=<handler name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `client-config` `post-handler-chain` `handler` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `client-config` `property`
operation: `/subsystem=webservices/client-config=<client-config name>/property=<property name>:read-resource()`
To get the list of all the `webservices` `client-config` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `client-config` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `client-config` `property` `value`
endpoint configuration property value
get the `webservices` `client-config` `property` `value` attribute.
operation: `/subsystem=webservices/client-config=<client-config name>/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `client-config` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `endpoint-config`
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>:read-resource()`
To get the list of all the `webservices` `endpoint-config` use '*' for `<endpoint-config name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `endpoint-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `endpoint-config` `pre-handler-chain`
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/pre-handler-chain=<pre-handler-chain name>:read-resource()`
To get the list of all the `webservices` `endpoint-config` `pre-handler-chain` use '*' for `<pre-handler-chain name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `endpoint-config` `pre-handler-chain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `endpoint-config` `pre-handler-chain` `protocol-bindings`
protocol binding
get the `webservices` `endpoint-config` `pre-handler-chain` `protocol-bindings` attribute.
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/pre-handler-chain=<pre-handler-chain name>:read-attribute(name=protocol-bindings)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `endpoint-config` `pre-handler-chain` `protocol-bindings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `endpoint-config` `pre-handler-chain` `handler`
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/pre-handler-chain=<pre-handler-chain name>/handler=<handler name>:read-resource()`
To get the list of all the `webservices` `endpoint-config` `pre-handler-chain` `handler` use '*' for `<handler name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `endpoint-config` `pre-handler-chain` `handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `endpoint-config` `pre-handler-chain` `handler` `class`
handler class
get the `webservices` `endpoint-config` `pre-handler-chain` `handler` `class` attribute.
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/pre-handler-chain=<pre-handler-chain name>/handler=<handler name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `endpoint-config` `pre-handler-chain` `handler` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `endpoint-config` `post-handler-chain`
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/post-handler-chain=<post-handler-chain name>:read-resource()`
To get the list of all the `webservices` `endpoint-config` `post-handler-chain` use '*' for `<post-handler-chain name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `endpoint-config` `post-handler-chain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `endpoint-config` `post-handler-chain` `protocol-bindings`
protocol binding
get the `webservices` `endpoint-config` `post-handler-chain` `protocol-bindings` attribute.
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/post-handler-chain=<post-handler-chain name>:read-attribute(name=protocol-bindings)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `endpoint-config` `post-handler-chain` `protocol-bindings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `endpoint-config` `post-handler-chain` `handler`
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/post-handler-chain=<post-handler-chain name>/handler=<handler name>:read-resource()`
To get the list of all the `webservices` `endpoint-config` `post-handler-chain` `handler` use '*' for `<handler name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `endpoint-config` `post-handler-chain` `handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `endpoint-config` `post-handler-chain` `handler` `class`
handler class
get the `webservices` `endpoint-config` `post-handler-chain` `handler` `class` attribute.
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/post-handler-chain=<post-handler-chain name>/handler=<handler name>:read-attribute(name=class)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `endpoint-config` `post-handler-chain` `handler` `class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `webservices` `endpoint-config` `property`
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/property=<property name>:read-resource()`
To get the list of all the `webservices` `endpoint-config` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `webservices` `endpoint-config` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `webservices` `endpoint-config` `property` `value`
endpoint configuration property value
get the `webservices` `endpoint-config` `property` `value` attribute.
operation: `/subsystem=webservices/endpoint-config=<endpoint-config name>/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `webservices` `endpoint-config` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `micrometer` `endpoint`
the `url` to which metrics will be published.
get the `micrometer` `endpoint` attribute.
operation: `/subsystem=micrometer:read-attribute(name=endpoint)`" metadata = {parent=, title=syntax of the operation to get the `micrometer` `endpoint`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `micrometer` `exposed-subsystems`
the names of the `wildfly` subsystems that exposes their metrics (or '*' to expose any subsystem metrics).
get the `micrometer` `exposed-subsystems` attribute.
operation: `/subsystem=micrometer:read-attribute(name=exposed-subsystems)`" metadata = {parent=, title=syntax of the operation to get the `micrometer` `exposed-subsystems`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `micrometer` `step`
the step size (reporting frequency) to use in seconds.
get the `micrometer` `step` attribute.
operation: `/subsystem=micrometer:read-attribute(name=step)`" metadata = {parent=, title=syntax of the operation to get the `micrometer` `step`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `micrometer` `registry` `prometheus` `context`
the context root from which to serve prometheus metrics (`e.g`., "/metrics" or "/prometheus"). note: prometheus is not supported on host controllers.
get the `micrometer` `registry` `prometheus` `context` attribute.
operation: `/subsystem=micrometer/registry=prometheus:read-attribute(name=context)`" metadata = {parent=, title=syntax of the operation to get the `micrometer` `registry` `prometheus` `context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `micrometer` `registry` `prometheus` `security-enabled`
whether the context should be secured
get the `micrometer` `registry` `prometheus` `security-enabled` attribute.
operation: `/subsystem=micrometer/registry=prometheus:read-attribute(name=security-enabled)`" metadata = {parent=, title=syntax of the operation to get the `micrometer` `registry` `prometheus` `security-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `micrometer` `registry` `otlp` `endpoint`
the `url` to which metrics will be published.
get the `micrometer` `registry` `otlp` `endpoint` attribute.
operation: `/subsystem=micrometer/registry=otlp:read-attribute(name=endpoint)`" metadata = {parent=, title=syntax of the operation to get the `micrometer` `registry` `otlp` `endpoint`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `micrometer` `registry` `otlp` `step`
the step size (reporting frequency) to use in seconds.
get the `micrometer` `registry` `otlp` `step` attribute.
operation: `/subsystem=micrometer/registry=otlp:read-attribute(name=step)`" metadata = {parent=, title=syntax of the operation to get the `micrometer` `registry` `otlp` `step`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `xts` `async-registration`
initialize endpoints for asynchronous registration needed for `ws-at` .net integration.
get the `xts` `async-registration` attribute.
operation: `/subsystem=xts:read-attribute(name=async-registration)`" metadata = {parent=, title=syntax of the operation to get the `xts` `async-registration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `xts` `default-context-propagation`
automatically sets up client side handlers.
get the `xts` `default-context-propagation` attribute.
operation: `/subsystem=xts:read-attribute(name=default-context-propagation)`" metadata = {parent=, title=syntax of the operation to get the `xts` `default-context-propagation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `xts` `host`
configuration of the host used by the `xts` subsystem.
get the `xts` `host` attribute.
operation: `/subsystem=xts:read-attribute(name=host)`" metadata = {parent=, title=syntax of the operation to get the `xts` `host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `xts` `url`
if set configures a remote coordinator service to be used when an `xts` client start a transaction.
get the `xts` `url` attribute.
operation: `/subsystem=xts:read-attribute(name=url)`" metadata = {parent=, title=syntax of the operation to get the `xts` `url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `xts` `xts-environment`
the `xts` environment configuration.
get the `xts` `xts-environment` attribute.
operation: `/subsystem=xts:read-attribute(name=xts-environment)`" metadata = {parent=, title=syntax of the operation to get the `xts` `xts-environment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `deployment-scanner` `scanner`
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-resource()`
To get the list of all the `deployment-scanner` `scanner` use '*' for `<scanner name>`." metadata = {parent=, title=syntax of the operation to get a `deployment-scanner` `scanner`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `auto-deploy-exploded`
allows the automatic deployment of exploded content without requiring a .`dodeploy` marker file. recommended for only basic development scenarios to prevent exploded application deployment from occurring during changes by the developer or operating system.
get the `deployment-scanner` `scanner` `auto-deploy-exploded` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=auto-deploy-exploded)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `auto-deploy-exploded`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `auto-deploy-xml`
allows automatic deployment of `xml` content without requiring a .`dodeploy` marker file.
get the `deployment-scanner` `scanner` `auto-deploy-xml` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=auto-deploy-xml)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `auto-deploy-xml`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `auto-deploy-zipped`
allows automatic deployment of zipped content without requiring a .`dodeploy` marker file.
get the `deployment-scanner` `scanner` `auto-deploy-zipped` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=auto-deploy-zipped)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `auto-deploy-zipped`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `deployment-timeout`
the time value in seconds for the deployment scanner to allow a deployment attempt before being cancelled.
get the `deployment-scanner` `scanner` `deployment-timeout` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=deployment-timeout)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `deployment-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `path`
the actual `filesystem` path to be scanned. treated as an absolute path, unless the '`relative-to`' attribute is specified, in which case the value is treated as relative to that path.
get the `deployment-scanner` `scanner` `path` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `relative-to`
reference to a `filesystem` path defined in the "paths" section of the server configuration.
get the `deployment-scanner` `scanner` `relative-to` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `runtime-failure-causes-rollback`
flag indicating whether a runtime failure of a deployment causes a rollback of the deployment as well as all other (maybe unrelated) deployments as part of the scan operation.
get the `deployment-scanner` `scanner` `runtime-failure-causes-rollback` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=runtime-failure-causes-rollback)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `runtime-failure-causes-rollback`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `scan-enabled`
flag indicating if all scanning (including initial scanning at startup) is enabled.
get the `deployment-scanner` `scanner` `scan-enabled` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=scan-enabled)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `scan-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `deployment-scanner` `scanner` `scan-interval`
periodic interval, in milliseconds, at which the repository should be scanned for changes. a value of less than `1` indicates the repository should only be scanned at initial startup.
get the `deployment-scanner` `scanner` `scan-interval` attribute.
operation: `/subsystem=deployment-scanner/scanner=<scanner name>:read-attribute(name=scan-interval)`" metadata = {parent=, title=syntax of the operation to get the `deployment-scanner` `scanner` `scan-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `rts` `host`
name of the host which should be used to deploy `servlets`
get the `rts` `host` attribute.
operation: `/subsystem=rts:read-attribute(name=host)`" metadata = {parent=, title=syntax of the operation to get the `rts` `host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `rts` `server`
name of the server which should be used to deploy `servlets`
get the `rts` `server` attribute.
operation: `/subsystem=rts:read-attribute(name=server)`" metadata = {parent=, title=syntax of the operation to get the `rts` `server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `rts` `socket-binding`
name of the socket binding which should be used
get the `rts` `socket-binding` attribute.
operation: `/subsystem=rts:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `rts` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `default-session-management`
the default distributable session management provider of the server
get the `distributable-web` `default-session-management` attribute.
operation: `/subsystem=distributable-web:read-attribute(name=default-session-management)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `default-session-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `default-single-sign-on-management`
the default distributable single `sign-on` management provider of the server
get the `distributable-web` `default-single-sign-on-management` attribute.
operation: `/subsystem=distributable-web:read-attribute(name=default-single-sign-on-management)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `default-single-sign-on-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `routing` `infinispan` `cache`
the name of the cache associated this provider
get the `distributable-web` `routing` `infinispan` `cache` attribute.
operation: `/subsystem=distributable-web/routing=infinispan:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `routing` `infinispan` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `routing` `infinispan` `cache-container`
the name of the cache container associated this provider
get the `distributable-web` `routing` `infinispan` `cache-container` attribute.
operation: `/subsystem=distributable-web/routing=infinispan:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `routing` `infinispan` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `distributable-web` `infinispan-single-sign-on-management`
operation: `/subsystem=distributable-web/infinispan-single-sign-on-management=<infinispan-single-sign-on-management name>:read-resource()`
To get the list of all the `distributable-web` `infinispan-single-sign-on-management` use '*' for `<infinispan-single-sign-on-management name>`." metadata = {parent=, title=syntax of the operation to get a `distributable-web` `infinispan-single-sign-on-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-single-sign-on-management` `cache`
the name of the cache associated with this provider
get the `distributable-web` `infinispan-single-sign-on-management` `cache` attribute.
operation: `/subsystem=distributable-web/infinispan-single-sign-on-management=<infinispan-single-sign-on-management name>:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-single-sign-on-management` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-single-sign-on-management` `cache-container`
the name of the cache container associated with this provider
get the `distributable-web` `infinispan-single-sign-on-management` `cache-container` attribute.
operation: `/subsystem=distributable-web/infinispan-single-sign-on-management=<infinispan-single-sign-on-management name>:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-single-sign-on-management` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `distributable-web` `hotrod-session-management`
operation: `/subsystem=distributable-web/hotrod-session-management=<hotrod-session-management name>:read-resource()`
To get the list of all the `distributable-web` `hotrod-session-management` use '*' for `<hotrod-session-management name>`." metadata = {parent=, title=syntax of the operation to get a `distributable-web` `hotrod-session-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `hotrod-session-management` `cache-configuration`
the name of cache configuration on the remote cache container.
get the `distributable-web` `hotrod-session-management` `cache-configuration` attribute.
operation: `/subsystem=distributable-web/hotrod-session-management=<hotrod-session-management name>:read-attribute(name=cache-configuration)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `hotrod-session-management` `cache-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `hotrod-session-management` `expiration-thread-pool-size`
configures the number of threads dedicated to processing expiration events from the remote `infinispan` cluster.
get the `distributable-web` `hotrod-session-management` `expiration-thread-pool-size` attribute.
operation: `/subsystem=distributable-web/hotrod-session-management=<hotrod-session-management name>:read-attribute(name=expiration-thread-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `hotrod-session-management` `expiration-thread-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `hotrod-session-management` `granularity`
defines the strategy for persisting the attributes of a session
get the `distributable-web` `hotrod-session-management` `granularity` attribute.
operation: `/subsystem=distributable-web/hotrod-session-management=<hotrod-session-management name>:read-attribute(name=granularity)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `hotrod-session-management` `granularity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `hotrod-session-management` `marshaller`
indicates the marshalling implementation used for serializing attributes of a session
get the `distributable-web` `hotrod-session-management` `marshaller` attribute.
operation: `/subsystem=distributable-web/hotrod-session-management=<hotrod-session-management name>:read-attribute(name=marshaller)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `hotrod-session-management` `marshaller`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `hotrod-session-management` `remote-cache-container`
the name of the remote cache container associated with this provider
get the `distributable-web` `hotrod-session-management` `remote-cache-container` attribute.
operation: `/subsystem=distributable-web/hotrod-session-management=<hotrod-session-management name>:read-attribute(name=remote-cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `hotrod-session-management` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `distributable-web` `hotrod-single-sign-on-management`
operation: `/subsystem=distributable-web/hotrod-single-sign-on-management=<hotrod-single-sign-on-management name>:read-resource()`
To get the list of all the `distributable-web` `hotrod-single-sign-on-management` use '*' for `<hotrod-single-sign-on-management name>`." metadata = {parent=, title=syntax of the operation to get a `distributable-web` `hotrod-single-sign-on-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `hotrod-single-sign-on-management` `cache-configuration`
the name of cache configuration on the remote cache container.
get the `distributable-web` `hotrod-single-sign-on-management` `cache-configuration` attribute.
operation: `/subsystem=distributable-web/hotrod-single-sign-on-management=<hotrod-single-sign-on-management name>:read-attribute(name=cache-configuration)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `hotrod-single-sign-on-management` `cache-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `hotrod-single-sign-on-management` `remote-cache-container`
the name of the remote cache container associated with this provider
get the `distributable-web` `hotrod-single-sign-on-management` `remote-cache-container` attribute.
operation: `/subsystem=distributable-web/hotrod-single-sign-on-management=<hotrod-single-sign-on-management name>:read-attribute(name=remote-cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `hotrod-single-sign-on-management` `remote-cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `distributable-web` `infinispan-session-management`
operation: `/subsystem=distributable-web/infinispan-session-management=<infinispan-session-management name>:read-resource()`
To get the list of all the `distributable-web` `infinispan-session-management` use '*' for `<infinispan-session-management name>`." metadata = {parent=, title=syntax of the operation to get a `distributable-web` `infinispan-session-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-session-management` `cache`
the name of the cache associated with this provider
get the `distributable-web` `infinispan-session-management` `cache` attribute.
operation: `/subsystem=distributable-web/infinispan-session-management=<infinispan-session-management name>:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-session-management` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-session-management` `cache-container`
the name of the cache container associated with this provider
get the `distributable-web` `infinispan-session-management` `cache-container` attribute.
operation: `/subsystem=distributable-web/infinispan-session-management=<infinispan-session-management name>:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-session-management` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-session-management` `granularity`
defines the strategy for persisting the attributes of a session
get the `distributable-web` `infinispan-session-management` `granularity` attribute.
operation: `/subsystem=distributable-web/infinispan-session-management=<infinispan-session-management name>:read-attribute(name=granularity)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-session-management` `granularity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-session-management` `marshaller`
indicates the marshalling implementation used for serializing attributes of a session
get the `distributable-web` `infinispan-session-management` `marshaller` attribute.
operation: `/subsystem=distributable-web/infinispan-session-management=<infinispan-session-management name>:read-attribute(name=marshaller)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-session-management` `marshaller`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-session-management` `affinity` `ranked` `delimiter`
the delimiter used to separate the individual routes within the encoded session identifier
get the `distributable-web` `infinispan-session-management` `affinity` `ranked` `delimiter` attribute.
operation: `/subsystem=distributable-web/infinispan-session-management=<infinispan-session-management name>/affinity=ranked:read-attribute(name=delimiter)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-session-management` `affinity` `ranked` `delimiter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-web` `infinispan-session-management` `affinity` `ranked` `max-routes`
the maximum number of routes to encode into the session identifier
get the `distributable-web` `infinispan-session-management` `affinity` `ranked` `max-routes` attribute.
operation: `/subsystem=distributable-web/infinispan-session-management=<infinispan-session-management name>/affinity=ranked:read-attribute(name=max-routes)`" metadata = {parent=, title=syntax of the operation to get the `distributable-web` `infinispan-session-management` `affinity` `ranked` `max-routes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `mail` `mail-session`
operation: `/subsystem=mail/mail-session=<mail-session name>:read-resource()`
To get the list of all the `mail` `mail-session` use '*' for `<mail-session name>`." metadata = {parent=, title=syntax of the operation to get a `mail` `mail-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `debug`
enables jakarta mail debugging
get the `mail` `mail-session` `debug` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>:read-attribute(name=debug)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `debug`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `from`
from address that is used as default from, if not set when sending
get the `mail` `mail-session` `from` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>:read-attribute(name=from)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `from`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `jndi-name`
`jndi` name to where mail session should be bound
get the `mail` `mail-session` `jndi-name` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `smtp` `credential-reference`
credential (from credential store) to authenticate on server
get the `mail` `mail-session` `server` `smtp` `credential-reference` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=smtp:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `smtp` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `smtp` `outbound-socket-binding-ref`
outbound socket binding to mail server
get the `mail` `mail-session` `server` `smtp` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=smtp:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `smtp` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `smtp` `password`
password to authenticate on server
get the `mail` `mail-session` `server` `smtp` `password` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=smtp:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `smtp` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `smtp` `ssl`
does server require `ssl`?
get the `mail` `mail-session` `server` `smtp` `ssl` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=smtp:read-attribute(name=ssl)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `smtp` `ssl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `smtp` `tls`
does server require `tls`?
get the `mail` `mail-session` `server` `smtp` `tls` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=smtp:read-attribute(name=tls)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `smtp` `tls`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `smtp` `username`
`username` to authenticate on server
get the `mail` `mail-session` `server` `smtp` `username` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=smtp:read-attribute(name=username)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `smtp` `username`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `pop3` `credential-reference`
credential (from credential store) to authenticate on server
get the `mail` `mail-session` `server` `pop3` `credential-reference` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=pop3:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `pop3` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `pop3` `outbound-socket-binding-ref`
outbound socket binding to mail server
get the `mail` `mail-session` `server` `pop3` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=pop3:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `pop3` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `pop3` `password`
password to authenticate on server
get the `mail` `mail-session` `server` `pop3` `password` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=pop3:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `pop3` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `pop3` `ssl`
does server require `ssl`?
get the `mail` `mail-session` `server` `pop3` `ssl` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=pop3:read-attribute(name=ssl)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `pop3` `ssl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `pop3` `tls`
does server require `tls`?
get the `mail` `mail-session` `server` `pop3` `tls` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=pop3:read-attribute(name=tls)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `pop3` `tls`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `pop3` `username`
`username` to authenticate on server
get the `mail` `mail-session` `server` `pop3` `username` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=pop3:read-attribute(name=username)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `pop3` `username`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `imap` `credential-reference`
credential (from credential store) to authenticate on server
get the `mail` `mail-session` `server` `imap` `credential-reference` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=imap:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `imap` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `imap` `outbound-socket-binding-ref`
outbound socket binding to mail server
get the `mail` `mail-session` `server` `imap` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=imap:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `imap` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `imap` `password`
password to authenticate on server
get the `mail` `mail-session` `server` `imap` `password` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=imap:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `imap` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `imap` `ssl`
does server require `ssl`?
get the `mail` `mail-session` `server` `imap` `ssl` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=imap:read-attribute(name=ssl)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `imap` `ssl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `imap` `tls`
does server require `tls`?
get the `mail` `mail-session` `server` `imap` `tls` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=imap:read-attribute(name=tls)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `imap` `tls`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `server` `imap` `username`
`username` to authenticate on server
get the `mail` `mail-session` `server` `imap` `username` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/server=imap:read-attribute(name=username)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `server` `imap` `username`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `mail` `mail-session` `custom`
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-resource()`
To get the list of all the `mail` `mail-session` `custom` use '*' for `<custom name>`." metadata = {parent=, title=syntax of the operation to get a `mail` `mail-session` `custom`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `custom` `credential-reference`
credential (from credential store) to authenticate on server
get the `mail` `mail-session` `custom` `credential-reference` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `custom` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `custom` `outbound-socket-binding-ref`
outbound socket binding to mail server
get the `mail` `mail-session` `custom` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `custom` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `custom` `password`
password to authenticate on server
get the `mail` `mail-session` `custom` `password` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-attribute(name=password)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `custom` `password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `custom` `properties`
jakarta mail properties
get the `mail` `mail-session` `custom` `properties` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `custom` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `custom` `ssl`
does server require `ssl`?
get the `mail` `mail-session` `custom` `ssl` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-attribute(name=ssl)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `custom` `ssl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `custom` `tls`
does server require `tls`?
get the `mail` `mail-session` `custom` `tls` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-attribute(name=tls)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `custom` `tls`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `mail` `mail-session` `custom` `username`
`username` to authenticate on server
get the `mail` `mail-session` `custom` `username` attribute.
operation: `/subsystem=mail/mail-session=<mail-session name>/custom=<custom name>:read-attribute(name=username)`" metadata = {parent=, title=syntax of the operation to get the `mail` `mail-session` `custom` `username`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `default-bean-management`
the default distributable bean management provider of the server
get the `distributable-ejb` `default-bean-management` attribute.
operation: `/subsystem=distributable-ejb:read-attribute(name=default-bean-management)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `default-bean-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `client-mappings-registry` `infinispan` `cache`
the name of the cache associated this provider
get the `distributable-ejb` `client-mappings-registry` `infinispan` `cache` attribute.
operation: `/subsystem=distributable-ejb/client-mappings-registry=infinispan:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `client-mappings-registry` `infinispan` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `client-mappings-registry` `infinispan` `cache-container`
the name of the cache container associated this provider
get the `distributable-ejb` `client-mappings-registry` `infinispan` `cache-container` attribute.
operation: `/subsystem=distributable-ejb/client-mappings-registry=infinispan:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `client-mappings-registry` `infinispan` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `distributable-ejb` `infinispan-timer-management`
operation: `/subsystem=distributable-ejb/infinispan-timer-management=<infinispan-timer-management name>:read-resource()`
To get the list of all the `distributable-ejb` `infinispan-timer-management` use '*' for `<infinispan-timer-management name>`." metadata = {parent=, title=syntax of the operation to get a `distributable-ejb` `infinispan-timer-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `cache`
the name of the cache associated with this provider
get the `distributable-ejb` `infinispan-timer-management` `cache` attribute.
operation: `/subsystem=distributable-ejb/infinispan-timer-management=<infinispan-timer-management name>:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `cache-container`
the name of the cache container associated with this provider
get the `distributable-ejb` `infinispan-timer-management` `cache-container` attribute.
operation: `/subsystem=distributable-ejb/infinispan-timer-management=<infinispan-timer-management name>:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `marshaller`
indicates the marshalling implementation used for serializing the timeout context of a timer.
get the `distributable-ejb` `infinispan-timer-management` `marshaller` attribute.
operation: `/subsystem=distributable-ejb/infinispan-timer-management=<infinispan-timer-management name>:read-attribute(name=marshaller)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `marshaller`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `max-active-timers`
the maximum number of active timers to retain in memory before triggering passivation.
get the `distributable-ejb` `infinispan-timer-management` `max-active-timers` attribute.
operation: `/subsystem=distributable-ejb/infinispan-timer-management=<infinispan-timer-management name>:read-attribute(name=max-active-timers)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `infinispan-timer-management` `max-active-timers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `distributable-ejb` `infinispan-bean-management`
operation: `/subsystem=distributable-ejb/infinispan-bean-management=<infinispan-bean-management name>:read-resource()`
To get the list of all the `distributable-ejb` `infinispan-bean-management` use '*' for `<infinispan-bean-management name>`." metadata = {parent=, title=syntax of the operation to get a `distributable-ejb` `infinispan-bean-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `infinispan-bean-management` `cache`
the name of the cache associated with this provider
get the `distributable-ejb` `infinispan-bean-management` `cache` attribute.
operation: `/subsystem=distributable-ejb/infinispan-bean-management=<infinispan-bean-management name>:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `infinispan-bean-management` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `infinispan-bean-management` `cache-container`
the name of the cache container associated with this provider
get the `distributable-ejb` `infinispan-bean-management` `cache-container` attribute.
operation: `/subsystem=distributable-ejb/infinispan-bean-management=<infinispan-bean-management name>:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `infinispan-bean-management` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `distributable-ejb` `infinispan-bean-management` `max-active-beans`
the maximum number active beans to retain in memory at a time, after which the least recently used will passivate
get the `distributable-ejb` `infinispan-bean-management` `max-active-beans` attribute.
operation: `/subsystem=distributable-ejb/infinispan-bean-management=<infinispan-bean-management name>:read-attribute(name=max-active-beans)`" metadata = {parent=, title=syntax of the operation to get the `distributable-ejb` `infinispan-bean-management` `max-active-beans`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `report-directory`
the directory to which validation logs would be written
get the `resource-adapters` `report-directory` attribute.
operation: `/subsystem=resource-adapters:read-attribute(name=report-directory)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `report-directory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `resource-adapters` `resource-adapter`
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-resource()`
To get the list of all the `resource-adapters` `resource-adapter` use '*' for `<resource-adapter name>`." metadata = {parent=, title=syntax of the operation to get a `resource-adapters` `resource-adapter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `archive`
specifies the resource adapter archive.
get the `resource-adapters` `resource-adapter` `archive` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=archive)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `archive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `beanvalidationgroups`
specifies the jakarta bean validation groups that should be used.
get the `resource-adapters` `resource-adapter` `beanvalidationgroups` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=beanvalidationgroups)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `beanvalidationgroups`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `bootstrap-context`
specifies the unique name of the bootstrap context that should be used.
get the `resource-adapters` `resource-adapter` `bootstrap-context` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=bootstrap-context)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `bootstrap-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `module`
specifies the module from which resource adapter will be loaded
get the `resource-adapters` `resource-adapter` `module` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `statistics-enabled`
define whether runtime statistics are enabled or not.
get the `resource-adapters` `resource-adapter` `statistics-enabled` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `transaction-support`
specifies the transaction support level of the resource adapter. this attribute allows expressions, but only simple expressions resolved from environment variables or system properties are supported. nested expressions and resolution from vaults or credential stores are not supported.
get the `resource-adapters` `resource-adapter` `transaction-support` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=transaction-support)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `transaction-support`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-elytron-security-domain`
defines the name of the elytron security domain that should be used.
get the `resource-adapters` `resource-adapter` `wm-elytron-security-domain` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-elytron-security-domain)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-elytron-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security`
toggle `on/off` `wm.security` for this resource adapter. in case of false all `wm-security`-* parameters are ignored, even the defaults.
get the `resource-adapters` `resource-adapter` `wm-security` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-security)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-default-groups`
defines a default groups list that should be added to the used subject instance.
get the `resource-adapters` `resource-adapter` `wm-security-default-groups` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-security-default-groups)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-default-groups`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-default-principal`
defines a default principal name that should be added to the used subject instance.
get the `resource-adapters` `resource-adapter` `wm-security-default-principal` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-security-default-principal)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-default-principal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-domain`
defines the name of the `picketbox` security domain that should be used.
get the `resource-adapters` `resource-adapter` `wm-security-domain` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-security-domain)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-mapping-groups`
list of groups mappings.
get the `resource-adapters` `resource-adapter` `wm-security-mapping-groups` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-security-mapping-groups)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-mapping-groups`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-mapping-required`
defines if a mapping is required for security credentials.
get the `resource-adapters` `resource-adapter` `wm-security-mapping-required` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-security-mapping-required)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-mapping-required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-mapping-users`
list of user mappings.
get the `resource-adapters` `resource-adapter` `wm-security-mapping-users` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>:read-attribute(name=wm-security-mapping-users)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `wm-security-mapping-users`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `resource-adapters` `resource-adapter` `admin-objects`
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/admin-objects=<admin-objects name>:read-resource()`
To get the list of all the `resource-adapters` `resource-adapter` `admin-objects` use '*' for `<admin-objects name>`." metadata = {parent=, title=syntax of the operation to get a `resource-adapters` `resource-adapter` `admin-objects`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `class-name`
specifies the fully qualified class name of an administration object.
get the `resource-adapters` `resource-adapter` `admin-objects` `class-name` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/admin-objects=<admin-objects name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `enabled`
specifies if the administration object should be enabled.
get the `resource-adapters` `resource-adapter` `admin-objects` `enabled` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/admin-objects=<admin-objects name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `jndi-name`
specifies the `jndi` name for the administration object.
get the `resource-adapters` `resource-adapter` `admin-objects` `jndi-name` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/admin-objects=<admin-objects name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `use-java-context`
setting this to false will bind the object into global `jndi`.
get the `resource-adapters` `resource-adapter` `admin-objects` `use-java-context` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/admin-objects=<admin-objects name>:read-attribute(name=use-java-context)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `use-java-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `resource-adapters` `resource-adapter` `admin-objects` `config-properties`
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/admin-objects=<admin-objects name>/config-properties=<config-properties name>:read-resource()`
To get the list of all the `resource-adapters` `resource-adapter` `admin-objects` `config-properties` use '*' for `<config-properties name>`." metadata = {parent=, title=syntax of the operation to get a `resource-adapters` `resource-adapter` `admin-objects` `config-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `config-properties` `value`
custom defined `config` property value.
get the `resource-adapters` `resource-adapter` `admin-objects` `config-properties` `value` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/admin-objects=<admin-objects name>/config-properties=<config-properties name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `admin-objects` `config-properties` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `resource-adapters` `resource-adapter` `config-properties`
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/config-properties=<config-properties name>:read-resource()`
To get the list of all the `resource-adapters` `resource-adapter` `config-properties` use '*' for `<config-properties name>`." metadata = {parent=, title=syntax of the operation to get a `resource-adapters` `resource-adapter` `config-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `config-properties` `value`
custom defined `config` property value.
get the `resource-adapters` `resource-adapter` `config-properties` `value` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/config-properties=<config-properties name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `config-properties` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `resource-adapters` `resource-adapter` `connection-definitions`
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-resource()`
To get the list of all the `resource-adapters` `resource-adapter` `connection-definitions` use '*' for `<connection-definitions name>`." metadata = {parent=, title=syntax of the operation to get a `resource-adapters` `resource-adapter` `connection-definitions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `allocation-retry`
the allocation retry element indicates the number of times that allocating a connection should be tried before throwing an exception.
get the `resource-adapters` `resource-adapter` `connection-definitions` `allocation-retry` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=allocation-retry)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `allocation-retry`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `allocation-retry-wait-millis`
the allocation retry wait `millis` element specifies the amount of time, in milliseconds, to wait between retrying to allocate a connection.
get the `resource-adapters` `resource-adapter` `connection-definitions` `allocation-retry-wait-millis` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=allocation-retry-wait-millis)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `allocation-retry-wait-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `authentication-context`
the elytron authentication context which defines the `javax.security.auth.subject` that is used to distinguish connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `authentication-context` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `authentication-context-and-application`
indicates that either `application-supplied` parameters, such as from `getconnection(user`, `pw`), or subject (provided by elytron after authenticating using configured `authentication-context`), are used to distinguish connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `authentication-context-and-application` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=authentication-context-and-application)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `authentication-context-and-application`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `background-validation`
an element to specify that connections should be validated on a background thread versus being validated prior to use. changing this value requires a server restart.
get the `resource-adapters` `resource-adapter` `connection-definitions` `background-validation` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=background-validation)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `background-validation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `background-validation-millis`
the `background-validation-millis` element specifies the amount of time, in milliseconds, that background validation will run. changing this value requires a server restart.
get the `resource-adapters` `resource-adapter` `connection-definitions` `background-validation-millis` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=background-validation-millis)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `background-validation-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `blocking-timeout-wait-millis`
the `blocking-timeout-millis` element specifies the maximum time, in milliseconds, to block while waiting for a connection before throwing an exception. note that this blocks only while waiting for locking a connection, and will never throw an exception if creating a new connection takes an inordinately long time.
get the `resource-adapters` `resource-adapter` `connection-definitions` `blocking-timeout-wait-millis` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=blocking-timeout-wait-millis)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `blocking-timeout-wait-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-decrementer-class`
class defining the policy for decrementing connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-decrementer-class` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=capacity-decrementer-class)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-decrementer-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-decrementer-properties`
properties to inject in class defining the policy for decrementing connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-decrementer-properties` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=capacity-decrementer-properties)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-decrementer-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-incrementer-class`
class defining the policy for incrementing connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-incrementer-class` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=capacity-incrementer-class)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-incrementer-class`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-incrementer-properties`
properties to inject in class defining the policy for incrementing connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-incrementer-properties` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=capacity-incrementer-properties)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `capacity-incrementer-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `class-name`
specifies the fully qualified class name of a managed connection factory or admin object.
get the `resource-adapters` `resource-adapter` `connection-definitions` `class-name` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `connectable`
enable the use of `cmr`. this feature means that a local resource can reliably participate in an `xa` transaction.
get the `resource-adapters` `resource-adapter` `connection-definitions` `connectable` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=connectable)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `connectable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `elytron-enabled`
enables elytron security for handling authentication of connections. the elytron `authentication-context` to be used will be current context if no context is specified (see `authentication-context`).
get the `resource-adapters` `resource-adapter` `connection-definitions` `elytron-enabled` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=elytron-enabled)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `elytron-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `enabled`
specifies if the resource adapter should be enabled.
get the `resource-adapters` `resource-adapter` `connection-definitions` `enabled` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `enlistment`
defines if lazy enlistment should be used if supported by the resource adapter.
get the `resource-adapters` `resource-adapter` `connection-definitions` `enlistment` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=enlistment)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `enlistment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `enlistment-trace`
defines if `wildfly/ironjacamar` should record enlistment traces.
get the `resource-adapters` `resource-adapter` `connection-definitions` `enlistment-trace` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=enlistment-trace)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `enlistment-trace`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `flush-strategy`
specifies how the pool should be flushed in case of an error.
get the `resource-adapters` `resource-adapter` `connection-definitions` `flush-strategy` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=flush-strategy)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `flush-strategy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `idle-timeout-minutes`
specifies the maximum time, in minutes, a connection may be idle before being closed. the actual maximum time depends also on the `idleremover` scan time, which is half of the smallest `idle-timeout-minutes` value of any pool. changing this value requires a server restart.
get the `resource-adapters` `resource-adapter` `connection-definitions` `idle-timeout-minutes` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=idle-timeout-minutes)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `idle-timeout-minutes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `initial-pool-size`
specifies the initial number of connections a pool should hold.
get the `resource-adapters` `resource-adapter` `connection-definitions` `initial-pool-size` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=initial-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `initial-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `interleaving`
an element to enable interleaving for `xa` connections.
get the `resource-adapters` `resource-adapter` `connection-definitions` `interleaving` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=interleaving)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `interleaving`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `jndi-name`
specifies the `jndi` name for the connection factory.
get the `resource-adapters` `resource-adapter` `connection-definitions` `jndi-name` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `max-pool-size`
specifies the maximum number of connections for a pool. no more connections will be created in each `sub-pool`.
get the `resource-adapters` `resource-adapter` `connection-definitions` `max-pool-size` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `mcp`
defines the `managedconnectionpool` implementation. for example: `org.jboss.jca.core.connectionmanager.pool.mcp.semaphorearraylistmanagedconnectionpool`.
get the `resource-adapters` `resource-adapter` `connection-definitions` `mcp` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=mcp)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `mcp`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `min-pool-size`
specifies the minimum number of connections for a pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `min-pool-size` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=min-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `min-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `no-recovery`
specifies if the connection pool should be excluded from recovery.
get the `resource-adapters` `resource-adapter` `connection-definitions` `no-recovery` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=no-recovery)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `no-recovery`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `no-tx-separate-pool`
oracle does not like `xa` connections getting used both inside and outside a `jta` transaction. to `workaround` the problem you can create separate `sub-pools` for the different contexts.
get the `resource-adapters` `resource-adapter` `connection-definitions` `no-tx-separate-pool` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=no-tx-separate-pool)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `no-tx-separate-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pad-xid`
specifies whether the `xid` should be padded.
get the `resource-adapters` `resource-adapter` `connection-definitions` `pad-xid` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=pad-xid)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pad-xid`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-fair`
defines if pool use should be fair.
get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-fair` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=pool-fair)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-fair`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-prefill`
specifies if the pool should be `prefilled`. changing this value requires a server restart.
get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-prefill` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=pool-prefill)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-prefill`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-use-strict-min`
specifies if the `min-pool-size` should be considered strict.
get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-use-strict-min` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=pool-use-strict-min)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `pool-use-strict-min`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-authentication-context`
the elytron authentication context used for recovery (current `authentication-context` will be used if unspecified).
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-authentication-context` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-credential-reference`
credential (from credential store) to authenticate on recovery connection
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-credential-reference` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-elytron-enabled`
indicates that an elytron authentication context will be used for recovery.
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-elytron-enabled` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-elytron-enabled)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-elytron-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-password`
the password used for recovery.
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-password` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-password)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-plugin-class-name`
the fully qualified class name of the recovery `plugin` implementation.
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-plugin-class-name` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-plugin-class-name)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-plugin-class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-plugin-properties`
the properties for the recovery `plugin`.
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-plugin-properties` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-plugin-properties)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-plugin-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-security-domain`
the `picketbox` security domain used for recovery.
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-security-domain` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-security-domain)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-username`
the user name used for recovery.
get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-username` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=recovery-username)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `recovery-username`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `same-rm-override`
using this attribute, you can unconditionally set whether `javax.transaction.xa.xaresource.issamerm(xaresource`) returns true or false.
get the `resource-adapters` `resource-adapter` `connection-definitions` `same-rm-override` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=same-rm-override)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `same-rm-override`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `security-application`
indicates that `application-supplied` parameters, such as from `getconnection(user`, `pw`), are used to distinguish connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `security-application` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=security-application)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `security-application`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `security-domain`
specifies the `picketbox` security domain which defines the `javax.security.auth.subject` that is used to distinguish connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `security-domain` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `security-domain-and-application`
indicates that either `application-supplied` parameters, such as from `getconnection(user`, `pw`) are used to distinguish connections in the pool.
get the `resource-adapters` `resource-adapter` `connection-definitions` `security-domain-and-application` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=security-domain-and-application)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `security-domain-and-application`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `sharable`
enable the use of sharable connections, which allows lazy association to be enabled if supported.
get the `resource-adapters` `resource-adapter` `connection-definitions` `sharable` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=sharable)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `sharable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `tracking`
defines if `ironjacamar` should track connection handles across transaction boundaries.
get the `resource-adapters` `resource-adapter` `connection-definitions` `tracking` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=tracking)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `tracking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `use-ccm`
enable the use of a cached connection manager.
get the `resource-adapters` `resource-adapter` `connection-definitions` `use-ccm` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=use-ccm)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `use-ccm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `use-fast-fail`
whether to fail a connection allocation on the first try if it is invalid (true) or keep trying until the pool is exhausted of all potential connections (false).
get the `resource-adapters` `resource-adapter` `connection-definitions` `use-fast-fail` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=use-fast-fail)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `use-fast-fail`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `use-java-context`
setting this to false will bind the object into global `jndi`.
get the `resource-adapters` `resource-adapter` `connection-definitions` `use-java-context` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=use-java-context)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `use-java-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `validate-on-match`
this specifies if connection validation should be done when a connection factory attempts to match a managed connection. this is typically exclusive to the use of background validation.
get the `resource-adapters` `resource-adapter` `connection-definitions` `validate-on-match` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=validate-on-match)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `validate-on-match`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `wrap-xa-resource`
specifies whether `xaresource` instances should be wrapped in an `org.jboss.tm.xaresourcewrapper` instance.
get the `resource-adapters` `resource-adapter` `connection-definitions` `wrap-xa-resource` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=wrap-xa-resource)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `wrap-xa-resource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `xa-resource-timeout`
the value is passed to `xaresource.settransactiontimeout`(), in seconds.
get the `resource-adapters` `resource-adapter` `connection-definitions` `xa-resource-timeout` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>:read-attribute(name=xa-resource-timeout)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `xa-resource-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `resource-adapters` `resource-adapter` `connection-definitions` `config-properties`
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>/config-properties=<config-properties name>:read-resource()`
To get the list of all the `resource-adapters` `resource-adapter` `connection-definitions` `config-properties` use '*' for `<config-properties name>`." metadata = {parent=, title=syntax of the operation to get a `resource-adapters` `resource-adapter` `connection-definitions` `config-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `config-properties` `value`
custom defined `config` property value.
get the `resource-adapters` `resource-adapter` `connection-definitions` `config-properties` `value` attribute.
operation: `/subsystem=resource-adapters/resource-adapter=<resource-adapter name>/connection-definitions=<connection-definitions name>/config-properties=<config-properties name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `resource-adapters` `resource-adapter` `connection-definitions` `config-properties` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `jaxrs-2-0-request-matching`
in searching for a matching resource method with which to respond to a request, consider only resource methods with the best match for the request path.
get the `jaxrs` `jaxrs-2-0-request-matching` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=jaxrs-2-0-request-matching)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `jaxrs-2-0-request-matching`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-add-charset`
if a resource method returns a text/* or `application/xml`* media type without an explicit `charset`, `resteasy` will add "`charset=utf-8`" to the returned `content-type` header. note that the `charset` defaults to `utf-8` in this case, independent of the setting of this parameter.
get the `jaxrs` `resteasy-add-charset` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-add-charset)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-add-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-buffer-exception-entity`
upon receiving an exception, the client side buffers any response entity before closing the connection.
get the `jaxrs` `resteasy-buffer-exception-entity` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-buffer-exception-entity)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-buffer-exception-entity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-disable-html-sanitizer`
normally, a response with media type "`text/html`" and a status of `400` will be processed so that the characters "/", "<", ">", "&", """ (double quote), and "'" (single quote) are escaped to prevent an `xss` attack. setting this parameter to "true", escaping will not occur.
get the `jaxrs` `resteasy-disable-html-sanitizer` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-disable-html-sanitizer)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-disable-html-sanitizer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-disable-providers`
a comma delimited list of fully qualified provider class names that will be disabled.
get the `jaxrs` `resteasy-disable-providers` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-disable-providers)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-disable-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-document-expand-entity-references`
expand external entities in `org.w3c.dom.document` documents and jakarta `xml` binding object representations.
get the `jaxrs` `resteasy-document-expand-entity-references` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-document-expand-entity-references)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-document-expand-entity-references`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-document-secure-disableDTDs`
prohibit `dtds` in `org.w3c.dom.document` documents and jakarta `xml` binding object representations.
get the `jaxrs` `resteasy-document-secure-disableDTDs` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-document-secure-disableDTDs)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-document-secure-disableDTDs`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-document-secure-processing-feature`
impose security constraints in processing `org.w3c.dom.document` documents and jakarta `xml` binding object representations.
get the `jaxrs` `resteasy-document-secure-processing-feature` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-document-secure-processing-feature)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-document-secure-processing-feature`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-gzip-max-input`
imposes maximum size on decompressed `gzipped`.
get the `jaxrs` `resteasy-gzip-max-input` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-gzip-max-input)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-gzip-max-input`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-jndi-resources`
a comma delimited list of `jndi` names which reference objects to be registered as jakarta restful web services resources.
get the `jaxrs` `resteasy-jndi-resources` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-jndi-resources)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-jndi-resources`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-language-mappings`
replaces the need for an `accept-language` header by mapping file name extensions (like .en or .fr) to a language. used when the client is unable to use an `accept-language` header to choose a language (`i.e`. a browser).
get the `jaxrs` `resteasy-language-mappings` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-language-mappings)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-language-mappings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-media-type-mappings`
replaces the need for an accept header by mapping file name extensions (like .`xml` or .txt) to a media type. used when the client is unable to use an accept header to choose a representation (`i.e`. a browser).
get the `jaxrs` `resteasy-media-type-mappings` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-media-type-mappings)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-media-type-mappings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-media-type-param-mapping`
names a query parameter that can be set to an acceptable media type, enabling content negotiation without an accept header.
get the `jaxrs` `resteasy-media-type-param-mapping` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-media-type-param-mapping)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-media-type-param-mapping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-patchfilter-disabled`
specifies that `json` patch and `json` merge patch functionalities are all disabled.
get the `jaxrs` `resteasy-patchfilter-disabled` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-patchfilter-disabled)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-patchfilter-disabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-prefer-jackson-over-jsonb`
specifies that the jackson `json` provider should be preferred over the default jakarta `json` processing provider for `json` binding.
get the `jaxrs` `resteasy-prefer-jackson-over-jsonb` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-prefer-jackson-over-jsonb)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-prefer-jackson-over-jsonb`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-providers`
a comma delimited list of fully qualified @provider class names you want to register.
get the `jaxrs` `resteasy-providers` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-providers)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-rfc7232preconditions`
enables `rfc7232` compliant `http` preconditions handling.
get the `jaxrs` `resteasy-rfc7232preconditions` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-rfc7232preconditions)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-rfc7232preconditions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-role-based-security`
enables role based security.
get the `jaxrs` `resteasy-role-based-security` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-role-based-security)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-role-based-security`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-secure-random-max-use`
the number of times a `securerandom` can be used before reseeding.
get the `jaxrs` `resteasy-secure-random-max-use` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-secure-random-max-use)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-secure-random-max-use`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-use-builtin-providers`
whether or not to register default, `built-in` @provider classes.
get the `jaxrs` `resteasy-use-builtin-providers` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-use-builtin-providers)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-use-builtin-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-use-container-form-params`
`httpservletrequest.getparametermap`(). use this switch if you are calling this method within a `servlet` filter or consuming the input stream within the filter.
get the `jaxrs` `resteasy-use-container-form-params` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-use-container-form-params)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-use-container-form-params`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `resteasy-wider-request-matching`
turns off the jakarta restful web services spec defined `class-level` expression filtering and instead tries to match every `method's` full path.
get the `jaxrs` `resteasy-wider-request-matching` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=resteasy-wider-request-matching)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `resteasy-wider-request-matching`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `tracing-threshold`
the "summary" threshold will emit some brief tracing information. the "trace" threshold will produce more detailed tracing information, and the "verbose" threshold will generate extremely detailed tracing information.
get the `jaxrs` `tracing-threshold` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=tracing-threshold)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `tracing-threshold`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jaxrs` `tracing-type`
"all" will enable the tracing feature. "`on_demand`" mode will give control to the client side: a client can send a tracing request via `http` header and get the tracing info back from response headers. "off" mode will disable the tracing feature, and this is the default mode. note that it is suggested this is set to "off" for production servers.
get the `jaxrs` `tracing-type` attribute.
operation: `/subsystem=jaxrs:read-attribute(name=tracing-type)`" metadata = {parent=, title=syntax of the operation to get the `jaxrs` `tracing-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `annotation-property-replacement`
flag indicating whether jakarta ee annotations will have property replacements applied
get the `ee` `annotation-property-replacement` attribute.
operation: `/subsystem=ee:read-attribute(name=annotation-property-replacement)`" metadata = {parent=, title=syntax of the operation to get the `ee` `annotation-property-replacement`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `ear-subdeployments-isolated`
flag indicating whether each of the `subdeployments` within a .ear can access classes belonging to another `subdeployment` within the same .ear. a value of false means the `subdeployments` can see classes belonging to other `subdeployments` within the .ear.
get the `ee` `ear-subdeployments-isolated` attribute.
operation: `/subsystem=ee:read-attribute(name=ear-subdeployments-isolated)`" metadata = {parent=, title=syntax of the operation to get the `ee` `ear-subdeployments-isolated`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `global-modules`
a list of modules that should be made available to all deployments.
get the `ee` `global-modules` attribute.
operation: `/subsystem=ee:read-attribute(name=global-modules)`" metadata = {parent=, title=syntax of the operation to get the `ee` `global-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `jboss-descriptor-property-replacement`
flag indicating whether `jboss` specific deployment descriptors will have property replacements applied
get the `ee` `jboss-descriptor-property-replacement` attribute.
operation: `/subsystem=ee:read-attribute(name=jboss-descriptor-property-replacement)`" metadata = {parent=, title=syntax of the operation to get the `ee` `jboss-descriptor-property-replacement`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `spec-descriptor-property-replacement`
flag indicating whether descriptors defined by the jakarta ee specification will have property replacements applied
get the `ee` `spec-descriptor-property-replacement` attribute.
operation: `/subsystem=ee:read-attribute(name=spec-descriptor-property-replacement)`" metadata = {parent=, title=syntax of the operation to get the `ee` `spec-descriptor-property-replacement`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ee` `managed-scheduled-executor-service`
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-resource()`
To get the list of all the `ee` `managed-scheduled-executor-service` use '*' for `<managed-scheduled-executor-service name>`." metadata = {parent=, title=syntax of the operation to get a `ee` `managed-scheduled-executor-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `active-thread-count`
the approximate number of threads that are actively executing tasks.
get the `ee` `managed-scheduled-executor-service` `active-thread-count` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=active-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `active-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `completed-task-count`
the approximate total number of tasks that have completed execution.
get the `ee` `managed-scheduled-executor-service` `completed-task-count` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=completed-task-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `completed-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `context-service`
the name of the context service to be used by the scheduled executor.
get the `ee` `managed-scheduled-executor-service` `context-service` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=context-service)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `context-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `core-threads`
the number of threads to be used by the scheduled executor, even if they are idle. if this is not defined or is set to `0`, the core pool size will be calculated based on the number of available processors.
get the `ee` `managed-scheduled-executor-service` `core-threads` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=core-threads)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `current-queue-size`
the current size of the `executor's` task queue.
get the `ee` `managed-scheduled-executor-service` `current-queue-size` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=current-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `current-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `hung-task-termination-period`
the period, in milliseconds, for attempting hung tasks automatic termination, by cancelling such tasks, and interrupting their executing threads. if value is `0`, which is the default, hung tasks are never cancelled.
get the `ee` `managed-scheduled-executor-service` `hung-task-termination-period` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=hung-task-termination-period)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `hung-task-termination-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `hung-task-threshold`
the runtime, in milliseconds, for tasks to be considered hung by the scheduled executor. if `0` tasks are never considered hung.
get the `ee` `managed-scheduled-executor-service` `hung-task-threshold` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=hung-task-threshold)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `hung-task-threshold`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `hung-thread-count`
the number of executor threads that are hung.
get the `ee` `managed-scheduled-executor-service` `hung-thread-count` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=hung-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `hung-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `jndi-name`
the `jndi` name to lookup the managed scheduled executor service.
get the `ee` `managed-scheduled-executor-service` `jndi-name` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `keepalive-time`
when the number of threads is greater than the core, this is the maximum time, in milliseconds, that excess idle threads will wait for new tasks before terminating.
get the `ee` `managed-scheduled-executor-service` `keepalive-time` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `long-running-tasks`
flag which hints the duration of tasks executed by the scheduled executor.
get the `ee` `managed-scheduled-executor-service` `long-running-tasks` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=long-running-tasks)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `long-running-tasks`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `max-thread-count`
the largest number of executor threads.
get the `ee` `managed-scheduled-executor-service` `max-thread-count` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=max-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `max-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `reject-policy`
the policy to be applied to aborted tasks.
get the `ee` `managed-scheduled-executor-service` `reject-policy` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=reject-policy)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `reject-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `task-count`
the approximate total number of tasks that have ever been submitted for execution.
get the `ee` `managed-scheduled-executor-service` `task-count` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=task-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `thread-count`
the current number of executor threads.
get the `ee` `managed-scheduled-executor-service` `thread-count` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `thread-factory`
the name of the thread factory to be used by the scheduled executor.
get the `ee` `managed-scheduled-executor-service` `thread-factory` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-scheduled-executor-service` `thread-priority`
the priority applied to threads created by the executor.
get the `ee` `managed-scheduled-executor-service` `thread-priority` attribute.
operation: `/subsystem=ee/managed-scheduled-executor-service=<managed-scheduled-executor-service name>:read-attribute(name=thread-priority)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-scheduled-executor-service` `thread-priority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `service` `default-bindings` `context-service`
the `jndi` name where the default ee context service can be found
get the `ee` `service` `default-bindings` `context-service` attribute.
operation: `/subsystem=ee/service=default-bindings:read-attribute(name=context-service)`" metadata = {parent=, title=syntax of the operation to get the `ee` `service` `default-bindings` `context-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `service` `default-bindings` `datasource`
the `jndi` name where the default ee `datasource` can be found
get the `ee` `service` `default-bindings` `datasource` attribute.
operation: `/subsystem=ee/service=default-bindings:read-attribute(name=datasource)`" metadata = {parent=, title=syntax of the operation to get the `ee` `service` `default-bindings` `datasource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `service` `default-bindings` `jms-connection-factory`
the `jndi` name where the default ee jms connection factory can be found
get the `ee` `service` `default-bindings` `jms-connection-factory` attribute.
operation: `/subsystem=ee/service=default-bindings:read-attribute(name=jms-connection-factory)`" metadata = {parent=, title=syntax of the operation to get the `ee` `service` `default-bindings` `jms-connection-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `service` `default-bindings` `managed-executor-service`
the `jndi` name where the default ee managed executor service can be found
get the `ee` `service` `default-bindings` `managed-executor-service` attribute.
operation: `/subsystem=ee/service=default-bindings:read-attribute(name=managed-executor-service)`" metadata = {parent=, title=syntax of the operation to get the `ee` `service` `default-bindings` `managed-executor-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `service` `default-bindings` `managed-scheduled-executor-service`
the `jndi` name where the default ee managed scheduled executor service can be found
get the `ee` `service` `default-bindings` `managed-scheduled-executor-service` attribute.
operation: `/subsystem=ee/service=default-bindings:read-attribute(name=managed-scheduled-executor-service)`" metadata = {parent=, title=syntax of the operation to get the `ee` `service` `default-bindings` `managed-scheduled-executor-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `service` `default-bindings` `managed-thread-factory`
the `jndi` name where the default ee managed thread factory can be found
get the `ee` `service` `default-bindings` `managed-thread-factory` attribute.
operation: `/subsystem=ee/service=default-bindings:read-attribute(name=managed-thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `ee` `service` `default-bindings` `managed-thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ee` `global-directory`
operation: `/subsystem=ee/global-directory=<global-directory name>:read-resource()`
To get the list of all the `ee` `global-directory` use '*' for `<global-directory name>`." metadata = {parent=, title=syntax of the operation to get a `ee` `global-directory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `global-directory` `path`
the path of the directory to scan. it is treated as an absolute path, unless the '`relative-to`' attribute is specified, in which case the value is treated as relative to that path. if treated as an absolute path, the actual runtime pathname specified by the value of this attribute will be determined as follows: if this value is already absolute, then the value is directly used. otherwise, the runtime pathname is resolved in a `system-dependent` way.  on unix systems, a relative pathname is made absolute by resolving it against the current user directory. on `microsoft` windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.
get the `ee` `global-directory` `path` attribute.
operation: `/subsystem=ee/global-directory=<global-directory name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `ee` `global-directory` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `global-directory` `relative-to`
the name of another previously named path, or one of the standard paths provided by the system. if '`relative-to`' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute. the standard paths provided by the system include: `jboss.home` - the root directory of the `jboss` as distribution, `user.home` - `user's` home directory, `user.dir` - `user's` current working directory, `java.home` - java installation directory, `jboss.server.base.dir` - root directory for an individual server instance, `jboss.server.data.dir` - directory the server will use for persistent data file storage, `jboss.server.log.dir` - directory the server will use for log file storage, `jboss.server.tmp.dir` - directory the server will use for temporary file storage, and `jboss.domain.servers.dir` - directory under which a host controller will create the working area for individual server instances.
get the `ee` `global-directory` `relative-to` attribute.
operation: `/subsystem=ee/global-directory=<global-directory name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `ee` `global-directory` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ee` `managed-thread-factory`
operation: `/subsystem=ee/managed-thread-factory=<managed-thread-factory name>:read-resource()`
To get the list of all the `ee` `managed-thread-factory` use '*' for `<managed-thread-factory name>`." metadata = {parent=, title=syntax of the operation to get a `ee` `managed-thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-thread-factory` `context-service`
the name of the context service to be used by the managed thread factory
get the `ee` `managed-thread-factory` `context-service` attribute.
operation: `/subsystem=ee/managed-thread-factory=<managed-thread-factory name>:read-attribute(name=context-service)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-thread-factory` `context-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-thread-factory` `jndi-name`
the `jndi` name to lookup the managed thread factory.
get the `ee` `managed-thread-factory` `jndi-name` attribute.
operation: `/subsystem=ee/managed-thread-factory=<managed-thread-factory name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-thread-factory` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-thread-factory` `priority`
the priority applied to threads created by the factory
get the `ee` `managed-thread-factory` `priority` attribute.
operation: `/subsystem=ee/managed-thread-factory=<managed-thread-factory name>:read-attribute(name=priority)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-thread-factory` `priority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ee` `context-service`
operation: `/subsystem=ee/context-service=<context-service name>:read-resource()`
To get the list of all the `ee` `context-service` use '*' for `<context-service name>`." metadata = {parent=, title=syntax of the operation to get a `ee` `context-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `context-service` `jndi-name`
the `jndi` name to lookup the context service.
get the `ee` `context-service` `jndi-name` attribute.
operation: `/subsystem=ee/context-service=<context-service name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `ee` `context-service` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `context-service` `use-transaction-setup-provider`
flag which indicates if the transaction setup provider should be used.
get the `ee` `context-service` `use-transaction-setup-provider` attribute.
operation: `/subsystem=ee/context-service=<context-service name>:read-attribute(name=use-transaction-setup-provider)`" metadata = {parent=, title=syntax of the operation to get the `ee` `context-service` `use-transaction-setup-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ee` `managed-executor-service`
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-resource()`
To get the list of all the `ee` `managed-executor-service` use '*' for `<managed-executor-service name>`." metadata = {parent=, title=syntax of the operation to get a `ee` `managed-executor-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `active-thread-count`
the approximate number of threads that are actively executing tasks.
get the `ee` `managed-executor-service` `active-thread-count` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=active-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `active-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `completed-task-count`
the approximate total number of tasks that have completed execution.
get the `ee` `managed-executor-service` `completed-task-count` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=completed-task-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `completed-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `context-service`
the name of the context service to be used by the executor.
get the `ee` `managed-executor-service` `context-service` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=context-service)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `context-service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `core-threads`
the minimum number of threads to be used by the executor. if left undefined the default `core-size` is calculated based on the number of processors. a value of zero is not advised and in some cases invalid. see the `queue-length` attribute for details on how this value is used to determine the queuing strategy.
get the `ee` `managed-executor-service` `core-threads` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=core-threads)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `current-queue-size`
the current size of the `executor's` task queue.
get the `ee` `managed-executor-service` `current-queue-size` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=current-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `current-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `hung-task-termination-period`
the period, in milliseconds, for attempting hung tasks automatic termination, by cancelling such tasks, and interrupting their executing threads. if value is `0`, which is the default, hung tasks are never cancelled.
get the `ee` `managed-executor-service` `hung-task-termination-period` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=hung-task-termination-period)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `hung-task-termination-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `hung-task-threshold`
the runtime, in milliseconds, for tasks to be considered hung by the managed executor service. if value is `0` tasks are never considered hung.
get the `ee` `managed-executor-service` `hung-task-threshold` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=hung-task-threshold)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `hung-task-threshold`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `hung-thread-count`
the number of executor threads that are hung.
get the `ee` `managed-executor-service` `hung-thread-count` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=hung-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `hung-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `jndi-name`
the `jndi` name to lookup the managed executor service.
get the `ee` `managed-executor-service` `jndi-name` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `keepalive-time`
when the number of threads is greater than the core, this is the maximum time, in milliseconds, that excess idle threads will wait for new tasks before terminating.
get the `ee` `managed-executor-service` `keepalive-time` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `long-running-tasks`
flag which hints the duration of tasks executed by the executor.
get the `ee` `managed-executor-service` `long-running-tasks` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=long-running-tasks)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `long-running-tasks`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `max-thread-count`
the largest number of executor threads.
get the `ee` `managed-executor-service` `max-thread-count` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=max-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `max-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `max-threads`
the maximum number of threads to be used by the executor. if left undefined the value from `core-size` will be used. this value is ignored if an unbounded queue is used (only `core-threads` will be used in that case).
get the `ee` `managed-executor-service` `max-threads` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `queue-length`
the executors task queue capacity. a length of `0` means direct `hand-off` and possible rejection will occur. an undefined length (the default), or `integer.max_value`, indicates that an unbounded queue should be used. all other values specify an exact queue size. if an unbounded queue or direct `hand-off` is used, a `core-threads` value greater than zero is required.
get the `ee` `managed-executor-service` `queue-length` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=queue-length)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `queue-length`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `reject-policy`
the policy to be applied to aborted tasks.
get the `ee` `managed-executor-service` `reject-policy` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=reject-policy)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `reject-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `task-count`
the approximate total number of tasks that have ever been submitted for execution.
get the `ee` `managed-executor-service` `task-count` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=task-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `thread-count`
the current number of executor threads.
get the `ee` `managed-executor-service` `thread-count` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `thread-factory`
the name of the thread factory to be used by the executor.
get the `ee` `managed-executor-service` `thread-factory` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ee` `managed-executor-service` `thread-priority`
the priority applied to threads created by the executor.
get the `ee` `managed-executor-service` `thread-priority` attribute.
operation: `/subsystem=ee/managed-executor-service=<managed-executor-service name>:read-attribute(name=thread-priority)`" metadata = {parent=, title=syntax of the operation to get the `ee` `managed-executor-service` `thread-priority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `health` `security-enabled`
true if authentication is required to access the `http` endpoints on the `http` management interface.
get the `health` `security-enabled` attribute.
operation: `/subsystem=health:read-attribute(name=security-enabled)`" metadata = {parent=, title=syntax of the operation to get the `health` `security-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `auth-realm`
the authentication realm to use if no authentication `callbackhandler` is specified.
get the `remoting` `auth-realm` attribute.
operation: `/subsystem=remoting:read-attribute(name=auth-realm)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `auth-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `authentication-retries`
specify the number of times a client is allowed to retry authentication before closing the connection.
get the `remoting` `authentication-retries` attribute.
operation: `/subsystem=remoting:read-attribute(name=authentication-retries)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `authentication-retries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `authorize-id`
the `sasl` authorization id.  used as authentication user name to use if no authentication `callbackhandler` is specified and the selected `sasl` mechanism demands a user name.
get the `remoting` `authorize-id` attribute.
operation: `/subsystem=remoting:read-attribute(name=authorize-id)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `authorize-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `buffer-region-size`
the size of allocated buffer regions.
get the `remoting` `buffer-region-size` attribute.
operation: `/subsystem=remoting:read-attribute(name=buffer-region-size)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `buffer-region-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `heartbeat-interval`
the interval to use for connection heartbeat, in milliseconds.  if the connection is idle in the outbound direction for this amount of time, a ping message will be sent, which will trigger a corresponding reply message.
get the `remoting` `heartbeat-interval` attribute.
operation: `/subsystem=remoting:read-attribute(name=heartbeat-interval)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `heartbeat-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `max-inbound-channels`
the maximum number of inbound channels to support for a connection.
get the `remoting` `max-inbound-channels` attribute.
operation: `/subsystem=remoting:read-attribute(name=max-inbound-channels)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `max-inbound-channels`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `max-inbound-message-size`
the maximum inbound message size to be allowed.  messages exceeding this size will cause an exception to be thrown on the reading side as well as the writing side.
get the `remoting` `max-inbound-message-size` attribute.
operation: `/subsystem=remoting:read-attribute(name=max-inbound-message-size)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `max-inbound-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `max-inbound-messages`
the maximum number of concurrent inbound messages on a channel.
get the `remoting` `max-inbound-messages` attribute.
operation: `/subsystem=remoting:read-attribute(name=max-inbound-messages)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `max-inbound-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `max-outbound-channels`
the maximum number of outbound channels to support for a connection.
get the `remoting` `max-outbound-channels` attribute.
operation: `/subsystem=remoting:read-attribute(name=max-outbound-channels)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `max-outbound-channels`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `max-outbound-message-size`
the maximum outbound message size to send.  no messages larger than this well be transmitted; attempting to do so will cause an exception on the writing side.
get the `remoting` `max-outbound-message-size` attribute.
operation: `/subsystem=remoting:read-attribute(name=max-outbound-message-size)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `max-outbound-message-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `max-outbound-messages`
the maximum number of concurrent outbound messages on a channel.
get the `remoting` `max-outbound-messages` attribute.
operation: `/subsystem=remoting:read-attribute(name=max-outbound-messages)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `max-outbound-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `receive-buffer-size`
the size of the largest buffer that this endpoint will accept over a connection.
get the `remoting` `receive-buffer-size` attribute.
operation: `/subsystem=remoting:read-attribute(name=receive-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `receive-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `receive-window-size`
the maximum window size of the receive direction for connection channels, in bytes.
get the `remoting` `receive-window-size` attribute.
operation: `/subsystem=remoting:read-attribute(name=receive-window-size)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `receive-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `sasl-protocol`
where a `saslserver` or `saslclient` are created by default the protocol specified it '`remoting`', this can be used to override this.
get the `remoting` `sasl-protocol` attribute.
operation: `/subsystem=remoting:read-attribute(name=sasl-protocol)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `sasl-protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `send-buffer-size`
the size of the largest buffer that this endpoint will transmit over a connection.
get the `remoting` `send-buffer-size` attribute.
operation: `/subsystem=remoting:read-attribute(name=send-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `send-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `server-name`
the server side of the connection passes `it's` name to the client in the initial greeting, by default the name is automatically discovered from the local address of the connection or it can be overridden using this.
get the `remoting` `server-name` attribute.
operation: `/subsystem=remoting:read-attribute(name=server-name)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `server-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `transmit-window-size`
the maximum window size of the transmit direction for connection channels, in bytes.
get the `remoting` `transmit-window-size` attribute.
operation: `/subsystem=remoting:read-attribute(name=transmit-window-size)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `transmit-window-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `worker`
worker to use
get the `remoting` `worker` attribute.
operation: `/subsystem=remoting:read-attribute(name=worker)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `http-connector`
operation: `/subsystem=remoting/http-connector=<http-connector name>:read-resource()`
To get the list of all the `remoting` `http-connector` use '*' for `<http-connector name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `http-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `authentication-provider`
the "`authentication-provider`" element contains the name of the authentication provider to use for incoming connections.
get the `remoting` `http-connector` `authentication-provider` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>:read-attribute(name=authentication-provider)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `authentication-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `connector-ref`
the name (or names) of a connector in the undertow subsystem to connect to.
get the `remoting` `http-connector` `connector-ref` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>:read-attribute(name=connector-ref)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `connector-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `sasl-authentication-factory`
reference to the `sasl` authentication factory to use for this connector.
get the `remoting` `http-connector` `sasl-authentication-factory` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>:read-attribute(name=sasl-authentication-factory)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `sasl-authentication-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `sasl-protocol`
the protocol to pass into the `sasl` mechanisms used for authentication.
get the `remoting` `http-connector` `sasl-protocol` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>:read-attribute(name=sasl-protocol)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `sasl-protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security-realm`
the associated security realm to use for authentication for this connector.
get the `remoting` `http-connector` `security-realm` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>:read-attribute(name=security-realm)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `server-name`
the server name to send in the initial message exchange and for `sasl` based authentication.
get the `remoting` `http-connector` `server-name` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>:read-attribute(name=server-name)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `server-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `include-mechanisms`
the optional nested "`include-mechanisms`" element contains a list of allowed `sasl` mechanism names. only mechanisms that are present in this list will be allowed.
get the `remoting` `http-connector` `security` `sasl` `include-mechanisms` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl:read-attribute(name=include-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `include-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `qop`
the optional nested "`qop`" element contains a list of `quality-of-protection` values, in decreasing order of preference.
get the `remoting` `http-connector` `security` `sasl` `qop` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl:read-attribute(name=qop)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `qop`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `reuse-session`
the optional nested "`reuse-session`" boolean element specifies whether or not the server should attempt to reuse previously authenticated session information.  the mechanism may or may not support such reuse, and other factors may also prevent it.
get the `remoting` `http-connector` `security` `sasl` `reuse-session` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl:read-attribute(name=reuse-session)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `reuse-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `server-auth`
the optional nested "`server-auth`" boolean element specifies whether the server should authenticate to the client.  not all mechanisms may support this setting.
get the `remoting` `http-connector` `security` `sasl` `server-auth` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl:read-attribute(name=server-auth)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `server-auth`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `strength`
the optional nested "strength" element contains a list of cipher strength values, in decreasing order of preference.
get the `remoting` `http-connector` `security` `sasl` `strength` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl:read-attribute(name=strength)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `strength`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `forward-secrecy`
the optional nested "`forward-secrecy`" element contains a boolean value which specifies whether mechanisms that implement forward secrecy between sessions are required. forward secrecy means that breaking into one session will not automatically provide information for breaking into future sessions.
get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `forward-secrecy` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/sasl-policy=policy:read-attribute(name=forward-secrecy)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `forward-secrecy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-active`
the optional nested "`no-active`" element contains a boolean value which specifies whether mechanisms susceptible to active (`non-dictionary`) attacks are not permitted. "false" to permit, "true" to deny.
get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-active` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-active)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-active`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-anonymous`
the optional nested "`no-anonymous`" element contains a boolean value which specifies whether mechanisms that accept anonymous login are permitted.  "false" to permit, "true" to deny.
get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-anonymous` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-anonymous)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-anonymous`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-dictionary`
the optional nested "`no-dictionary`" element contains a boolean value which specifies whether mechanisms susceptible to passive dictionary attacks are permitted.  "false" to permit, "true" to deny.
get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-dictionary` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-dictionary)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-dictionary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-plain-text`
the optional nested "`no-plain-text`" element contains a boolean value which specifies whether mechanisms susceptible to simple plain passive attacks (`e.g`., "plain") are not permitted.    "false" to permit, "true" to deny.
get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-plain-text` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-plain-text)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `no-plain-text`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `pass-credentials`
the optional nested "`pass-credentials`" element contains a boolean value which specifies whether mechanisms that pass client credentials are required.
get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `pass-credentials` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/sasl-policy=policy:read-attribute(name=pass-credentials)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `sasl-policy` `policy` `pass-credentials`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `http-connector` `security` `sasl` `property`
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/property=<property name>:read-resource()`
To get the list of all the `remoting` `http-connector` `security` `sasl` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `http-connector` `security` `sasl` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `property` `value`
the property value.
get the `remoting` `http-connector` `security` `sasl` `property` `value` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/security=sasl/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `security` `sasl` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `http-connector` `property`
operation: `/subsystem=remoting/http-connector=<http-connector name>/property=<property name>:read-resource()`
To get the list of all the `remoting` `http-connector` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `http-connector` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `http-connector` `property` `value`
the property value.
get the `remoting` `http-connector` `property` `value` attribute.
operation: `/subsystem=remoting/http-connector=<http-connector name>/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `http-connector` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `outbound-connection`
operation: `/subsystem=remoting/outbound-connection=<outbound-connection name>:read-resource()`
To get the list of all the `remoting` `outbound-connection` use '*' for `<outbound-connection name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `outbound-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `outbound-connection` `uri`
the connection uri for the outbound connection.
get the `remoting` `outbound-connection` `uri` attribute.
operation: `/subsystem=remoting/outbound-connection=<outbound-connection name>:read-attribute(name=uri)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `outbound-connection` `uri`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `outbound-connection` `property`
operation: `/subsystem=remoting/outbound-connection=<outbound-connection name>/property=<property name>:read-resource()`
To get the list of all the `remoting` `outbound-connection` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `outbound-connection` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `outbound-connection` `property` `value`
the property value.
get the `remoting` `outbound-connection` `property` `value` attribute.
operation: `/subsystem=remoting/outbound-connection=<outbound-connection name>/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `outbound-connection` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `local-outbound-connection`
operation: `/subsystem=remoting/local-outbound-connection=<local-outbound-connection name>:read-resource()`
To get the list of all the `remoting` `local-outbound-connection` use '*' for `<local-outbound-connection name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `local-outbound-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `local-outbound-connection` `outbound-socket-binding-ref`
name of the `outbound-socket-binding` which will be used to determine the destination address and port for the connection.
get the `remoting` `local-outbound-connection` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=remoting/local-outbound-connection=<local-outbound-connection name>:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `local-outbound-connection` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `local-outbound-connection` `property`
operation: `/subsystem=remoting/local-outbound-connection=<local-outbound-connection name>/property=<property name>:read-resource()`
To get the list of all the `remoting` `local-outbound-connection` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `local-outbound-connection` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `local-outbound-connection` `property` `value`
the property value.
get the `remoting` `local-outbound-connection` `property` `value` attribute.
operation: `/subsystem=remoting/local-outbound-connection=<local-outbound-connection name>/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `local-outbound-connection` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `connector`
operation: `/subsystem=remoting/connector=<connector name>:read-resource()`
To get the list of all the `remoting` `connector` use '*' for `<connector name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `authentication-provider`
the "`authentication-provider`" element contains the name of the authentication provider to use for incoming connections.
get the `remoting` `connector` `authentication-provider` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=authentication-provider)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `authentication-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `protocol`
protocol used in the connection.
get the `remoting` `connector` `protocol` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `sasl-authentication-factory`
reference to the `sasl` authentication factory to secure this connector.
get the `remoting` `connector` `sasl-authentication-factory` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=sasl-authentication-factory)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `sasl-authentication-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `sasl-protocol`
the protocol to pass into the `sasl` mechanisms used for authentication.
get the `remoting` `connector` `sasl-protocol` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=sasl-protocol)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `sasl-protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security-realm`
the associated security realm to use for authentication for this connector.
get the `remoting` `connector` `security-realm` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=security-realm)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `server-name`
the server name to send in the initial message exchange and for `sasl` based authentication.
get the `remoting` `connector` `server-name` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=server-name)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `server-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `socket-binding`
the name of the socket binding to attach to.
get the `remoting` `connector` `socket-binding` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `ssl-context`
reference to the `sslcontext` to use for this connector.
get the `remoting` `connector` `ssl-context` attribute.
operation: `/subsystem=remoting/connector=<connector name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `include-mechanisms`
the optional nested "`include-mechanisms`" element contains a list of allowed `sasl` mechanism names. only mechanisms that are present in this list will be allowed.
get the `remoting` `connector` `security` `sasl` `include-mechanisms` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl:read-attribute(name=include-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `include-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `qop`
the optional nested "`qop`" element contains a list of `quality-of-protection` values, in decreasing order of preference.
get the `remoting` `connector` `security` `sasl` `qop` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl:read-attribute(name=qop)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `qop`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `reuse-session`
the optional nested "`reuse-session`" boolean element specifies whether or not the server should attempt to reuse previously authenticated session information.  the mechanism may or may not support such reuse, and other factors may also prevent it.
get the `remoting` `connector` `security` `sasl` `reuse-session` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl:read-attribute(name=reuse-session)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `reuse-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `server-auth`
the optional nested "`server-auth`" boolean element specifies whether the server should authenticate to the client.  not all mechanisms may support this setting.
get the `remoting` `connector` `security` `sasl` `server-auth` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl:read-attribute(name=server-auth)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `server-auth`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `strength`
the optional nested "strength" element contains a list of cipher strength values, in decreasing order of preference.
get the `remoting` `connector` `security` `sasl` `strength` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl:read-attribute(name=strength)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `strength`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `forward-secrecy`
the optional nested "`forward-secrecy`" element contains a boolean value which specifies whether mechanisms that implement forward secrecy between sessions are required. forward secrecy means that breaking into one session will not automatically provide information for breaking into future sessions.
get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `forward-secrecy` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/sasl-policy=policy:read-attribute(name=forward-secrecy)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `forward-secrecy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-active`
the optional nested "`no-active`" element contains a boolean value which specifies whether mechanisms susceptible to active (`non-dictionary`) attacks are not permitted. "false" to permit, "true" to deny.
get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-active` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-active)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-active`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-anonymous`
the optional nested "`no-anonymous`" element contains a boolean value which specifies whether mechanisms that accept anonymous login are permitted.  "false" to permit, "true" to deny.
get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-anonymous` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-anonymous)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-anonymous`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-dictionary`
the optional nested "`no-dictionary`" element contains a boolean value which specifies whether mechanisms susceptible to passive dictionary attacks are permitted.  "false" to permit, "true" to deny.
get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-dictionary` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-dictionary)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-dictionary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-plain-text`
the optional nested "`no-plain-text`" element contains a boolean value which specifies whether mechanisms susceptible to simple plain passive attacks (`e.g`., "plain") are not permitted.    "false" to permit, "true" to deny.
get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-plain-text` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/sasl-policy=policy:read-attribute(name=no-plain-text)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `no-plain-text`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `pass-credentials`
the optional nested "`pass-credentials`" element contains a boolean value which specifies whether mechanisms that pass client credentials are required.
get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `pass-credentials` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/sasl-policy=policy:read-attribute(name=pass-credentials)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `sasl-policy` `policy` `pass-credentials`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `connector` `security` `sasl` `property`
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/property=<property name>:read-resource()`
To get the list of all the `remoting` `connector` `security` `sasl` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `connector` `security` `sasl` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `security` `sasl` `property` `value`
the property value.
get the `remoting` `connector` `security` `sasl` `property` `value` attribute.
operation: `/subsystem=remoting/connector=<connector name>/security=sasl/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `security` `sasl` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `connector` `property`
operation: `/subsystem=remoting/connector=<connector name>/property=<property name>:read-resource()`
To get the list of all the `remoting` `connector` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `connector` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `connector` `property` `value`
the property value.
get the `remoting` `connector` `property` `value` attribute.
operation: `/subsystem=remoting/connector=<connector name>/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `connector` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `remote-outbound-connection`
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>:read-resource()`
To get the list of all the `remoting` `remote-outbound-connection` use '*' for `<remote-outbound-connection name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `remote-outbound-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `remote-outbound-connection` `authentication-context`
reference to the authentication context instance containing the configuration for outbound connections.
get the `remoting` `remote-outbound-connection` `authentication-context` attribute.
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>:read-attribute(name=authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `remote-outbound-connection` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `remote-outbound-connection` `outbound-socket-binding-ref`
name of the `outbound-socket-binding` which will be used to determine the destination address and port for the connection.
get the `remoting` `remote-outbound-connection` `outbound-socket-binding-ref` attribute.
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>:read-attribute(name=outbound-socket-binding-ref)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `remote-outbound-connection` `outbound-socket-binding-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `remote-outbound-connection` `protocol`
the protocol to use for the remote connection.
get the `remoting` `remote-outbound-connection` `protocol` attribute.
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `remote-outbound-connection` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `remote-outbound-connection` `security-realm`
reference to the security realm to use to obtain the password and `ssl` configuration.
get the `remoting` `remote-outbound-connection` `security-realm` attribute.
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>:read-attribute(name=security-realm)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `remote-outbound-connection` `security-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `remote-outbound-connection` `username`
the user name to use when authenticating against the remote server.
get the `remoting` `remote-outbound-connection` `username` attribute.
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>:read-attribute(name=username)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `remote-outbound-connection` `username`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `remoting` `remote-outbound-connection` `property`
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>/property=<property name>:read-resource()`
To get the list of all the `remoting` `remote-outbound-connection` `property` use '*' for `<property name>`." metadata = {parent=, title=syntax of the operation to get a `remoting` `remote-outbound-connection` `property`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `remoting` `remote-outbound-connection` `property` `value`
the property value.
get the `remoting` `remote-outbound-connection` `property` `value` attribute.
operation: `/subsystem=remoting/remote-outbound-connection=<remote-outbound-connection name>/property=<property name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `remoting` `remote-outbound-connection` `property` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `non-core-mbean-sensitivity`
whether or not core `mbeans`, `i.e`. `mbeans` not coming from the model controller, should be considered sensitive.
get the `jmx` `non-core-mbean-sensitivity` attribute.
operation: `/subsystem=jmx:read-attribute(name=non-core-mbean-sensitivity)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `non-core-mbean-sensitivity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `show-model`
alias for the existence of the 'resolved' model controller `jmx` facade. when writing, if set to 'true' it will add the 'resolved' model controller `jmx` facade resource with the default domain name.
get the `jmx` `show-model` attribute.
operation: `/subsystem=jmx:read-attribute(name=show-model)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `show-model`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `configuration` `audit-log` `enabled`
whether audit logging is enabled.
get the `jmx` `configuration` `audit-log` `enabled` attribute.
operation: `/subsystem=jmx/configuration=audit-log:read-attribute(name=enabled)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `configuration` `audit-log` `enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `configuration` `audit-log` `log-boot`
whether operations should be logged on server boot.
get the `jmx` `configuration` `audit-log` `log-boot` attribute.
operation: `/subsystem=jmx/configuration=audit-log:read-attribute(name=log-boot)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `configuration` `audit-log` `log-boot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `configuration` `audit-log` `log-read-only`
whether operations that do not modify the configuration or any runtime services should be logged.
get the `jmx` `configuration` `audit-log` `log-read-only` attribute.
operation: `/subsystem=jmx/configuration=audit-log:read-attribute(name=log-read-only)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `configuration` `audit-log` `log-read-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jmx` `configuration` `audit-log` `handler`
operation: `/subsystem=jmx/configuration=audit-log/handler=<handler name>:read-resource()`
To get the list of all the `jmx` `configuration` `audit-log` `handler` use '*' for `<handler name>`." metadata = {parent=, title=syntax of the operation to get a `jmx` `configuration` `audit-log` `handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `remoting-connector` `jmx` `use-management-endpoint`
if true the connector will use the management endpoint, otherwise it will use the `remoting` subsystem one
get the `jmx` `remoting-connector` `jmx` `use-management-endpoint` attribute.
operation: `/subsystem=jmx/remoting-connector=jmx:read-attribute(name=use-management-endpoint)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `remoting-connector` `jmx` `use-management-endpoint`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `expose-model` `resolved` `domain-name`
the domain name to use for the 'resolved' model controller `jmx` facade in the `mbeanserver`.
get the `jmx` `expose-model` `resolved` `domain-name` attribute.
operation: `/subsystem=jmx/expose-model=resolved:read-attribute(name=domain-name)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `expose-model` `resolved` `domain-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `expose-model` `resolved` `proper-property-format`
if false, property type attributes are represented as a `dmr` string, this is the legacy behaviour. if true, property type attributes are represented by a composite type where the key is a string, and the value has the same type as the property in the underlying model.
get the `jmx` `expose-model` `resolved` `proper-property-format` attribute.
operation: `/subsystem=jmx/expose-model=resolved:read-attribute(name=proper-property-format)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `expose-model` `resolved` `proper-property-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jmx` `expose-model` `expression` `domain-name`
the domain name to use for the 'expression' model controller `jmx` facade in the `mbeanserver`.
get the `jmx` `expose-model` `expression` `domain-name` attribute.
operation: `/subsystem=jmx/expose-model=expression:read-attribute(name=domain-name)`" metadata = {parent=, title=syntax of the operation to get the `jmx` `expose-model` `expression` `domain-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `default`
the default singleton policy
get the `singleton` `default` attribute.
operation: `/subsystem=singleton:read-attribute(name=default)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `default`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `singleton` `singleton-policy`
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>:read-resource()`
To get the list of all the `singleton` `singleton-policy` use '*' for `<singleton-policy name>`." metadata = {parent=, title=syntax of the operation to get a `singleton` `singleton-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `cache`
the cache backing the singleton `policy's` singleton service. if undefined, the default cache of the specified `cache-container` is used.
get the `singleton` `singleton-policy` `cache` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>:read-attribute(name=cache)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `cache-container`
the cache container backing the singleton `policy's` singleton service
get the `singleton` `singleton-policy` `cache-container` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `quorum`
the minimum number of nodes required before this singleton service will start
get the `singleton` `singleton-policy` `quorum` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>:read-attribute(name=quorum)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `quorum`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `random` `name-preferences`
the list of preferred node names
get the `singleton` `singleton-policy` `election-policy` `random` `name-preferences` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/election-policy=random:read-attribute(name=name-preferences)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `random` `name-preferences`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `random` `socket-binding-preferences`
the list of preferred node socket bindings
get the `singleton` `singleton-policy` `election-policy` `random` `socket-binding-preferences` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/election-policy=random:read-attribute(name=socket-binding-preferences)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `random` `socket-binding-preferences`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `simple` `name-preferences`
the list of preferred node names
get the `singleton` `singleton-policy` `election-policy` `simple` `name-preferences` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/election-policy=simple:read-attribute(name=name-preferences)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `simple` `name-preferences`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `simple` `position`
the position in the membership list from which the primary singleton provider will be chosen
get the `singleton` `singleton-policy` `election-policy` `simple` `position` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/election-policy=simple:read-attribute(name=position)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `simple` `position`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `simple` `socket-binding-preferences`
the list of preferred node socket bindings
get the `singleton` `singleton-policy` `election-policy` `simple` `socket-binding-preferences` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/election-policy=simple:read-attribute(name=socket-binding-preferences)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `election-policy` `simple` `socket-binding-preferences`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `singleton` `singleton-policy` `deployment`
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/deployment=<deployment name>:read-resource()`
To get the list of all the `singleton` `singleton-policy` `deployment` use '*' for `<deployment name>`." metadata = {parent=, title=syntax of the operation to get a `singleton` `singleton-policy` `deployment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `deployment` `is-primary`
indicates whether the local member is the primary provider of this singleton deployment
get the `singleton` `singleton-policy` `deployment` `is-primary` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/deployment=<deployment name>:read-attribute(name=is-primary)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `deployment` `is-primary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `deployment` `primary-provider`
the primary provider of this singleton deployment
get the `singleton` `singleton-policy` `deployment` `primary-provider` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/deployment=<deployment name>:read-attribute(name=primary-provider)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `deployment` `primary-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `deployment` `providers`
the members on which the singleton deployment is installed
get the `singleton` `singleton-policy` `deployment` `providers` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/deployment=<deployment name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `deployment` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `singleton` `singleton-policy` `service`
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/service=<service name>:read-resource()`
To get the list of all the `singleton` `singleton-policy` `service` use '*' for `<service name>`." metadata = {parent=, title=syntax of the operation to get a `singleton` `singleton-policy` `service`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `service` `is-primary`
indicates whether the local member is the primary provider of this singleton service
get the `singleton` `singleton-policy` `service` `is-primary` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/service=<service name>:read-attribute(name=is-primary)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `service` `is-primary`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `service` `primary-provider`
the primary provider of this singleton service
get the `singleton` `singleton-policy` `service` `primary-provider` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/service=<service name>:read-attribute(name=primary-provider)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `service` `primary-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `singleton` `singleton-policy` `service` `providers`
the members on which the singleton service is installed
get the `singleton` `singleton-policy` `service` `providers` attribute.
operation: `/subsystem=singleton/singleton-policy=<singleton-policy name>/service=<service name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `singleton` `singleton-policy` `service` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `deep-copy-subject-mode`
sets the copy mode of subjects done by the security managers to be deep copies that makes copies of the subject principals and credentials if they are `cloneable`. it should be set to true if subject include mutable content that can be corrupted when multiple threads have the same identity and cache `flushes/logout` clearing the subject in one thread results in subject references affecting other threads.
get the `security` `deep-copy-subject-mode` attribute.
operation: `/subsystem=security:read-attribute(name=deep-copy-subject-mode)`" metadata = {parent=, title=syntax of the operation to get the `security` `deep-copy-subject-mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `initialize-jacc`
indicates if this subsystem should be in charge of initializing jakarta authorization related services.
get the `security` `initialize-jacc` attribute.
operation: `/subsystem=security:read-attribute(name=initialize-jacc)`" metadata = {parent=, title=syntax of the operation to get the `security` `initialize-jacc`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `elytron-key-store`
operation: `/subsystem=security/elytron-key-store=<elytron-key-store name>:read-resource()`
To get the list of all the `security` `elytron-key-store` use '*' for `<elytron-key-store name>`." metadata = {parent=, title=syntax of the operation to get a `security` `elytron-key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `elytron-key-store` `legacy-jsse-config`
the name of the legacy security domain that contains a `jsse` configuration that can be used to export the key store.
get the `security` `elytron-key-store` `legacy-jsse-config` attribute.
operation: `/subsystem=security/elytron-key-store=<elytron-key-store name>:read-attribute(name=legacy-jsse-config)`" metadata = {parent=, title=syntax of the operation to get the `security` `elytron-key-store` `legacy-jsse-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `elytron-realm`
operation: `/subsystem=security/elytron-realm=<elytron-realm name>:read-resource()`
To get the list of all the `security` `elytron-realm` use '*' for `<elytron-realm name>`." metadata = {parent=, title=syntax of the operation to get a `security` `elytron-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `elytron-realm` `apply-role-mappers`
indicates to the realm if it should apply the role mappers defined in the legacy domain to the roles obtained from authenticated subjects or not.
get the `security` `elytron-realm` `apply-role-mappers` attribute.
operation: `/subsystem=security/elytron-realm=<elytron-realm name>:read-attribute(name=apply-role-mappers)`" metadata = {parent=, title=syntax of the operation to get the `security` `elytron-realm` `apply-role-mappers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `elytron-realm` `legacy-jaas-config`
the name of the legacy security domain to which authentication will be delegated.
get the `security` `elytron-realm` `legacy-jaas-config` attribute.
operation: `/subsystem=security/elytron-realm=<elytron-realm name>:read-attribute(name=legacy-jaas-config)`" metadata = {parent=, title=syntax of the operation to get the `security` `elytron-realm` `legacy-jaas-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain`
operation: `/subsystem=security/security-domain=<security-domain name>:read-resource()`
To get the list of all the `security` `security-domain` use '*' for `<security-domain name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `cache-type`
adds a cache to speed up authentication checks. allowed values are 'default' to use simple map as the cache and '`infinispan`' to use an `infinispan` cache.
get the `security` `security-domain` `cache-type` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>:read-attribute(name=cache-type)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `cache-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-modules`
list of provider modules
get the `security` `security-domain` `audit` `classic` `provider-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/audit=classic:read-attribute(name=provider-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `audit` `classic` `provider-module`
operation: `/subsystem=security/security-domain=<security-domain name>/audit=classic/provider-module=<provider-module name>:read-resource()`
To get the list of all the `security` `security-domain` `audit` `classic` `provider-module` use '*' for `<provider-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `audit` `classic` `provider-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `audit` `classic` `provider-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/audit=classic/provider-module=<provider-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-module` `module`
name of `jboss` module where the mapping module code is located.
get the `security` `security-domain` `audit` `classic` `provider-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/audit=classic/provider-module=<provider-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `audit` `classic` `provider-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/audit=classic/provider-module=<provider-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `audit` `classic` `provider-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-modules`
list of authorization modules
get the `security` `security-domain` `authorization` `classic` `policy-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authorization=classic:read-attribute(name=policy-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `authorization` `classic` `policy-module`
operation: `/subsystem=security/security-domain=<security-domain name>/authorization=classic/policy-module=<policy-module name>:read-resource()`
To get the list of all the `security` `security-domain` `authorization` `classic` `policy-module` use '*' for `<policy-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `authorization` `classic` `policy-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `authorization` `classic` `policy-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authorization=classic/policy-module=<policy-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `flag`
the flag controls how the module participates in the overall procedure. allowed values are requisite, required, sufficient or optional.
get the `security` `security-domain` `authorization` `classic` `policy-module` `flag` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authorization=classic/policy-module=<policy-module name>:read-attribute(name=flag)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `flag`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `module`
name of `jboss` module where the login module is located.
get the `security` `security-domain` `authorization` `classic` `policy-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authorization=classic/policy-module=<policy-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `authorization` `classic` `policy-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authorization=classic/policy-module=<policy-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authorization` `classic` `policy-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-modules`
list of authentication modules to be used.
get the `security` `security-domain` `authentication` `jaspi` `auth-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi:read-attribute(name=auth-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `authentication` `jaspi` `login-module-stack`
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/login-module-stack=<login-module-stack name>:read-resource()`
To get the list of all the `security` `security-domain` `authentication` `jaspi` `login-module-stack` use '*' for `<login-module-stack name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `authentication` `jaspi` `login-module-stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-modules`
list of authentication modules
get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/login-module-stack=<login-module-stack name>:read-attribute(name=login-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module`
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/login-module-stack=<login-module-stack name>/login-module=<login-module name>:read-resource()`
To get the list of all the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` use '*' for `<login-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/login-module-stack=<login-module-stack name>/login-module=<login-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `flag`
the flag controls how the module participates in the overall procedure. allowed values are requisite, required, sufficient or optional.
get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `flag` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/login-module-stack=<login-module-stack name>/login-module=<login-module name>:read-attribute(name=flag)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `flag`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `module`
name of `jboss` module where the login module is located.
get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/login-module-stack=<login-module-stack name>/login-module=<login-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/login-module-stack=<login-module-stack name>/login-module=<login-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `login-module-stack` `login-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `authentication` `jaspi` `auth-module`
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/auth-module=<auth-module name>:read-resource()`
To get the list of all the `security` `security-domain` `authentication` `jaspi` `auth-module` use '*' for `<auth-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `authentication` `jaspi` `auth-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `authentication` `jaspi` `auth-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/auth-module=<auth-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `flag`
the flag controls how the module participates in the overall procedure. allowed values are requisite, required, sufficient or optional.
get the `security` `security-domain` `authentication` `jaspi` `auth-module` `flag` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/auth-module=<auth-module name>:read-attribute(name=flag)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `flag`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `login-module-stack-ref`
reference to a login module stack name previously configured in the same security domain.
get the `security` `security-domain` `authentication` `jaspi` `auth-module` `login-module-stack-ref` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/auth-module=<auth-module name>:read-attribute(name=login-module-stack-ref)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `login-module-stack-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `module`
name of `jboss` module where the mapping module code is located.
get the `security` `security-domain` `authentication` `jaspi` `auth-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/auth-module=<auth-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `authentication` `jaspi` `auth-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=jaspi/auth-module=<auth-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `jaspi` `auth-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-modules`
list of authentication modules
get the `security` `security-domain` `authentication` `classic` `login-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=classic:read-attribute(name=login-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `authentication` `classic` `login-module`
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=classic/login-module=<login-module name>:read-resource()`
To get the list of all the `security` `security-domain` `authentication` `classic` `login-module` use '*' for `<login-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `authentication` `classic` `login-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `authentication` `classic` `login-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=classic/login-module=<login-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `flag`
the flag controls how the module participates in the overall procedure. allowed values are requisite, required, sufficient or optional.
get the `security` `security-domain` `authentication` `classic` `login-module` `flag` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=classic/login-module=<login-module name>:read-attribute(name=flag)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `flag`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `module`
name of `jboss` module where the login module is located.
get the `security` `security-domain` `authentication` `classic` `login-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=classic/login-module=<login-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `authentication` `classic` `login-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/authentication=classic/login-module=<login-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `authentication` `classic` `login-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `additional-properties`
additional properties that may be necessary to configure `jsse`.
get the `security` `security-domain` `jsse` `classic` `additional-properties` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=additional-properties)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `additional-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `cipher-suites`
comma separated list of cipher suites to enable on `sslsockets`.
get the `security` `security-domain` `jsse` `classic` `cipher-suites` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=cipher-suites)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `cipher-suites`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `client-alias`
preferred alias to use when the `keymanager` chooses the client alias.
get the `security` `security-domain` `jsse` `classic` `client-alias` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=client-alias)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `client-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `client-auth`
boolean attribute to indicate if `client's` certificates should also be authenticated on the server side.
get the `security` `security-domain` `jsse` `classic` `client-auth` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=client-auth)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `client-auth`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `key-manager`
`jsee` key manager factory
get the `security` `security-domain` `jsse` `classic` `key-manager` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=key-manager)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `key-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `keystore`
configures a `jsse` key store
get the `security` `security-domain` `jsse` `classic` `keystore` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=keystore)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `keystore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `protocols`
comma separated list of protocols to enable on `sslsockets`.
get the `security` `security-domain` `jsse` `classic` `protocols` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=protocols)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `protocols`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `server-alias`
preferred alias to use when the `keymanager` chooses the server alias.
get the `security` `security-domain` `jsse` `classic` `server-alias` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=server-alias)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `server-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `service-auth-token`
token to retrieve `privatekeys` from the `keystore`.
get the `security` `security-domain` `jsse` `classic` `service-auth-token` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=service-auth-token)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `service-auth-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `trust-manager`
`jsee` trust manager factory
get the `security` `security-domain` `jsse` `classic` `trust-manager` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=trust-manager)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `jsse` `classic` `truststore`
configures a `jsse` trust store
get the `security` `security-domain` `jsse` `classic` `truststore` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/jsse=classic:read-attribute(name=truststore)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `jsse` `classic` `truststore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-modules`
list of modules that map principal, role, and credential information
get the `security` `security-domain` `mapping` `classic` `mapping-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/mapping=classic:read-attribute(name=mapping-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `mapping` `classic` `mapping-module`
operation: `/subsystem=security/security-domain=<security-domain name>/mapping=classic/mapping-module=<mapping-module name>:read-resource()`
To get the list of all the `security` `security-domain` `mapping` `classic` `mapping-module` use '*' for `<mapping-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `mapping` `classic` `mapping-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `mapping` `classic` `mapping-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/mapping=classic/mapping-module=<mapping-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `module`
name of `jboss` module where the mapping module code is located.
get the `security` `security-domain` `mapping` `classic` `mapping-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/mapping=classic/mapping-module=<mapping-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `mapping` `classic` `mapping-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/mapping=classic/mapping-module=<mapping-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `type`
type of mapping this module performs. allowed values are principal, role, attribute or credential..
get the `security` `security-domain` `mapping` `classic` `mapping-module` `type` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/mapping=classic/mapping-module=<mapping-module name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `mapping` `classic` `mapping-module` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-modules`
list of trust modules
get the `security` `security-domain` `identity-trust` `classic` `trust-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/identity-trust=classic:read-attribute(name=trust-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `identity-trust` `classic` `trust-module`
operation: `/subsystem=security/security-domain=<security-domain name>/identity-trust=classic/trust-module=<trust-module name>:read-resource()`
To get the list of all the `security` `security-domain` `identity-trust` `classic` `trust-module` use '*' for `<trust-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `identity-trust` `classic` `trust-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `identity-trust` `classic` `trust-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/identity-trust=classic/trust-module=<trust-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `flag`
the flag controls how the module participates in the overall procedure. allowed values are requisite, required, sufficient or optional.
get the `security` `security-domain` `identity-trust` `classic` `trust-module` `flag` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/identity-trust=classic/trust-module=<trust-module name>:read-attribute(name=flag)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `flag`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `module`
name of `jboss` module where the login module is located.
get the `security` `security-domain` `identity-trust` `classic` `trust-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/identity-trust=classic/trust-module=<trust-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `identity-trust` `classic` `trust-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/identity-trust=classic/trust-module=<trust-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `identity-trust` `classic` `trust-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-modules`
list of `acl` modules
get the `security` `security-domain` `acl` `classic` `acl-modules` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/acl=classic:read-attribute(name=acl-modules)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `security-domain` `acl` `classic` `acl-module`
operation: `/subsystem=security/security-domain=<security-domain name>/acl=classic/acl-module=<acl-module name>:read-resource()`
To get the list of all the `security` `security-domain` `acl` `classic` `acl-module` use '*' for `<acl-module name>`." metadata = {parent=, title=syntax of the operation to get a `security` `security-domain` `acl` `classic` `acl-module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `code`
class name of the module to be instantiated.
get the `security` `security-domain` `acl` `classic` `acl-module` `code` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/acl=classic/acl-module=<acl-module name>:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `flag`
the flag controls how the module participates in the overall procedure. allowed values are requisite, required, sufficient or optional.
get the `security` `security-domain` `acl` `classic` `acl-module` `flag` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/acl=classic/acl-module=<acl-module name>:read-attribute(name=flag)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `flag`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `module`
name of `jboss` module where the login module is located.
get the `security` `security-domain` `acl` `classic` `acl-module` `module` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/acl=classic/acl-module=<acl-module name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `module-options`
list of module options containing a `name/value` pair.
get the `security` `security-domain` `acl` `classic` `acl-module` `module-options` attribute.
operation: `/subsystem=security/security-domain=<security-domain name>/acl=classic/acl-module=<acl-module name>:read-attribute(name=module-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `security-domain` `acl` `classic` `acl-module` `module-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `elytron-trust-manager`
operation: `/subsystem=security/elytron-trust-manager=<elytron-trust-manager name>:read-resource()`
To get the list of all the `security` `elytron-trust-manager` use '*' for `<elytron-trust-manager name>`." metadata = {parent=, title=syntax of the operation to get a `security` `elytron-trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `elytron-trust-manager` `legacy-jsse-config`
the name of the legacy security domain that contains a `jsse` configuration that can be used to export the trust manager.
get the `security` `elytron-trust-manager` `legacy-jsse-config` attribute.
operation: `/subsystem=security/elytron-trust-manager=<elytron-trust-manager name>:read-attribute(name=legacy-jsse-config)`" metadata = {parent=, title=syntax of the operation to get the `security` `elytron-trust-manager` `legacy-jsse-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `elytron-key-manager`
operation: `/subsystem=security/elytron-key-manager=<elytron-key-manager name>:read-resource()`
To get the list of all the `security` `elytron-key-manager` use '*' for `<elytron-key-manager name>`." metadata = {parent=, title=syntax of the operation to get a `security` `elytron-key-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `elytron-key-manager` `legacy-jsse-config`
the name of the legacy security domain that contains a `jsse` configuration that can be used to export the key manager.
get the `security` `elytron-key-manager` `legacy-jsse-config` attribute.
operation: `/subsystem=security/elytron-key-manager=<elytron-key-manager name>:read-attribute(name=legacy-jsse-config)`" metadata = {parent=, title=syntax of the operation to get the `security` `elytron-key-manager` `legacy-jsse-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `vault` `classic` `code`
fully qualified name of the security vault implementation.
get the `security` `vault` `classic` `code` attribute.
operation: `/subsystem=security/vault=classic:read-attribute(name=code)`" metadata = {parent=, title=syntax of the operation to get the `security` `vault` `classic` `code`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `vault` `classic` `vault-options`
security vault options.
get the `security` `vault` `classic` `vault-options` attribute.
operation: `/subsystem=security/vault=classic:read-attribute(name=vault-options)`" metadata = {parent=, title=syntax of the operation to get the `security` `vault` `classic` `vault-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `security` `elytron-trust-store`
operation: `/subsystem=security/elytron-trust-store=<elytron-trust-store name>:read-resource()`
To get the list of all the `security` `elytron-trust-store` use '*' for `<elytron-trust-store name>`." metadata = {parent=, title=syntax of the operation to get a `security` `elytron-trust-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `security` `elytron-trust-store` `legacy-jsse-config`
the name of the legacy security domain that contains a `jsse` configuration that can be used to export the trust store.
get the `security` `elytron-trust-store` `legacy-jsse-config` attribute.
operation: `/subsystem=security/elytron-trust-store=<elytron-trust-store name>:read-attribute(name=legacy-jsse-config)`" metadata = {parent=, title=syntax of the operation to get the `security` `elytron-trust-store` `legacy-jsse-config`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `weld` `development-mode`
weld comes with a special mode for application development. when the development mode is enabled, certain `built-in` tools, which facilitate the development of jakarta contexts and dependency injection applications are available. setting this attribute to true activates the development mode.
get the `weld` `development-mode` attribute.
operation: `/subsystem=weld:read-attribute(name=development-mode)`" metadata = {parent=, title=syntax of the operation to get the `weld` `development-mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `weld` `legacy-empty-beans-xml-treatment`
if true, all bean archives with empty `beans.xml` are considered to have discovery mode all.
get the `weld` `legacy-empty-beans-xml-treatment` attribute.
operation: `/subsystem=weld:read-attribute(name=legacy-empty-beans-xml-treatment)`" metadata = {parent=, title=syntax of the operation to get the `weld` `legacy-empty-beans-xml-treatment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `weld` `non-portable-mode`
if true, then the `non-portable` mode is enabled. the `non-portable` mode is suggested by the specification to overcome problems with legacy applications that do not use jakarta contexts and dependency injection `spi` properly and may be rejected by more strict validation in `cdi` `1.1`.
get the `weld` `non-portable-mode` attribute.
operation: `/subsystem=weld:read-attribute(name=non-portable-mode)`" metadata = {parent=, title=syntax of the operation to get the `weld` `non-portable-mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `weld` `require-bean-descriptor`
if true, then implicit bean archives without a bean descriptor file (`beans.xml`) are ignored by weld.
get the `weld` `require-bean-descriptor` attribute.
operation: `/subsystem=weld:read-attribute(name=require-bean-descriptor)`" metadata = {parent=, title=syntax of the operation to get the `weld` `require-bean-descriptor`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `weld` `thread-pool-size`
the number of threads to be used by the weld thread pool. the pool is shared across all jakarta contexts and dependency injection enabled deployments and used primarily for parallel weld bootstrapping.
get the `weld` `thread-pool-size` attribute.
operation: `/subsystem=weld:read-attribute(name=thread-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `weld` `thread-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-lra-coordinator` `host`
name of the undertow subsystem 'host' resource that the `lra` coordinator will be deployed to.
get the `microprofile-lra-coordinator` `host` attribute.
operation: `/subsystem=microprofile-lra-coordinator:read-attribute(name=host)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-lra-coordinator` `host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-lra-coordinator` `server`
name of the undertow subsystem 'server' resource that the `lra` coordinator will be deployed to.
get the `microprofile-lra-coordinator` `server` attribute.
operation: `/subsystem=microprofile-lra-coordinator:read-attribute(name=server)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-lra-coordinator` `server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `default-channel`
the default `jgroups` channel.
get the `jgroups` `default-channel` attribute.
operation: `/subsystem=jgroups:read-attribute(name=default-channel)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `default-channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jgroups` `channel`
operation: `/subsystem=jgroups/channel=<channel name>:read-resource()`
To get the list of all the `jgroups` `channel` use '*' for `<channel name>`." metadata = {parent=, title=syntax of the operation to get a `jgroups` `channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `address`
the `ip` address of the channel.
get the `jgroups` `channel` `address` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=address)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `address-as-uuid`
the address of the channel as a `uuid`.
get the `jgroups` `channel` `address-as-uuid` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=address-as-uuid)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `address-as-uuid`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `cluster`
the cluster name of the `jgroups` channel. if undefined, the name of the channel will be used.
get the `jgroups` `channel` `cluster` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=cluster)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `discard-own-messages`
if true, do not receive messages sent by this node (ourself).
get the `jgroups` `channel` `discard-own-messages` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=discard-own-messages)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `discard-own-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `module`
the module from which to load channel services
get the `jgroups` `channel` `module` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `received-bytes`
the number of bytes received by this channel.
get the `jgroups` `channel` `received-bytes` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=received-bytes)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `received-bytes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `received-messages`
the number of messages received by this channel.
get the `jgroups` `channel` `received-messages` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=received-messages)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `received-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `sent-bytes`
the number of bytes sent by this channel.
get the `jgroups` `channel` `sent-bytes` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=sent-bytes)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `sent-bytes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `sent-messages`
the number of messages sent by this channel.
get the `jgroups` `channel` `sent-messages` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=sent-messages)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `sent-messages`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `stack`
the protocol stack of the `jgroups` channel
get the `jgroups` `channel` `stack` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=stack)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `state`
the state of the channel (open, connecting, connected, closed).
get the `jgroups` `channel` `state` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=state)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `statistics-enabled`
if enabled, collect channel statistics.
get the `jgroups` `channel` `statistics-enabled` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `version`
the `jgroups` software version.
get the `jgroups` `channel` `version` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=version)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `version`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `view`
the `channel's` view of group membership.
get the `jgroups` `channel` `view` attribute.
operation: `/subsystem=jgroups/channel=<channel name>:read-attribute(name=view)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `view`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jgroups` `channel` `fork`
operation: `/subsystem=jgroups/channel=<channel name>/fork=<fork name>:read-resource()`
To get the list of all the `jgroups` `channel` `fork` use '*' for `<fork name>`." metadata = {parent=, title=syntax of the operation to get a `jgroups` `channel` `fork`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jgroups` `channel` `fork` `protocol`
operation: `/subsystem=jgroups/channel=<channel name>/fork=<fork name>/protocol=<protocol name>:read-resource()`
To get the list of all the `jgroups` `channel` `fork` `protocol` use '*' for `<protocol name>`." metadata = {parent=, title=syntax of the operation to get a `jgroups` `channel` `fork` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `fork` `protocol` `module`
the module with which to resolve the protocol type.
get the `jgroups` `channel` `fork` `protocol` `module` attribute.
operation: `/subsystem=jgroups/channel=<channel name>/fork=<fork name>/protocol=<protocol name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `fork` `protocol` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `fork` `protocol` `properties`
the properties of this protocol.
get the `jgroups` `channel` `fork` `protocol` `properties` attribute.
operation: `/subsystem=jgroups/channel=<channel name>/fork=<fork name>/protocol=<protocol name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `fork` `protocol` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `channel` `fork` `protocol` `statistics-enabled`
indicates whether or not this protocol will collect statistics overriding stack configuration.
get the `jgroups` `channel` `fork` `protocol` `statistics-enabled` attribute.
operation: `/subsystem=jgroups/channel=<channel name>/fork=<fork name>/protocol=<protocol name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `channel` `fork` `protocol` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jgroups` `stack`
operation: `/subsystem=jgroups/stack=<stack name>:read-resource()`
To get the list of all the `jgroups` `stack` use '*' for `<stack name>`." metadata = {parent=, title=syntax of the operation to get a `jgroups` `stack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `statistics-enabled`
indicates whether or not all protocols in the stack will collect statistics by default.
get the `jgroups` `stack` `statistics-enabled` attribute.
operation: `/subsystem=jgroups/stack=<stack name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jgroups` `stack` `protocol`
operation: `/subsystem=jgroups/stack=<stack name>/protocol=<protocol name>:read-resource()`
To get the list of all the `jgroups` `stack` `protocol` use '*' for `<protocol name>`." metadata = {parent=, title=syntax of the operation to get a `jgroups` `stack` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `protocol` `module`
the module with which to resolve the protocol type.
get the `jgroups` `stack` `protocol` `module` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/protocol=<protocol name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `protocol` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `protocol` `properties`
the properties of this protocol.
get the `jgroups` `stack` `protocol` `properties` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/protocol=<protocol name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `protocol` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `protocol` `statistics-enabled`
indicates whether or not this protocol will collect statistics overriding stack configuration.
get the `jgroups` `stack` `protocol` `statistics-enabled` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/protocol=<protocol name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `protocol` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jgroups` `stack` `transport`
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-resource()`
To get the list of all the `jgroups` `stack` `transport` use '*' for `<transport name>`." metadata = {parent=, title=syntax of the operation to get a `jgroups` `stack` `transport`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `diagnostics-socket-binding`
the diagnostics socket binding specification for this protocol layer, used to specify `ip` interfaces and ports for communication.
get the `jgroups` `stack` `transport` `diagnostics-socket-binding` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=diagnostics-socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `diagnostics-socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `machine`
the machine (`i.e`. host) identifier for this node. used by `infinispan` `topology-aware` consistent hash.
get the `jgroups` `stack` `transport` `machine` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=machine)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `machine`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `module`
the module with which to resolve the protocol type.
get the `jgroups` `stack` `transport` `module` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `properties`
the properties of this protocol.
get the `jgroups` `stack` `transport` `properties` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `rack`
the rack (`i.e`. server rack) identifier for this node. used by `infinispan` `topology-aware` consistent hash.
get the `jgroups` `stack` `transport` `rack` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=rack)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `rack`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `site`
the site (`i.e`. data centre) identifier for this node. used by `infinispan` `topology-aware` consistent hash.
get the `jgroups` `stack` `transport` `site` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=site)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `site`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `socket-binding`
defines the bind `address/port` used of the server socket used to receive messages from other cluster members.
get the `jgroups` `stack` `transport` `socket-binding` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=socket-binding)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `socket-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `statistics-enabled`
indicates whether or not this protocol will collect statistics overriding stack configuration.
get the `jgroups` `stack` `transport` `statistics-enabled` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `thread-pool` `default` `keepalive-time`
used to specify the amount of milliseconds that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `jgroups` `stack` `transport` `thread-pool` `default` `keepalive-time` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>/thread-pool=default:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `thread-pool` `default` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `thread-pool` `default` `max-threads`
the maximum thread pool size.
get the `jgroups` `stack` `transport` `thread-pool` `default` `max-threads` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>/thread-pool=default:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `thread-pool` `default` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `transport` `thread-pool` `default` `min-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `jgroups` `stack` `transport` `thread-pool` `default` `min-threads` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/transport=<transport name>/thread-pool=default:read-attribute(name=min-threads)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `transport` `thread-pool` `default` `min-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `module`
the module with which to resolve the protocol type.
get the `jgroups` `stack` `relay` `relay.RELAY2` `module` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/relay=relay.RELAY2:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `properties`
the properties of this protocol.
get the `jgroups` `stack` `relay` `relay.RELAY2` `properties` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/relay=relay.RELAY2:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `site`
the name of the local site.
get the `jgroups` `stack` `relay` `relay.RELAY2` `site` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/relay=relay.RELAY2:read-attribute(name=site)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `site`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `statistics-enabled`
indicates whether or not this protocol will collect statistics overriding stack configuration.
get the `jgroups` `stack` `relay` `relay.RELAY2` `statistics-enabled` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/relay=relay.RELAY2:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `jgroups` `stack` `relay` `relay.RELAY2` `remote-site`
operation: `/subsystem=jgroups/stack=<stack name>/relay=relay.RELAY2/remote-site=<remote-site name>:read-resource()`
To get the list of all the `jgroups` `stack` `relay` `relay.RELAY2` `remote-site` use '*' for `<remote-site name>`." metadata = {parent=, title=syntax of the operation to get a `jgroups` `stack` `relay` `relay.RELAY2` `remote-site`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `remote-site` `channel`
the name of the bridge channel used to communicate with this remote site.
get the `jgroups` `stack` `relay` `relay.RELAY2` `remote-site` `channel` attribute.
operation: `/subsystem=jgroups/stack=<stack name>/relay=relay.RELAY2/remote-site=<remote-site name>:read-attribute(name=channel)`" metadata = {parent=, title=syntax of the operation to get the `jgroups` `stack` `relay` `relay.RELAY2` `remote-site` `channel`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `default-authentication-context`
the default authentication context to be associated with all deployments.
get the `elytron` `default-authentication-context` attribute.
operation: `/subsystem=elytron:read-attribute(name=default-authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `default-authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `default-ssl-context`
reference to the `sslcontext` which should be globally registered as the default.
get the `elytron` `default-ssl-context` attribute.
operation: `/subsystem=elytron:read-attribute(name=default-ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `default-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `disallowed-providers`
a list of providers that are not allowed, and will be removed from the providers list.
get the `elytron` `disallowed-providers` attribute.
operation: `/subsystem=elytron:read-attribute(name=disallowed-providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `disallowed-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `final-providers`
reference to the providers that should be registered after all existing providers.
get the `elytron` `final-providers` attribute.
operation: `/subsystem=elytron:read-attribute(name=final-providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `final-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `initial-providers`
reference to the providers that should be registered ahead of all existing providers.
get the `elytron` `initial-providers` attribute.
operation: `/subsystem=elytron:read-attribute(name=initial-providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `initial-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `register-jaspi-factory`
should the elytron `jaspi` factory be globally registered?
get the `elytron` `register-jaspi-factory` attribute.
operation: `/subsystem=elytron:read-attribute(name=register-jaspi-factory)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `register-jaspi-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-properties`
security properties to be set.
get the `elytron` `security-properties` attribute.
operation: `/subsystem=elytron:read-attribute(name=security-properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `configurable-sasl-server-factory`
operation: `/subsystem=elytron/configurable-sasl-server-factory=<configurable-sasl-server-factory name>:read-resource()`
To get the list of all the `elytron` `configurable-sasl-server-factory` use '*' for `<configurable-sasl-server-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `configurable-sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `available-mechanisms`
the `sasl` mechanisms available from this factory after all filtering has been applied.
get the `elytron` `configurable-sasl-server-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/configurable-sasl-server-factory=<configurable-sasl-server-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `filters`
list of filters to be evaluated sequentially combining the results using 'or'.
get the `elytron` `configurable-sasl-server-factory` `filters` attribute.
operation: `/subsystem=elytron/configurable-sasl-server-factory=<configurable-sasl-server-factory name>:read-attribute(name=filters)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `filters`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `properties`
custom properties to be passed in to the `sasl` server factory calls.
get the `elytron` `configurable-sasl-server-factory` `properties` attribute.
operation: `/subsystem=elytron/configurable-sasl-server-factory=<configurable-sasl-server-factory name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `protocol`
the protocol that should be passed into factory when creating the mechanism.
get the `elytron` `configurable-sasl-server-factory` `protocol` attribute.
operation: `/subsystem=elytron/configurable-sasl-server-factory=<configurable-sasl-server-factory name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `sasl-server-factory`
the `sasl` server factory to be wrapped.
get the `elytron` `configurable-sasl-server-factory` `sasl-server-factory` attribute.
operation: `/subsystem=elytron/configurable-sasl-server-factory=<configurable-sasl-server-factory name>:read-attribute(name=sasl-server-factory)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `server-name`
the server name that should be passed into factory when creating the mechanism.
get the `elytron` `configurable-sasl-server-factory` `server-name` attribute.
operation: `/subsystem=elytron/configurable-sasl-server-factory=<configurable-sasl-server-factory name>:read-attribute(name=server-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-sasl-server-factory` `server-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-role-mapper`
operation: `/subsystem=elytron/custom-role-mapper=<custom-role-mapper name>:read-resource()`
To get the list of all the `elytron` `custom-role-mapper` use '*' for `<custom-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-role-mapper` `class-name`
fully qualified class name of the `rolemapper`
get the `elytron` `custom-role-mapper` `class-name` attribute.
operation: `/subsystem=elytron/custom-role-mapper=<custom-role-mapper name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-role-mapper` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-role-mapper` `configuration`
the optional `key/value` configuration for the `rolemapper`
get the `elytron` `custom-role-mapper` `configuration` attribute.
operation: `/subsystem=elytron/custom-role-mapper=<custom-role-mapper name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-role-mapper` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-role-mapper` `module`
name of the module to use to load the `rolemapper`
get the `elytron` `custom-role-mapper` `module` attribute.
operation: `/subsystem=elytron/custom-role-mapper=<custom-role-mapper name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-role-mapper` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `sasl-authentication-factory`
operation: `/subsystem=elytron/sasl-authentication-factory=<sasl-authentication-factory name>:read-resource()`
To get the list of all the `elytron` `sasl-authentication-factory` use '*' for `<sasl-authentication-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `sasl-authentication-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `sasl-authentication-factory` `available-mechanisms`
the `sasl` mechanisms available from this configuration after all filtering has been applied.
get the `elytron` `sasl-authentication-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/sasl-authentication-factory=<sasl-authentication-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `sasl-authentication-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `sasl-authentication-factory` `mechanism-configurations`
mechanism specific configuration
get the `elytron` `sasl-authentication-factory` `mechanism-configurations` attribute.
operation: `/subsystem=elytron/sasl-authentication-factory=<sasl-authentication-factory name>:read-attribute(name=mechanism-configurations)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `sasl-authentication-factory` `mechanism-configurations`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `sasl-authentication-factory` `sasl-server-factory`
the `saslserverfactory` to associate with this resource
get the `elytron` `sasl-authentication-factory` `sasl-server-factory` attribute.
operation: `/subsystem=elytron/sasl-authentication-factory=<sasl-authentication-factory name>:read-attribute(name=sasl-server-factory)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `sasl-authentication-factory` `sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `sasl-authentication-factory` `security-domain`
the `securitydomain` to associate with this resource
get the `elytron` `sasl-authentication-factory` `security-domain` attribute.
operation: `/subsystem=elytron/sasl-authentication-factory=<sasl-authentication-factory name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `sasl-authentication-factory` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `size-rotating-file-audit-log`
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-resource()`
To get the list of all the `elytron` `size-rotating-file-audit-log` use '*' for `<size-rotating-file-audit-log name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `size-rotating-file-audit-log`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `autoflush`
whether every event should be immediately flushed to disk.
get the `elytron` `size-rotating-file-audit-log` `autoflush` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `encoding`
the audit file encoding. default is `utf_8`.
get the `elytron` `size-rotating-file-audit-log` `encoding` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `format`
the format to use to record the audit event.
get the `elytron` `size-rotating-file-audit-log` `format` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=format)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `max-backup-index`
the maximum number of files to backup when rotating.
get the `elytron` `size-rotating-file-audit-log` `max-backup-index` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=max-backup-index)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `max-backup-index`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `path`
path of the file to be written.
get the `elytron` `size-rotating-file-audit-log` `path` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `relative-to`
the relative path to the audit log.
get the `elytron` `size-rotating-file-audit-log` `relative-to` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `rotate-on-boot`
whether the file should be rotated before the a new file is set.
get the `elytron` `size-rotating-file-audit-log` `rotate-on-boot` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=rotate-on-boot)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `rotate-on-boot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `rotate-size`
the log file size the file should rotate at.
get the `elytron` `size-rotating-file-audit-log` `rotate-size` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=rotate-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `rotate-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `suffix`
format of date used as suffix of log file names in `java.time.format.datetimeformatter`. the suffix does not play a role in determining when the file should be rotated.
get the `elytron` `size-rotating-file-audit-log` `suffix` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `synchronized`
whether every event should be immediately flushed to disk (if undefined will default to the value of synchronized).
get the `elytron` `size-rotating-file-audit-log` `synchronized` attribute.
operation: `/subsystem=elytron/size-rotating-file-audit-log=<size-rotating-file-audit-log name>:read-attribute(name=synchronized)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `size-rotating-file-audit-log` `synchronized`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `add-prefix-role-mapper`
operation: `/subsystem=elytron/add-prefix-role-mapper=<add-prefix-role-mapper name>:read-resource()`
To get the list of all the `elytron` `add-prefix-role-mapper` use '*' for `<add-prefix-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `add-prefix-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `add-prefix-role-mapper` `prefix`
the prefix to add to each role.
get the `elytron` `add-prefix-role-mapper` `prefix` attribute.
operation: `/subsystem=elytron/add-prefix-role-mapper=<add-prefix-role-mapper name>:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `add-prefix-role-mapper` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-http-server-mechanism-factory`
operation: `/subsystem=elytron/aggregate-http-server-mechanism-factory=<aggregate-http-server-mechanism-factory name>:read-resource()`
To get the list of all the `elytron` `aggregate-http-server-mechanism-factory` use '*' for `<aggregate-http-server-mechanism-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-http-server-mechanism-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-http-server-mechanism-factory` `available-mechanisms`
the `http` mechanisms available from this factory instance.
get the `elytron` `aggregate-http-server-mechanism-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/aggregate-http-server-mechanism-factory=<aggregate-http-server-mechanism-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-http-server-mechanism-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-http-server-mechanism-factory` `http-server-mechanism-factories`
the referenced `http` server factories to aggregate.
get the `elytron` `aggregate-http-server-mechanism-factory` `http-server-mechanism-factories` attribute.
operation: `/subsystem=elytron/aggregate-http-server-mechanism-factory=<aggregate-http-server-mechanism-factory name>:read-attribute(name=http-server-mechanism-factories)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-http-server-mechanism-factory` `http-server-mechanism-factories`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-evidence-decoder`
operation: `/subsystem=elytron/custom-evidence-decoder=<custom-evidence-decoder name>:read-resource()`
To get the list of all the `elytron` `custom-evidence-decoder` use '*' for `<custom-evidence-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-evidence-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-evidence-decoder` `class-name`
fully qualified class name of the evidence decoder.
get the `elytron` `custom-evidence-decoder` `class-name` attribute.
operation: `/subsystem=elytron/custom-evidence-decoder=<custom-evidence-decoder name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-evidence-decoder` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-evidence-decoder` `configuration`
the optional `key/value` configuration for the evidence decoder.
get the `elytron` `custom-evidence-decoder` `configuration` attribute.
operation: `/subsystem=elytron/custom-evidence-decoder=<custom-evidence-decoder name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-evidence-decoder` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-evidence-decoder` `module`
name of the module to use to load the evidence decoder.
get the `elytron` `custom-evidence-decoder` `module` attribute.
operation: `/subsystem=elytron/custom-evidence-decoder=<custom-evidence-decoder name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-evidence-decoder` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-security-event-listener`
operation: `/subsystem=elytron/aggregate-security-event-listener=<aggregate-security-event-listener name>:read-resource()`
To get the list of all the `elytron` `aggregate-security-event-listener` use '*' for `<aggregate-security-event-listener name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-security-event-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-security-event-listener` `security-event-listeners`
the referenced security event listener resources to aggregate.
get the `elytron` `aggregate-security-event-listener` `security-event-listeners` attribute.
operation: `/subsystem=elytron/aggregate-security-event-listener=<aggregate-security-event-listener name>:read-attribute(name=security-event-listeners)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-security-event-listener` `security-event-listeners`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `case-principal-transformer`
operation: `/subsystem=elytron/case-principal-transformer=<case-principal-transformer name>:read-resource()`
To get the list of all the `elytron` `case-principal-transformer` use '*' for `<case-principal-transformer name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `case-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `case-principal-transformer` `upper-case`
if set to true, the principal is adjusted to upper case. if set to false, the principal is adjusted to lower case.
get the `elytron` `case-principal-transformer` `upper-case` attribute.
operation: `/subsystem=elytron/case-principal-transformer=<case-principal-transformer name>:read-attribute(name=upper-case)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `case-principal-transformer` `upper-case`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `mapped-regex-realm-mapper`
operation: `/subsystem=elytron/mapped-regex-realm-mapper=<mapped-regex-realm-mapper name>:read-resource()`
To get the list of all the `elytron` `mapped-regex-realm-mapper` use '*' for `<mapped-regex-realm-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `mapped-regex-realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mapped-regex-realm-mapper` `delegate-realm-mapper`
the `realmmapper` to delegate to if the pattern does not match. if no delegate is specified then the default realm on the domain will be used instead. if the `username` does not match the pattern and a delegate `realm-mapper` is present, the result of `delegate-realm-mapper` is mapped via the `realm-map`.
get the `elytron` `mapped-regex-realm-mapper` `delegate-realm-mapper` attribute.
operation: `/subsystem=elytron/mapped-regex-realm-mapper=<mapped-regex-realm-mapper name>:read-attribute(name=delegate-realm-mapper)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mapped-regex-realm-mapper` `delegate-realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mapped-regex-realm-mapper` `pattern`
the regular expression which must contain at least one capture group to extract the realm from the name. if the regular expression matches more than one capture group, the first capture group is used.
get the `elytron` `mapped-regex-realm-mapper` `pattern` attribute.
operation: `/subsystem=elytron/mapped-regex-realm-mapper=<mapped-regex-realm-mapper name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mapped-regex-realm-mapper` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mapped-regex-realm-mapper` `realm-map`
mapping of realm name extracted using the regular expression to a defined realm name. if the value for the mapping is not in the map or the realm whose name is the result of the mapping does not exist in the given security domain, the default realm is used.
get the `elytron` `mapped-regex-realm-mapper` `realm-map` attribute.
operation: `/subsystem=elytron/mapped-regex-realm-mapper=<mapped-regex-realm-mapper name>:read-attribute(name=realm-map)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mapped-regex-realm-mapper` `realm-map`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `constant-permission-mapper`
operation: `/subsystem=elytron/constant-permission-mapper=<constant-permission-mapper name>:read-resource()`
To get the list of all the `elytron` `constant-permission-mapper` use '*' for `<constant-permission-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `constant-permission-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `constant-permission-mapper` `permission-sets`
the permission sets to assign.
get the `elytron` `constant-permission-mapper` `permission-sets` attribute.
operation: `/subsystem=elytron/constant-permission-mapper=<constant-permission-mapper name>:read-attribute(name=permission-sets)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `constant-permission-mapper` `permission-sets`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `constant-permission-mapper` `permissions`
the permissions to assign.
get the `elytron` `constant-permission-mapper` `permissions` attribute.
operation: `/subsystem=elytron/constant-permission-mapper=<constant-permission-mapper name>:read-attribute(name=permissions)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `constant-permission-mapper` `permissions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-security-event-listener`
operation: `/subsystem=elytron/custom-security-event-listener=<custom-security-event-listener name>:read-resource()`
To get the list of all the `elytron` `custom-security-event-listener` use '*' for `<custom-security-event-listener name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-security-event-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-security-event-listener` `class-name`
the class name of the implementation of the custom security event listener.
get the `elytron` `custom-security-event-listener` `class-name` attribute.
operation: `/subsystem=elytron/custom-security-event-listener=<custom-security-event-listener name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-security-event-listener` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-security-event-listener` `configuration`
the optional `key/value` configuration for the custom security event listener.
get the `elytron` `custom-security-event-listener` `configuration` attribute.
operation: `/subsystem=elytron/custom-security-event-listener=<custom-security-event-listener name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-security-event-listener` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-security-event-listener` `module`
the module to use to load the custom security event listener.
get the `elytron` `custom-security-event-listener` `module` attribute.
operation: `/subsystem=elytron/custom-security-event-listener=<custom-security-event-listener name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-security-event-listener` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `key-manager`
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-resource()`
To get the list of all the `elytron` `key-manager` use '*' for `<key-manager name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `key-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-manager` `algorithm`
the name of the algorithm to use to create the underlying `keymanagerfactory`.
get the `elytron` `key-manager` `algorithm` attribute.
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-attribute(name=algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-manager` `algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-manager` `alias-filter`
a filter to apply to the aliases returned from the `keystore`, can either be a comma separated list of aliases to return or one of the following formats `all:-alias1:-alias2`, `none:+alias1:+alias2`
get the `elytron` `key-manager` `alias-filter` attribute.
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-attribute(name=alias-filter)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-manager` `alias-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-manager` `credential-reference`
the credential reference to decrypt `keystore` item. (not a password of the `keystore`.)
get the `elytron` `key-manager` `credential-reference` attribute.
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-manager` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-manager` `generate-self-signed-certificate-host`
if the file that backs the `keystore` does not exist and this attribute is set, then a `self-signed` certificate will be generated for the specified host name. this is not intended for production use.
get the `elytron` `key-manager` `generate-self-signed-certificate-host` attribute.
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-attribute(name=generate-self-signed-certificate-host)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-manager` `generate-self-signed-certificate-host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-manager` `key-store`
reference to the `keystore` to use to initialise the underlying `keymanagerfactory`.
get the `elytron` `key-manager` `key-store` attribute.
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-attribute(name=key-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-manager` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-manager` `provider-name`
the name of the provider to use to create the underlying `keymanagerfactory`.
get the `elytron` `key-manager` `provider-name` attribute.
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-attribute(name=provider-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-manager` `provider-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-manager` `providers`
reference to obtain the provider[] to use when creating the underlying `keymanagerfactory`.
get the `elytron` `key-manager` `providers` attribute.
operation: `/subsystem=elytron/key-manager=<key-manager name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-manager` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `properties-realm`
operation: `/subsystem=elytron/properties-realm=<properties-realm name>:read-resource()`
To get the list of all the `elytron` `properties-realm` use '*' for `<properties-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `properties-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `properties-realm` `groups-attribute`
the name of the attribute in the returned `authorizationidentity` that should contain the group membership information for the identity.
get the `elytron` `properties-realm` `groups-attribute` attribute.
operation: `/subsystem=elytron/properties-realm=<properties-realm name>:read-attribute(name=groups-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `properties-realm` `groups-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `properties-realm` `groups-properties`
the properties file containing the users and their groups.
get the `elytron` `properties-realm` `groups-properties` attribute.
operation: `/subsystem=elytron/properties-realm=<properties-realm name>:read-attribute(name=groups-properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `properties-realm` `groups-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `properties-realm` `hash-charset`
the character set to use when converting the password string to a byte array.
get the `elytron` `properties-realm` `hash-charset` attribute.
operation: `/subsystem=elytron/properties-realm=<properties-realm name>:read-attribute(name=hash-charset)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `properties-realm` `hash-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `properties-realm` `hash-encoding`
the string format for the password if it is not stored in plain text.
get the `elytron` `properties-realm` `hash-encoding` attribute.
operation: `/subsystem=elytron/properties-realm=<properties-realm name>:read-attribute(name=hash-encoding)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `properties-realm` `hash-encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `properties-realm` `synchronized`
the time the properties files that back this realm were last loaded.
get the `elytron` `properties-realm` `synchronized` attribute.
operation: `/subsystem=elytron/properties-realm=<properties-realm name>:read-attribute(name=synchronized)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `properties-realm` `synchronized`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `properties-realm` `users-properties`
the properties file containing the users and their passwords.
get the `elytron` `properties-realm` `users-properties` attribute.
operation: `/subsystem=elytron/properties-realm=<properties-realm name>:read-attribute(name=users-properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `properties-realm` `users-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `http-authentication-factory`
operation: `/subsystem=elytron/http-authentication-factory=<http-authentication-factory name>:read-resource()`
To get the list of all the `elytron` `http-authentication-factory` use '*' for `<http-authentication-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `http-authentication-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `http-authentication-factory` `available-mechanisms`
the `http` mechanisms available from this configuration after all filtering has been applied.
get the `elytron` `http-authentication-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/http-authentication-factory=<http-authentication-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `http-authentication-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `http-authentication-factory` `http-server-mechanism-factory`
the `httpserverauthenticationmechanismfactory` to associate with this resource
get the `elytron` `http-authentication-factory` `http-server-mechanism-factory` attribute.
operation: `/subsystem=elytron/http-authentication-factory=<http-authentication-factory name>:read-attribute(name=http-server-mechanism-factory)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `http-authentication-factory` `http-server-mechanism-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `http-authentication-factory` `mechanism-configurations`
mechanism specific configuration
get the `elytron` `http-authentication-factory` `mechanism-configurations` attribute.
operation: `/subsystem=elytron/http-authentication-factory=<http-authentication-factory name>:read-attribute(name=mechanism-configurations)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `http-authentication-factory` `mechanism-configurations`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `http-authentication-factory` `security-domain`
the `securitydomain` to associate with this resource
get the `elytron` `http-authentication-factory` `security-domain` attribute.
operation: `/subsystem=elytron/http-authentication-factory=<http-authentication-factory name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `http-authentication-factory` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `permission-set`
operation: `/subsystem=elytron/permission-set=<permission-set name>:read-resource()`
To get the list of all the `elytron` `permission-set` use '*' for `<permission-set name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `permission-set`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `permission-set` `permissions`
the permissions in the permission set.
get the `elytron` `permission-set` `permissions` attribute.
operation: `/subsystem=elytron/permission-set=<permission-set name>:read-attribute(name=permissions)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `permission-set` `permissions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `regex-principal-transformer`
operation: `/subsystem=elytron/regex-principal-transformer=<regex-principal-transformer name>:read-resource()`
To get the list of all the `elytron` `regex-principal-transformer` use '*' for `<regex-principal-transformer name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `regex-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-principal-transformer` `pattern`
the regular expression to use to locate the portion of the name to be replaced.
get the `elytron` `regex-principal-transformer` `pattern` attribute.
operation: `/subsystem=elytron/regex-principal-transformer=<regex-principal-transformer name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-principal-transformer` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-principal-transformer` `replace-all`
should all occurrences of the pattern matched be replaced or only the first occurrence.
get the `elytron` `regex-principal-transformer` `replace-all` attribute.
operation: `/subsystem=elytron/regex-principal-transformer=<regex-principal-transformer name>:read-attribute(name=replace-all)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-principal-transformer` `replace-all`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-principal-transformer` `replacement`
the value to be used as the replacement.
get the `elytron` `regex-principal-transformer` `replacement` attribute.
operation: `/subsystem=elytron/regex-principal-transformer=<regex-principal-transformer name>:read-attribute(name=replacement)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-principal-transformer` `replacement`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `filesystem-realm`
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-resource()`
To get the list of all the `elytron` `filesystem-realm` use '*' for `<filesystem-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `filesystem-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `credential-store`
the reference to the credential store that contains the secret key to encrypt and decrypt the realm.
get the `elytron` `filesystem-realm` `credential-store` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=credential-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `credential-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `encoded`
whether the identity names should be stored encoded (`base32`) in file names. if encryption is configured, this attribute is ignored.
get the `elytron` `filesystem-realm` `encoded` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=encoded)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `encoded`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `hash-charset`
the character set to use when converting the password string to a byte array.
get the `elytron` `filesystem-realm` `hash-charset` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=hash-charset)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `hash-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `hash-encoding`
the string format for the password if it is not stored in plain text.
get the `elytron` `filesystem-realm` `hash-encoding` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=hash-encoding)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `hash-encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `key-store`
the reference to the key store that contains the key pair to use to verify integrity.
get the `elytron` `filesystem-realm` `key-store` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=key-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `key-store-alias`
the alias that identifies the `privatekeyentry` within the key store to use to verify integrity.
get the `elytron` `filesystem-realm` `key-store-alias` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=key-store-alias)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `key-store-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `levels`
the number of levels of directory hashing to apply.
get the `elytron` `filesystem-realm` `levels` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=levels)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `levels`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `path`
the path to the file containing the realm.
get the `elytron` `filesystem-realm` `path` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `relative-to`
the `pre-defined` path the path is relative to.
get the `elytron` `filesystem-realm` `relative-to` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filesystem-realm` `secret-key`
the alias of the secret key to encrypt and decrypt the realm.
get the `elytron` `filesystem-realm` `secret-key` attribute.
operation: `/subsystem=elytron/filesystem-realm=<filesystem-realm name>:read-attribute(name=secret-key)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filesystem-realm` `secret-key`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `secret-key-credential-store`
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-resource()`
To get the list of all the `elytron` `secret-key-credential-store` use '*' for `<secret-key-credential-store name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `secret-key-credential-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `secret-key-credential-store` `create`
if the credential store does not exist should it be dynamically created?
get the `elytron` `secret-key-credential-store` `create` attribute.
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-attribute(name=create)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `secret-key-credential-store` `create`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `secret-key-credential-store` `default-alias`
the alias name of any key generated by default.
get the `elytron` `secret-key-credential-store` `default-alias` attribute.
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-attribute(name=default-alias)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `secret-key-credential-store` `default-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `secret-key-credential-store` `key-size`
the default size for any generated keys.
get the `elytron` `secret-key-credential-store` `key-size` attribute.
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-attribute(name=key-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `secret-key-credential-store` `key-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `secret-key-credential-store` `path`
the path to the credential store.
get the `elytron` `secret-key-credential-store` `path` attribute.
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `secret-key-credential-store` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `secret-key-credential-store` `populate`
if the credential store does not contain the `default-alias` should it be dynamically added?
get the `elytron` `secret-key-credential-store` `populate` attribute.
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-attribute(name=populate)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `secret-key-credential-store` `populate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `secret-key-credential-store` `relative-to`
a reference to a previously defined path that the path is relative to.
get the `elytron` `secret-key-credential-store` `relative-to` attribute.
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `secret-key-credential-store` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `secret-key-credential-store` `state`
the state of the credential store service.
get the `elytron` `secret-key-credential-store` `state` attribute.
operation: `/subsystem=elytron/secret-key-credential-store=<secret-key-credential-store name>:read-attribute(name=state)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `secret-key-credential-store` `state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `logical-role-mapper`
operation: `/subsystem=elytron/logical-role-mapper=<logical-role-mapper name>:read-resource()`
To get the list of all the `elytron` `logical-role-mapper` use '*' for `<logical-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `logical-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `logical-role-mapper` `left`
reference to a role mapper to be used on the left side of the operation.
get the `elytron` `logical-role-mapper` `left` attribute.
operation: `/subsystem=elytron/logical-role-mapper=<logical-role-mapper name>:read-attribute(name=left)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `logical-role-mapper` `left`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `logical-role-mapper` `logical-operation`
the logical operation to be performed on the role mapper mappings.
get the `elytron` `logical-role-mapper` `logical-operation` attribute.
operation: `/subsystem=elytron/logical-role-mapper=<logical-role-mapper name>:read-attribute(name=logical-operation)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `logical-role-mapper` `logical-operation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `logical-role-mapper` `right`
reference to a role mapper to be used on the right side of the operation.
get the `elytron` `logical-role-mapper` `right` attribute.
operation: `/subsystem=elytron/logical-role-mapper=<logical-role-mapper name>:read-attribute(name=right)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `logical-role-mapper` `right`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `failover-realm`
operation: `/subsystem=elytron/failover-realm=<failover-realm name>:read-resource()`
To get the list of all the `elytron` `failover-realm` use '*' for `<failover-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `failover-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `failover-realm` `delegate-realm`
reference to the security realm to use as a default.
get the `elytron` `failover-realm` `delegate-realm` attribute.
operation: `/subsystem=elytron/failover-realm=<failover-realm name>:read-attribute(name=delegate-realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `failover-realm` `delegate-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `failover-realm` `emit-events`
whether `securityevent` signifying `delegate-realm` unavailability should be emitted.
get the `elytron` `failover-realm` `emit-events` attribute.
operation: `/subsystem=elytron/failover-realm=<failover-realm name>:read-attribute(name=emit-events)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `failover-realm` `emit-events`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `failover-realm` `failover-realm`
reference to the security realm to use in case the `delegate-realm` is unavailable.
get the `elytron` `failover-realm` `failover-realm` attribute.
operation: `/subsystem=elytron/failover-realm=<failover-realm name>:read-attribute(name=failover-realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `failover-realm` `failover-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `periodic-rotating-file-audit-log`
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-resource()`
To get the list of all the `elytron` `periodic-rotating-file-audit-log` use '*' for `<periodic-rotating-file-audit-log name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `periodic-rotating-file-audit-log`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `autoflush`
whether every event should be immediately flushed to disk (if undefined will default to the value of synchronized).
get the `elytron` `periodic-rotating-file-audit-log` `autoflush` attribute.
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `encoding`
the audit file encoding. default is `utf_8`.
get the `elytron` `periodic-rotating-file-audit-log` `encoding` attribute.
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `format`
the format to use to record the audit event.
get the `elytron` `periodic-rotating-file-audit-log` `format` attribute.
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-attribute(name=format)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `path`
path of the file to be written.
get the `elytron` `periodic-rotating-file-audit-log` `path` attribute.
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `relative-to`
the relative path to the audit log.
get the `elytron` `periodic-rotating-file-audit-log` `relative-to` attribute.
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `suffix`
the suffix string in a format which can be understood by `java.time.format.datetimeformatter`. the period of the rotation is automatically calculated based on the suffix.
get the `elytron` `periodic-rotating-file-audit-log` `suffix` attribute.
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `synchronized`
whether every event should be immediately synchronised to disk.
get the `elytron` `periodic-rotating-file-audit-log` `synchronized` attribute.
operation: `/subsystem=elytron/periodic-rotating-file-audit-log=<periodic-rotating-file-audit-log name>:read-attribute(name=synchronized)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `periodic-rotating-file-audit-log` `synchronized`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `ldap-key-store`
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-resource()`
To get the list of all the `elytron` `ldap-key-store` use '*' for `<ldap-key-store name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `ldap-key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `alias-attribute`
the name of `ldap` attribute, where will be item alias stored.
get the `elytron` `ldap-key-store` `alias-attribute` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=alias-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `alias-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `certificate-attribute`
the name of `ldap` attribute, where will be certificate stored.
get the `elytron` `ldap-key-store` `certificate-attribute` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=certificate-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `certificate-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `certificate-chain-attribute`
the name of `ldap` attribute, where will be certificate chain stored.
get the `elytron` `ldap-key-store` `certificate-chain-attribute` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=certificate-chain-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `certificate-chain-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `certificate-chain-encoding`
the encoding of the certificate chain.
get the `elytron` `ldap-key-store` `certificate-chain-encoding` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=certificate-chain-encoding)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `certificate-chain-encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `certificate-type`
the type of the certificate.
get the `elytron` `ldap-key-store` `certificate-type` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=certificate-type)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `certificate-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `dir-context`
the name of `dircontext`, which will be used to communication with `ldap` server.
get the `elytron` `ldap-key-store` `dir-context` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=dir-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `dir-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `filter-alias`
the `ldap` filter for obtaining an item of the `keystore` by alias. if this is not specified then the default value will be (`alias_attribute={0`}). the string '{`0`}' will be replaced by the searched alias and the '`alias_attribute`' value will be the value of the attribute '`alias-attribute`'.
get the `elytron` `ldap-key-store` `filter-alias` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=filter-alias)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `filter-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `filter-certificate`
the `ldap` filter for obtaining an item of the `keystore` by certificate. if this is not specified then the default value will be (`certificate_attribute={0`}). the string '{`0`}' will be replaced by searched encoded certificate and the '`certificate_attribute`' will be the value of the attribute '`certificate-attribute`'.
get the `elytron` `ldap-key-store` `filter-certificate` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=filter-certificate)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `filter-certificate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `filter-iterate`
the `ldap` filter for iterating over all items of the `keystore`. if this is not specified then the default value will be (`alias_attribute`=*). the '`alias_attribute`' will be the value of the attribute '`alias-attribute`'.
get the `elytron` `ldap-key-store` `filter-iterate` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=filter-iterate)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `filter-iterate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `key-attribute`
the name of `ldap` attribute, where will be key stored.
get the `elytron` `ldap-key-store` `key-attribute` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=key-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `key-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `key-type`
the type of `keystore`, in which will be key serialized to `ldap` attribute.
get the `elytron` `ldap-key-store` `key-type` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=key-type)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `key-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `new-item-template`
configuration for item creation. define how will look `ldap` entry of newly created `keystore` item.
get the `elytron` `ldap-key-store` `new-item-template` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=new-item-template)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `new-item-template`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `search-path`
the path in `ldap`, where will be `keystore` items searched.
get the `elytron` `ldap-key-store` `search-path` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=search-path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `search-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `search-recursive`
if the `ldap` search should be recursive.
get the `elytron` `ldap-key-store` `search-recursive` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=search-recursive)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `search-recursive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `search-time-limit`
the time limit for obtaining `keystore` items from `ldap`.
get the `elytron` `ldap-key-store` `search-time-limit` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=search-time-limit)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `search-time-limit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `size`
the size of `ldap` `keystore` in amount of `items/aliases`.
get the `elytron` `ldap-key-store` `size` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-key-store` `state`
the state of the underlying service that represents this `keystore` at runtime, if it is anything other than up runtime operations will not be available.
get the `elytron` `ldap-key-store` `state` attribute.
operation: `/subsystem=elytron/ldap-key-store=<ldap-key-store name>:read-attribute(name=state)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-key-store` `state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `service-loader-http-server-mechanism-factory`
operation: `/subsystem=elytron/service-loader-http-server-mechanism-factory=<service-loader-http-server-mechanism-factory name>:read-resource()`
To get the list of all the `elytron` `service-loader-http-server-mechanism-factory` use '*' for `<service-loader-http-server-mechanism-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `service-loader-http-server-mechanism-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `service-loader-http-server-mechanism-factory` `available-mechanisms`
the `http` mechanisms available from this factory instance.
get the `elytron` `service-loader-http-server-mechanism-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/service-loader-http-server-mechanism-factory=<service-loader-http-server-mechanism-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `service-loader-http-server-mechanism-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `service-loader-http-server-mechanism-factory` `module`
the module to use to obtain the `classloader` to load the factories, if not specified the `classloader` to load the resource will be used instead.
get the `elytron` `service-loader-http-server-mechanism-factory` `module` attribute.
operation: `/subsystem=elytron/service-loader-http-server-mechanism-factory=<service-loader-http-server-mechanism-factory name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `service-loader-http-server-mechanism-factory` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `server-ssl-context`
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-resource()`
To get the list of all the `elytron` `server-ssl-context` use '*' for `<server-ssl-context name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `server-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `active-session-count`
the count of current active sessions.
get the `elytron` `server-ssl-context` `active-session-count` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=active-session-count)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `active-session-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `authentication-optional`
rejecting of the client certificate by the security domain will not prevent the connection. allows a fall through to use other authentication mechanisms (like form login) when the client certificate is rejected by security domain. has an effect only when the security domain is set.
get the `elytron` `server-ssl-context` `authentication-optional` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=authentication-optional)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `authentication-optional`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `cipher-suite-filter`
the filter to apply to specify the enabled cipher suites for `tlsv1.2` and below.
get the `elytron` `server-ssl-context` `cipher-suite-filter` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=cipher-suite-filter)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `cipher-suite-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `cipher-suite-names`
the filter to apply to specify the enabled cipher suites for `tlsv1.3`.
get the `elytron` `server-ssl-context` `cipher-suite-names` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=cipher-suite-names)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `cipher-suite-names`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `final-principal-transformer`
a final principal transformer to apply for this mechanism realm.
get the `elytron` `server-ssl-context` `final-principal-transformer` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=final-principal-transformer)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `final-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `key-manager`
reference to the key manager to use within the `sslcontext`.
get the `elytron` `server-ssl-context` `key-manager` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=key-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `key-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `maximum-session-cache-size`
the maximum number of `ssl` sessions in the cache. the default value -`1` means use the `jvm` default value. value zero means there is no limit.
get the `elytron` `server-ssl-context` `maximum-session-cache-size` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=maximum-session-cache-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `maximum-session-cache-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `need-client-auth`
to require a client certificate on `ssl` handshake. connection without trusted client certificate (see `trust-manager`) will be rejected.
get the `elytron` `server-ssl-context` `need-client-auth` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=need-client-auth)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `need-client-auth`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `post-realm-principal-transformer`
a principal transformer to apply after the realm is selected.
get the `elytron` `server-ssl-context` `post-realm-principal-transformer` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=post-realm-principal-transformer)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `post-realm-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `pre-realm-principal-transformer`
a principal transformer to apply before the realm is selected.
get the `elytron` `server-ssl-context` `pre-realm-principal-transformer` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=pre-realm-principal-transformer)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `pre-realm-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `protocols`
the enabled protocols.
get the `elytron` `server-ssl-context` `protocols` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=protocols)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `protocols`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `provider-name`
the name of the provider to use. if not specified, all providers from providers will be passed to the `sslcontext`.
get the `elytron` `server-ssl-context` `provider-name` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=provider-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `provider-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `providers`
the name of the providers to obtain the provider[] to use to load the `sslcontext`.
get the `elytron` `server-ssl-context` `providers` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `realm-mapper`
the realm mapper to be used for `ssl` authentication.
get the `elytron` `server-ssl-context` `realm-mapper` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=realm-mapper)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `security-domain`
the security domain to use for authentication during `ssl` session establishment.
get the `elytron` `server-ssl-context` `security-domain` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `session-timeout`
the timeout for `ssl` sessions, in seconds. the default value -`1` means use the `jvm` default value. value zero means there is no limit.
get the `elytron` `server-ssl-context` `session-timeout` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=session-timeout)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `session-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `trust-manager`
reference to the trust manager to use within the `sslcontext`.
get the `elytron` `server-ssl-context` `trust-manager` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=trust-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `use-cipher-suites-order`
to honor local cipher suites preference.
get the `elytron` `server-ssl-context` `use-cipher-suites-order` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=use-cipher-suites-order)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `use-cipher-suites-order`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `want-client-auth`
to request (but not to require) a client certificate on `ssl` handshake. if a security domain is referenced and supports `x509` evidence, this will be set to true automatically. ignored when `need-client-auth` is set.
get the `elytron` `server-ssl-context` `want-client-auth` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=want-client-auth)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `want-client-auth`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `wrap`
should the `sslengine`, `sslsocket`, and `sslserversocket` instances returned be wrapped to protect against further modification.
get the `elytron` `server-ssl-context` `wrap` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>:read-attribute(name=wrap)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `wrap`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `server-ssl-context` `ssl-session`
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-resource()`
To get the list of all the `elytron` `server-ssl-context` `ssl-session` use '*' for `<ssl-session name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `server-ssl-context` `ssl-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `application-buffer-size`
the application buffer size as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `application-buffer-size` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=application-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `application-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `cipher-suite`
the selected cipher suite as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `cipher-suite` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=cipher-suite)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `cipher-suite`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `creation-time`
the creation time as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `creation-time` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=creation-time)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `creation-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `last-accessed-time`
the last accessed time as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `last-accessed-time` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=last-accessed-time)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `last-accessed-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `local-certificates`
the local certificates from the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `local-certificates` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=local-certificates)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `local-certificates`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `local-principal`
the local principal as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `local-principal` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=local-principal)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `local-principal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `packet-buffer-size`
the packet buffer size as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `packet-buffer-size` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=packet-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `packet-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-certificates`
the peer certificates from the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `peer-certificates` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-certificates)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-certificates`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-host`
the peer host as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `peer-host` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-host)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-port`
the peer port as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `peer-port` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-port)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-principal`
the peer principal as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `peer-principal` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-principal)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `peer-principal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `protocol`
the protocol as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `protocol` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `valid`
the validity of the session as reported by the `sslsession`.
get the `elytron` `server-ssl-context` `ssl-session` `valid` attribute.
operation: `/subsystem=elytron/server-ssl-context=<server-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=valid)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-context` `ssl-session` `valid`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `chained-principal-transformer`
operation: `/subsystem=elytron/chained-principal-transformer=<chained-principal-transformer name>:read-resource()`
To get the list of all the `elytron` `chained-principal-transformer` use '*' for `<chained-principal-transformer name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `chained-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `chained-principal-transformer` `principal-transformers`
the referenced principal transformers to chain.
get the `elytron` `chained-principal-transformer` `principal-transformers` attribute.
operation: `/subsystem=elytron/chained-principal-transformer=<chained-principal-transformer name>:read-attribute(name=principal-transformers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `chained-principal-transformer` `principal-transformers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `client-ssl-context`
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-resource()`
To get the list of all the `elytron` `client-ssl-context` use '*' for `<client-ssl-context name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `client-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `active-session-count`
the count of current active sessions.
get the `elytron` `client-ssl-context` `active-session-count` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=active-session-count)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `active-session-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `cipher-suite-filter`
the filter to apply to specify the enabled cipher suites for `tlsv1.2` and below.
get the `elytron` `client-ssl-context` `cipher-suite-filter` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=cipher-suite-filter)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `cipher-suite-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `cipher-suite-names`
the filter to apply to specify the enabled cipher suites for `tlsv1.3`.
get the `elytron` `client-ssl-context` `cipher-suite-names` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=cipher-suite-names)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `cipher-suite-names`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `key-manager`
reference to the key manager to use within the `sslcontext`.
get the `elytron` `client-ssl-context` `key-manager` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=key-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `key-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `protocols`
the enabled protocols.
get the `elytron` `client-ssl-context` `protocols` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=protocols)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `protocols`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `provider-name`
the name of the provider to use. if not specified, all providers from providers will be passed to the `sslcontext`.
get the `elytron` `client-ssl-context` `provider-name` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=provider-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `provider-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `providers`
the name of the providers to obtain the provider[] to use to load the `sslcontext`.
get the `elytron` `client-ssl-context` `providers` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `trust-manager`
reference to the trust manager to use within the `sslcontext`.
get the `elytron` `client-ssl-context` `trust-manager` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>:read-attribute(name=trust-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `client-ssl-context` `ssl-session`
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-resource()`
To get the list of all the `elytron` `client-ssl-context` `ssl-session` use '*' for `<ssl-session name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `client-ssl-context` `ssl-session`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `application-buffer-size`
the application buffer size as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `application-buffer-size` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=application-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `application-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `cipher-suite`
the selected cipher suite as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `cipher-suite` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=cipher-suite)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `cipher-suite`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `creation-time`
the creation time as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `creation-time` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=creation-time)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `creation-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `last-accessed-time`
the last accessed time as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `last-accessed-time` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=last-accessed-time)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `last-accessed-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `local-certificates`
the local certificates from the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `local-certificates` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=local-certificates)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `local-certificates`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `local-principal`
the local principal as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `local-principal` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=local-principal)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `local-principal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `packet-buffer-size`
the packet buffer size as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `packet-buffer-size` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=packet-buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `packet-buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-certificates`
the peer certificates from the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `peer-certificates` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-certificates)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-certificates`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-host`
the peer host as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `peer-host` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-host)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-port`
the peer port as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `peer-port` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-port)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-principal`
the peer principal as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `peer-principal` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=peer-principal)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `peer-principal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `protocol`
the protocol as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `protocol` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `valid`
the validity of the session as reported by the `sslsession`.
get the `elytron` `client-ssl-context` `ssl-session` `valid` attribute.
operation: `/subsystem=elytron/client-ssl-context=<client-ssl-context name>/ssl-session=<ssl-session name>:read-attribute(name=valid)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `client-ssl-context` `ssl-session` `valid`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `simple-regex-realm-mapper`
operation: `/subsystem=elytron/simple-regex-realm-mapper=<simple-regex-realm-mapper name>:read-resource()`
To get the list of all the `elytron` `simple-regex-realm-mapper` use '*' for `<simple-regex-realm-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `simple-regex-realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `simple-regex-realm-mapper` `delegate-realm-mapper`
the `realmmapper` to delegate to if there is no match using the pattern.
get the `elytron` `simple-regex-realm-mapper` `delegate-realm-mapper` attribute.
operation: `/subsystem=elytron/simple-regex-realm-mapper=<simple-regex-realm-mapper name>:read-attribute(name=delegate-realm-mapper)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `simple-regex-realm-mapper` `delegate-realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `simple-regex-realm-mapper` `pattern`
the regular expression which must contain at least one capture group to extract the realm from the name. if the regular expression matches more than one capture group, the first capture group is used.
get the `elytron` `simple-regex-realm-mapper` `pattern` attribute.
operation: `/subsystem=elytron/simple-regex-realm-mapper=<simple-regex-realm-mapper name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `simple-regex-realm-mapper` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `x509-subject-alt-name-evidence-decoder`
operation: `/subsystem=elytron/x509-subject-alt-name-evidence-decoder=<x509-subject-alt-name-evidence-decoder name>:read-resource()`
To get the list of all the `elytron` `x509-subject-alt-name-evidence-decoder` use '*' for `<x509-subject-alt-name-evidence-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `x509-subject-alt-name-evidence-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x509-subject-alt-name-evidence-decoder` `alt-name-type`
the subject alternative name type to decode from the given evidence. allowed values: '`rfc822name`', '`dnsname`', '`directoryname`', '`uniformresourceidentifier`', '`ipaddress`', '`registeredid`'
get the `elytron` `x509-subject-alt-name-evidence-decoder` `alt-name-type` attribute.
operation: `/subsystem=elytron/x509-subject-alt-name-evidence-decoder=<x509-subject-alt-name-evidence-decoder name>:read-attribute(name=alt-name-type)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x509-subject-alt-name-evidence-decoder` `alt-name-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x509-subject-alt-name-evidence-decoder` `segment`
the `0-based` occurrence of the subject alternative name to map. this attribute is optional and only used when there is more than one subject alternative name of the given `alt-name-type`. the default value is `0`.
get the `elytron` `x509-subject-alt-name-evidence-decoder` `segment` attribute.
operation: `/subsystem=elytron/x509-subject-alt-name-evidence-decoder=<x509-subject-alt-name-evidence-decoder name>:read-attribute(name=segment)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x509-subject-alt-name-evidence-decoder` `segment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `authentication-context`
operation: `/subsystem=elytron/authentication-context=<authentication-context name>:read-resource()`
To get the list of all the `elytron` `authentication-context` use '*' for `<authentication-context name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-context` `extends`
a previously defined authentication context to extend.
get the `elytron` `authentication-context` `extends` attribute.
operation: `/subsystem=elytron/authentication-context=<authentication-context name>:read-attribute(name=extends)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-context` `extends`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-context` `match-rules`
the `match-rules` for this authentication context.
get the `elytron` `authentication-context` `match-rules` attribute.
operation: `/subsystem=elytron/authentication-context=<authentication-context name>:read-attribute(name=match-rules)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-context` `match-rules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `constant-principal-decoder`
operation: `/subsystem=elytron/constant-principal-decoder=<constant-principal-decoder name>:read-resource()`
To get the list of all the `elytron` `constant-principal-decoder` use '*' for `<constant-principal-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `constant-principal-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `constant-principal-decoder` `constant`
the constant value the principal decoder will always return.
get the `elytron` `constant-principal-decoder` `constant` attribute.
operation: `/subsystem=elytron/constant-principal-decoder=<constant-principal-decoder name>:read-attribute(name=constant)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `constant-principal-decoder` `constant`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `certificate-authority-account`
operation: `/subsystem=elytron/certificate-authority-account=<certificate-authority-account name>:read-resource()`
To get the list of all the `elytron` `certificate-authority-account` use '*' for `<certificate-authority-account name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `certificate-authority-account`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `certificate-authority-account` `alias`
the alias of certificate authority account key in the `keystore`. if the alias does not already exist in the `keystore`, a certificate authority account key will be automatically generated and stored as a `privatekeyentry` under the alias.
get the `elytron` `certificate-authority-account` `alias` attribute.
operation: `/subsystem=elytron/certificate-authority-account=<certificate-authority-account name>:read-attribute(name=alias)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `certificate-authority-account` `alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `certificate-authority-account` `certificate-authority`
the name of the certificate authority to use.
get the `elytron` `certificate-authority-account` `certificate-authority` attribute.
operation: `/subsystem=elytron/certificate-authority-account=<certificate-authority-account name>:read-attribute(name=certificate-authority)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `certificate-authority-account` `certificate-authority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `certificate-authority-account` `contact-urls`
a list of `urls` that the certificate authority can contact about any issues related to this account.
get the `elytron` `certificate-authority-account` `contact-urls` attribute.
operation: `/subsystem=elytron/certificate-authority-account=<certificate-authority-account name>:read-attribute(name=contact-urls)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `certificate-authority-account` `contact-urls`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `certificate-authority-account` `credential-reference`
credential to be used when accessing the certificate authority account key.
get the `elytron` `certificate-authority-account` `credential-reference` attribute.
operation: `/subsystem=elytron/certificate-authority-account=<certificate-authority-account name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `certificate-authority-account` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `certificate-authority-account` `key-store`
the `keystore` that contains the certificate authority account key.
get the `elytron` `certificate-authority-account` `key-store` attribute.
operation: `/subsystem=elytron/certificate-authority-account=<certificate-authority-account name>:read-attribute(name=key-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `certificate-authority-account` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-principal-decoder`
operation: `/subsystem=elytron/aggregate-principal-decoder=<aggregate-principal-decoder name>:read-resource()`
To get the list of all the `elytron` `aggregate-principal-decoder` use '*' for `<aggregate-principal-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-principal-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-principal-decoder` `principal-decoders`
the referenced principal decoders to aggregate.
get the `elytron` `aggregate-principal-decoder` `principal-decoders` attribute.
operation: `/subsystem=elytron/aggregate-principal-decoder=<aggregate-principal-decoder name>:read-attribute(name=principal-decoders)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-principal-decoder` `principal-decoders`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `simple-permission-mapper`
operation: `/subsystem=elytron/simple-permission-mapper=<simple-permission-mapper name>:read-resource()`
To get the list of all the `elytron` `simple-permission-mapper` use '*' for `<simple-permission-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `simple-permission-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `simple-permission-mapper` `mapping-mode`
the mapping mode that should be used in the event of multiple matches.
get the `elytron` `simple-permission-mapper` `mapping-mode` attribute.
operation: `/subsystem=elytron/simple-permission-mapper=<simple-permission-mapper name>:read-attribute(name=mapping-mode)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `simple-permission-mapper` `mapping-mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `simple-permission-mapper` `permission-mappings`
the defined permission mappings.
get the `elytron` `simple-permission-mapper` `permission-mappings` attribute.
operation: `/subsystem=elytron/simple-permission-mapper=<simple-permission-mapper name>:read-attribute(name=permission-mappings)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `simple-permission-mapper` `permission-mappings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `filtering-key-store`
operation: `/subsystem=elytron/filtering-key-store=<filtering-key-store name>:read-resource()`
To get the list of all the `elytron` `filtering-key-store` use '*' for `<filtering-key-store name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `filtering-key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filtering-key-store` `alias-filter`
a filter to apply to the aliases returned from the `keystore`, can either be a comma separated list of aliases to return or one of the following formats `all:-alias1:-alias2`, `none:+alias1:+alias2`
get the `elytron` `filtering-key-store` `alias-filter` attribute.
operation: `/subsystem=elytron/filtering-key-store=<filtering-key-store name>:read-attribute(name=alias-filter)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filtering-key-store` `alias-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filtering-key-store` `key-store`
name of filtered `keystore`.
get the `elytron` `filtering-key-store` `key-store` attribute.
operation: `/subsystem=elytron/filtering-key-store=<filtering-key-store name>:read-attribute(name=key-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filtering-key-store` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `filtering-key-store` `state`
the state of the underlying service that represents this `keystore` at runtime, if it is anything other than up runtime operations will not be available.
get the `elytron` `filtering-key-store` `state` attribute.
operation: `/subsystem=elytron/filtering-key-store=<filtering-key-store name>:read-attribute(name=state)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `filtering-key-store` `state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `server-ssl-sni-context`
operation: `/subsystem=elytron/server-ssl-sni-context=<server-ssl-sni-context name>:read-resource()`
To get the list of all the `elytron` `server-ssl-sni-context` use '*' for `<server-ssl-sni-context name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `server-ssl-sni-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-sni-context` `default-ssl-context`
the context to use if no `sni` information is present, or if it does not match any mappings
get the `elytron` `server-ssl-sni-context` `default-ssl-context` attribute.
operation: `/subsystem=elytron/server-ssl-sni-context=<server-ssl-sni-context name>:read-attribute(name=default-ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-sni-context` `default-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `server-ssl-sni-context` `host-context-map`
a mapping between a server name and an `sscontext`
get the `elytron` `server-ssl-sni-context` `host-context-map` attribute.
operation: `/subsystem=elytron/server-ssl-sni-context=<server-ssl-sni-context name>:read-attribute(name=host-context-map)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `server-ssl-sni-context` `host-context-map`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `syslog-audit-log`
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-resource()`
To get the list of all the `elytron` `syslog-audit-log` use '*' for `<syslog-audit-log name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `syslog-audit-log`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `format`
the format to use to record the audit event.
get the `elytron` `syslog-audit-log` `format` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=format)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `host-name`
the host name to embed withing all events sent to the remote `syslog` server.
get the `elytron` `syslog-audit-log` `host-name` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=host-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `host-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `port`
the listening port on the `syslog` server.
get the `elytron` `syslog-audit-log` `port` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=port)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `reconnect-attempts`
the maximum amount of failed reconnect attempts that should be made for sending messages to a `syslog` server before the endpoint is closed.
get the `elytron` `syslog-audit-log` `reconnect-attempts` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=reconnect-attempts)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `reconnect-attempts`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `server-address`
the server address of the `syslog` server the events should be sent to.
get the `elytron` `syslog-audit-log` `server-address` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=server-address)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `server-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `ssl-context`
the `sslcontext` to use to connect to the `syslog` server when `ssl_tcp` transport is used.
get the `elytron` `syslog-audit-log` `ssl-context` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `syslog-format`
the `rfc` format to be used for describing the audit event.
get the `elytron` `syslog-audit-log` `syslog-format` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=syslog-format)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `syslog-format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `syslog-audit-log` `transport`
the transport to use to connect to the `syslog` server.
get the `elytron` `syslog-audit-log` `transport` attribute.
operation: `/subsystem=elytron/syslog-audit-log=<syslog-audit-log name>:read-attribute(name=transport)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `syslog-audit-log` `transport`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-evidence-decoder`
operation: `/subsystem=elytron/aggregate-evidence-decoder=<aggregate-evidence-decoder name>:read-resource()`
To get the list of all the `elytron` `aggregate-evidence-decoder` use '*' for `<aggregate-evidence-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-evidence-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-evidence-decoder` `evidence-decoders`
the referenced evidence decoders to aggregate.
get the `elytron` `aggregate-evidence-decoder` `evidence-decoders` attribute.
operation: `/subsystem=elytron/aggregate-evidence-decoder=<aggregate-evidence-decoder name>:read-attribute(name=evidence-decoders)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-evidence-decoder` `evidence-decoders`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `certificate-authority`
operation: `/subsystem=elytron/certificate-authority=<certificate-authority name>:read-resource()`
To get the list of all the `elytron` `certificate-authority` use '*' for `<certificate-authority name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `certificate-authority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `certificate-authority` `staging-url`
`url` of the certificate authority to use in `pre-production`.
get the `elytron` `certificate-authority` `staging-url` attribute.
operation: `/subsystem=elytron/certificate-authority=<certificate-authority name>:read-attribute(name=staging-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `certificate-authority` `staging-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `certificate-authority` `url`
`url` of the certificate authority.
get the `elytron` `certificate-authority` `url` attribute.
operation: `/subsystem=elytron/certificate-authority=<certificate-authority name>:read-attribute(name=url)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `certificate-authority` `url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `x500-attribute-principal-decoder`
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-resource()`
To get the list of all the `elytron` `x500-attribute-principal-decoder` use '*' for `<x500-attribute-principal-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `x500-attribute-principal-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `attribute-name`
the name of the `x.500` attribute to map (can be defined using `oid` instead)
get the `elytron` `x500-attribute-principal-decoder` `attribute-name` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=attribute-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `attribute-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `convert`
when set to 'true', if the principal is not already an `x500principal` conversion will be attempted
get the `elytron` `x500-attribute-principal-decoder` `convert` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=convert)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `convert`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `joiner`
the joining string
get the `elytron` `x500-attribute-principal-decoder` `joiner` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=joiner)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `joiner`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `maximum-segments`
the maximum number of occurrences of the attribute to map
get the `elytron` `x500-attribute-principal-decoder` `maximum-segments` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=maximum-segments)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `maximum-segments`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `oid`
the `oid` of the `x.500` attribute to map (can be defined using attribute name instead)
get the `elytron` `x500-attribute-principal-decoder` `oid` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=oid)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `oid`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `required-attributes`
the attributes names of the attributes that must be present in the principal
get the `elytron` `x500-attribute-principal-decoder` `required-attributes` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=required-attributes)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `required-attributes`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `required-oids`
the `oids` of the attributes that must be present in the principal
get the `elytron` `x500-attribute-principal-decoder` `required-oids` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=required-oids)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `required-oids`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `reverse`
when set to 'true', the attribute values will be processed and returned in reverse order
get the `elytron` `x500-attribute-principal-decoder` `reverse` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=reverse)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `reverse`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `start-segment`
the `0-based` starting occurrence of the attribute to map
get the `elytron` `x500-attribute-principal-decoder` `start-segment` attribute.
operation: `/subsystem=elytron/x500-attribute-principal-decoder=<x500-attribute-principal-decoder name>:read-attribute(name=start-segment)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `x500-attribute-principal-decoder` `start-segment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `token-realm`
operation: `/subsystem=elytron/token-realm=<token-realm name>:read-resource()`
To get the list of all the `elytron` `token-realm` use '*' for `<token-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `token-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `token-realm` `jwt`
a token `validator` to be used in conjunction with a `token-based` realm that handles security tokens based on the `jwt/jws` standard.
get the `elytron` `token-realm` `jwt` attribute.
operation: `/subsystem=elytron/token-realm=<token-realm name>:read-attribute(name=jwt)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `token-realm` `jwt`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `token-realm` `oauth2-introspection`
a token `validator` to be used in conjunction with a `token-based` realm that handles `oauth2` access tokens and validates them using an endpoint compliant with `oauth2` token introspection `specification(rfc-7662`).
get the `elytron` `token-realm` `oauth2-introspection` attribute.
operation: `/subsystem=elytron/token-realm=<token-realm name>:read-attribute(name=oauth2-introspection)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `token-realm` `oauth2-introspection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `token-realm` `principal-claim`
the name of the claim that should be used to obtain the `principal's` name.
get the `elytron` `token-realm` `principal-claim` attribute.
operation: `/subsystem=elytron/token-realm=<token-realm name>:read-attribute(name=principal-claim)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `token-realm` `principal-claim`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-permission-mapper`
operation: `/subsystem=elytron/custom-permission-mapper=<custom-permission-mapper name>:read-resource()`
To get the list of all the `elytron` `custom-permission-mapper` use '*' for `<custom-permission-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-permission-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-permission-mapper` `class-name`
fully qualified class name of the permission mapper
get the `elytron` `custom-permission-mapper` `class-name` attribute.
operation: `/subsystem=elytron/custom-permission-mapper=<custom-permission-mapper name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-permission-mapper` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-permission-mapper` `configuration`
the optional `kay/value` configuration for the permission mapper
get the `elytron` `custom-permission-mapper` `configuration` attribute.
operation: `/subsystem=elytron/custom-permission-mapper=<custom-permission-mapper name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-permission-mapper` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-permission-mapper` `module`
name of the module to use to load the permission mapper
get the `elytron` `custom-permission-mapper` `module` attribute.
operation: `/subsystem=elytron/custom-permission-mapper=<custom-permission-mapper name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-permission-mapper` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `mapped-role-mapper`
operation: `/subsystem=elytron/mapped-role-mapper=<mapped-role-mapper name>:read-resource()`
To get the list of all the `elytron` `mapped-role-mapper` use '*' for `<mapped-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `mapped-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mapped-role-mapper` `keep-mapped`
when set to 'true' the mapped roles will retain all roles, that have defined mappings.
get the `elytron` `mapped-role-mapper` `keep-mapped` attribute.
operation: `/subsystem=elytron/mapped-role-mapper=<mapped-role-mapper name>:read-attribute(name=keep-mapped)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mapped-role-mapper` `keep-mapped`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mapped-role-mapper` `keep-non-mapped`
when set to 'true' the mapped roles will retain all roles, that have no defined mappings.
get the `elytron` `mapped-role-mapper` `keep-non-mapped` attribute.
operation: `/subsystem=elytron/mapped-role-mapper=<mapped-role-mapper name>:read-attribute(name=keep-non-mapped)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mapped-role-mapper` `keep-non-mapped`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mapped-role-mapper` `role-map`
a list of mappings to use for mapping roles.
get the `elytron` `mapped-role-mapper` `role-map` attribute.
operation: `/subsystem=elytron/mapped-role-mapper=<mapped-role-mapper name>:read-attribute(name=role-map)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mapped-role-mapper` `role-map`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `regex-role-mapper`
operation: `/subsystem=elytron/regex-role-mapper=<regex-role-mapper name>:read-resource()`
To get the list of all the `elytron` `regex-role-mapper` use '*' for `<regex-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `regex-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-role-mapper` `keep-non-mapped`
when set to 'true' then the roles that did not match the pattern will be kept and not removed.
get the `elytron` `regex-role-mapper` `keep-non-mapped` attribute.
operation: `/subsystem=elytron/regex-role-mapper=<regex-role-mapper name>:read-attribute(name=keep-non-mapped)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-role-mapper` `keep-non-mapped`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-role-mapper` `pattern`
`regex` string that will be used for matching. `regex` can capture groups. role matches the pattern if given pattern can be found in any substring of given role.
get the `elytron` `regex-role-mapper` `pattern` attribute.
operation: `/subsystem=elytron/regex-role-mapper=<regex-role-mapper name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-role-mapper` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-role-mapper` `replace-all`
when set to 'false', only first occurrence of the pattern will be replaced in role. when set to 'true' then all of the occurrences will be replaced by replacement.
get the `elytron` `regex-role-mapper` `replace-all` attribute.
operation: `/subsystem=elytron/regex-role-mapper=<regex-role-mapper name>:read-attribute(name=replace-all)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-role-mapper` `replace-all`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-role-mapper` `replacement`
replacement that will be used when mapping roles that contain the pattern. can make use of captured groups from pattern.
get the `elytron` `regex-role-mapper` `replacement` attribute.
operation: `/subsystem=elytron/regex-role-mapper=<regex-role-mapper name>:read-attribute(name=replacement)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-role-mapper` `replacement`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `dir-context`
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-resource()`
To get the list of all the `elytron` `dir-context` use '*' for `<dir-context name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `dir-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `authentication-context`
the authentication context to obtain login credentials to connect to the `ldap` server. can be omitted if `authentication-level` is 'none' (anonymous).
get the `elytron` `dir-context` `authentication-context` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `authentication-level`
the authentication level (security `level/authentication` mechanism) to use. corresponds to `security_authentication` ('`java.naming.security.authentication`') environment property. allowed values: 'none', 'simple', `sasl_mech`, where `sasl_mech` is a `space-separated` list of `sasl` mechanism names.
get the `elytron` `dir-context` `authentication-level` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=authentication-level)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `authentication-level`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `connection-timeout`
the timeout for connecting to the `ldap` server in milliseconds.
get the `elytron` `dir-context` `connection-timeout` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=connection-timeout)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `connection-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `credential-reference`
the credential reference to authenticate and connect to the `ldap` server. can be omitted if `authentication-level` is 'none' (anonymous).
get the `elytron` `dir-context` `credential-reference` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `enable-connection-pooling`
indicates if connection pooling is enabled.
get the `elytron` `dir-context` `enable-connection-pooling` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=enable-connection-pooling)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `enable-connection-pooling`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `module`
name of module that will be used as class loading base.
get the `elytron` `dir-context` `module` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `principal`
the principal to authenticate and connect to the `ldap` server. can be omitted if `authentication-level` is 'none' (anonymous).
get the `elytron` `dir-context` `principal` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=principal)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `principal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `properties`
the additional connection properties for the `dircontext`.
get the `elytron` `dir-context` `properties` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `read-timeout`
the read timeout for an `ldap` operation in milliseconds.
get the `elytron` `dir-context` `read-timeout` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=read-timeout)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `read-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `referral-mode`
if referrals should be followed.
get the `elytron` `dir-context` `referral-mode` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=referral-mode)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `referral-mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `ssl-context`
the name of `ssl-context` used to secure connection to the `ldap` server.
get the `elytron` `dir-context` `ssl-context` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=ssl-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dir-context` `url`
the connection `url`.
get the `elytron` `dir-context` `url` attribute.
operation: `/subsystem=elytron/dir-context=<dir-context name>:read-attribute(name=url)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dir-context` `url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `add-suffix-role-mapper`
operation: `/subsystem=elytron/add-suffix-role-mapper=<add-suffix-role-mapper name>:read-resource()`
To get the list of all the `elytron` `add-suffix-role-mapper` use '*' for `<add-suffix-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `add-suffix-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `add-suffix-role-mapper` `suffix`
the suffix to add to each role.
get the `elytron` `add-suffix-role-mapper` `suffix` attribute.
operation: `/subsystem=elytron/add-suffix-role-mapper=<add-suffix-role-mapper name>:read-attribute(name=suffix)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `add-suffix-role-mapper` `suffix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `configurable-http-server-mechanism-factory`
operation: `/subsystem=elytron/configurable-http-server-mechanism-factory=<configurable-http-server-mechanism-factory name>:read-resource()`
To get the list of all the `elytron` `configurable-http-server-mechanism-factory` use '*' for `<configurable-http-server-mechanism-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `configurable-http-server-mechanism-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `available-mechanisms`
the `http` mechanisms available from this factory instance.
get the `elytron` `configurable-http-server-mechanism-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/configurable-http-server-mechanism-factory=<configurable-http-server-mechanism-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `filters`
filtering to be applied to enable / disable mechanisms based on the name.
get the `elytron` `configurable-http-server-mechanism-factory` `filters` attribute.
operation: `/subsystem=elytron/configurable-http-server-mechanism-factory=<configurable-http-server-mechanism-factory name>:read-attribute(name=filters)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `filters`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `http-server-mechanism-factory`
the `http` server factory to be wrapped.
get the `elytron` `configurable-http-server-mechanism-factory` `http-server-mechanism-factory` attribute.
operation: `/subsystem=elytron/configurable-http-server-mechanism-factory=<configurable-http-server-mechanism-factory name>:read-attribute(name=http-server-mechanism-factory)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `http-server-mechanism-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `properties`
custom properties to be passed in to the `http` server factory calls.
get the `elytron` `configurable-http-server-mechanism-factory` `properties` attribute.
operation: `/subsystem=elytron/configurable-http-server-mechanism-factory=<configurable-http-server-mechanism-factory name>:read-attribute(name=properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `configurable-http-server-mechanism-factory` `properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-sasl-server-factory`
operation: `/subsystem=elytron/aggregate-sasl-server-factory=<aggregate-sasl-server-factory name>:read-resource()`
To get the list of all the `elytron` `aggregate-sasl-server-factory` use '*' for `<aggregate-sasl-server-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-sasl-server-factory` `available-mechanisms`
the `sasl` mechanisms available from this factory after all filtering has been applied.
get the `elytron` `aggregate-sasl-server-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/aggregate-sasl-server-factory=<aggregate-sasl-server-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-sasl-server-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-sasl-server-factory` `sasl-server-factories`
the referenced `sasl` server factories to aggregate.
get the `elytron` `aggregate-sasl-server-factory` `sasl-server-factories` attribute.
operation: `/subsystem=elytron/aggregate-sasl-server-factory=<aggregate-sasl-server-factory name>:read-attribute(name=sasl-server-factories)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-sasl-server-factory` `sasl-server-factories`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-principal-transformer`
operation: `/subsystem=elytron/custom-principal-transformer=<custom-principal-transformer name>:read-resource()`
To get the list of all the `elytron` `custom-principal-transformer` use '*' for `<custom-principal-transformer name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-principal-transformer` `class-name`
the class name of the implementation of the custom principal transformer.
get the `elytron` `custom-principal-transformer` `class-name` attribute.
operation: `/subsystem=elytron/custom-principal-transformer=<custom-principal-transformer name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-principal-transformer` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-principal-transformer` `configuration`
the optional `key/value` configuration for the custom principal transformer.
get the `elytron` `custom-principal-transformer` `configuration` attribute.
operation: `/subsystem=elytron/custom-principal-transformer=<custom-principal-transformer name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-principal-transformer` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-principal-transformer` `module`
the module to use to load the custom principal transformer.
get the `elytron` `custom-principal-transformer` `module` attribute.
operation: `/subsystem=elytron/custom-principal-transformer=<custom-principal-transformer name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-principal-transformer` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `jaspi-configuration`
operation: `/subsystem=elytron/jaspi-configuration=<jaspi-configuration name>:read-resource()`
To get the list of all the `elytron` `jaspi-configuration` use '*' for `<jaspi-configuration name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `jaspi-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaspi-configuration` `application-context`
the `application-context` this configuration is to be associated with or '*' for all application contexts.
get the `elytron` `jaspi-configuration` `application-context` attribute.
operation: `/subsystem=elytron/jaspi-configuration=<jaspi-configuration name>:read-attribute(name=application-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaspi-configuration` `application-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaspi-configuration` `description`
description of this configuration.
get the `elytron` `jaspi-configuration` `description` attribute.
operation: `/subsystem=elytron/jaspi-configuration=<jaspi-configuration name>:read-attribute(name=description)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaspi-configuration` `description`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaspi-configuration` `layer`
the layer this configuration is to be associated with or '*' for all layers.
get the `elytron` `jaspi-configuration` `layer` attribute.
operation: `/subsystem=elytron/jaspi-configuration=<jaspi-configuration name>:read-attribute(name=layer)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaspi-configuration` `layer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaspi-configuration` `server-auth-modules`
list of `serverauthmodule` definitions for this configuration.
get the `elytron` `jaspi-configuration` `server-auth-modules` attribute.
operation: `/subsystem=elytron/jaspi-configuration=<jaspi-configuration name>:read-attribute(name=server-auth-modules)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaspi-configuration` `server-auth-modules`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `regex-validating-principal-transformer`
operation: `/subsystem=elytron/regex-validating-principal-transformer=<regex-validating-principal-transformer name>:read-resource()`
To get the list of all the `elytron` `regex-validating-principal-transformer` use '*' for `<regex-validating-principal-transformer name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `regex-validating-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-validating-principal-transformer` `match`
if set to true, the name must match the given pattern to make validation successful. if set to false, the name must not match the given pattern to make validation successful.
get the `elytron` `regex-validating-principal-transformer` `match` attribute.
operation: `/subsystem=elytron/regex-validating-principal-transformer=<regex-validating-principal-transformer name>:read-attribute(name=match)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-validating-principal-transformer` `match`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `regex-validating-principal-transformer` `pattern`
the regular expression to use for the principal transformer.
get the `elytron` `regex-validating-principal-transformer` `pattern` attribute.
operation: `/subsystem=elytron/regex-validating-principal-transformer=<regex-validating-principal-transformer name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `regex-validating-principal-transformer` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `distributed-realm`
operation: `/subsystem=elytron/distributed-realm=<distributed-realm name>:read-resource()`
To get the list of all the `elytron` `distributed-realm` use '*' for `<distributed-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `distributed-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `distributed-realm` `emit-events`
whether a `securityevent` signifying realm unavailability should be emitted, applicable only when the `ignore-unavailable-realms` attribute is set to true. the default value is true.
get the `elytron` `distributed-realm` `emit-events` attribute.
operation: `/subsystem=elytron/distributed-realm=<distributed-realm name>:read-attribute(name=emit-events)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `distributed-realm` `emit-events`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `distributed-realm` `ignore-unavailable-realms`
whether subsequent realms should be checked after an unavailable realm is reached. if set to false or not set, when the unavailable realm is reached "`org.wildfly.security.auth.server.realmunavailableexception`" is thrown and the search stops. the default value is false.
get the `elytron` `distributed-realm` `ignore-unavailable-realms` attribute.
operation: `/subsystem=elytron/distributed-realm=<distributed-realm name>:read-attribute(name=ignore-unavailable-realms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `distributed-realm` `ignore-unavailable-realms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `distributed-realm` `realms`
references to one or more security realms for authentication and authorization.
get the `elytron` `distributed-realm` `realms` attribute.
operation: `/subsystem=elytron/distributed-realm=<distributed-realm name>:read-attribute(name=realms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `distributed-realm` `realms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `ldap-realm`
operation: `/subsystem=elytron/ldap-realm=<ldap-realm name>:read-resource()`
To get the list of all the `elytron` `ldap-realm` use '*' for `<ldap-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `ldap-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-realm` `allow-blank-password`
does this realm support blank password direct verification? blank password attempt will be rejected otherwise.
get the `elytron` `ldap-realm` `allow-blank-password` attribute.
operation: `/subsystem=elytron/ldap-realm=<ldap-realm name>:read-attribute(name=allow-blank-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-realm` `allow-blank-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-realm` `dir-context`
the configuration to connect to a `ldap` server.
get the `elytron` `ldap-realm` `dir-context` attribute.
operation: `/subsystem=elytron/ldap-realm=<ldap-realm name>:read-attribute(name=dir-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-realm` `dir-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-realm` `direct-verification`
does this realm support verification of credentials by directly connecting to `ldap` as the account being authenticated?
get the `elytron` `ldap-realm` `direct-verification` attribute.
operation: `/subsystem=elytron/ldap-realm=<ldap-realm name>:read-attribute(name=direct-verification)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-realm` `direct-verification`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-realm` `hash-charset`
the character set to use when converting the password string to a byte array.
get the `elytron` `ldap-realm` `hash-charset` attribute.
operation: `/subsystem=elytron/ldap-realm=<ldap-realm name>:read-attribute(name=hash-charset)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-realm` `hash-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-realm` `hash-encoding`
the string format for the password if it is not stored in plain text.
get the `elytron` `ldap-realm` `hash-encoding` attribute.
operation: `/subsystem=elytron/ldap-realm=<ldap-realm name>:read-attribute(name=hash-encoding)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-realm` `hash-encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `ldap-realm` `identity-mapping`
the configuration options that define how principals are mapped to their corresponding entries in the underlying `ldap` server.
get the `elytron` `ldap-realm` `identity-mapping` attribute.
operation: `/subsystem=elytron/ldap-realm=<ldap-realm name>:read-attribute(name=identity-mapping)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `ldap-realm` `identity-mapping`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `policy`
operation: `/subsystem=elytron/policy=<policy name>:read-resource()`
To get the list of all the `elytron` `policy` use '*' for `<policy name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `policy` `custom-policy`
a custom policy provider definition.
get the `elytron` `policy` `custom-policy` attribute.
operation: `/subsystem=elytron/policy=<policy name>:read-attribute(name=custom-policy)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `policy` `custom-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `policy` `default-policy`
not used.
get the `elytron` `policy` `default-policy` attribute.
operation: `/subsystem=elytron/policy=<policy name>:read-attribute(name=default-policy)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `policy` `default-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `policy` `jacc-policy`
a policy provider definition that sets up jakarta authorization and related services.
get the `elytron` `policy` `jacc-policy` attribute.
operation: `/subsystem=elytron/policy=<policy name>:read-attribute(name=jacc-policy)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `policy` `jacc-policy`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `provider-loader`
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-resource()`
To get the list of all the `elytron` `provider-loader` use '*' for `<provider-loader name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `provider-loader`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-loader` `argument`
an argument to be passed into the constructor as the provider is instantiated.
get the `elytron` `provider-loader` `argument` attribute.
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-attribute(name=argument)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-loader` `argument`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-loader` `class-names`
the fully qualified class names of the providers to load, these are loaded after the `service-loader` discovered providers and duplicates will be skipped.
get the `elytron` `provider-loader` `class-names` attribute.
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-attribute(name=class-names)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-loader` `class-names`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-loader` `configuration`
the `key/value` configuration to be passed to the provider to initialise it.
get the `elytron` `provider-loader` `configuration` attribute.
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-loader` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-loader` `loaded-providers`
the list of providers loaded by this provider loader.
get the `elytron` `provider-loader` `loaded-providers` attribute.
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-attribute(name=loaded-providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-loader` `loaded-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-loader` `module`
the name of the module to load the provider from.
get the `elytron` `provider-loader` `module` attribute.
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-loader` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-loader` `path`
the path of the file to use to initialise the providers.
get the `elytron` `provider-loader` `path` attribute.
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-loader` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-loader` `relative-to`
the base path of the configuration file.
get the `elytron` `provider-loader` `relative-to` attribute.
operation: `/subsystem=elytron/provider-loader=<provider-loader name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-loader` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `mechanism-provider-filtering-sasl-server-factory`
operation: `/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=<mechanism-provider-filtering-sasl-server-factory name>:read-resource()`
To get the list of all the `elytron` `mechanism-provider-filtering-sasl-server-factory` use '*' for `<mechanism-provider-filtering-sasl-server-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `mechanism-provider-filtering-sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `available-mechanisms`
the `sasl` mechanisms available from this factory after all filtering has been applied.
get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=<mechanism-provider-filtering-sasl-server-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `enabling`
when set to 'true' no provider loaded mechanisms are enabled unless matched by one of the filters, setting to 'false' has the inverse effect.
get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `enabling` attribute.
operation: `/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=<mechanism-provider-filtering-sasl-server-factory name>:read-attribute(name=enabling)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `enabling`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `filters`
the filters to apply when comparing the mechanisms from the providers, a filter matches when all of the specified values match the mechanism / provider pair.
get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `filters` attribute.
operation: `/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=<mechanism-provider-filtering-sasl-server-factory name>:read-attribute(name=filters)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `filters`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `sasl-server-factory`
reference to a `sasl` server factory to be wrapped by this definition.
get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `sasl-server-factory` attribute.
operation: `/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=<mechanism-provider-filtering-sasl-server-factory name>:read-attribute(name=sasl-server-factory)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `mechanism-provider-filtering-sasl-server-factory` `sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `virtual-security-domain`
operation: `/subsystem=elytron/virtual-security-domain=<virtual-security-domain name>:read-resource()`
To get the list of all the `elytron` `virtual-security-domain` use '*' for `<virtual-security-domain name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `virtual-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `virtual-security-domain` `auth-method`
the authentication mechanism that will be used with the virtual security domain. allowed values: '`oidc`', '`mp-jwt`'. the default value is '`oidc`'.
get the `elytron` `virtual-security-domain` `auth-method` attribute.
operation: `/subsystem=elytron/virtual-security-domain=<virtual-security-domain name>:read-attribute(name=auth-method)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `virtual-security-domain` `auth-method`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `virtual-security-domain` `outflow-anonymous`
when outflowing to a security domain, if outflow is not possible, should the anonymous identity be used? outflow to a security domain might not be possible if the domain does not trust this domain or if the identity being outflowed to a domain does not exist in that domain. outflowing anonymous has the effect of clearing any identity already established for that domain.
get the `elytron` `virtual-security-domain` `outflow-anonymous` attribute.
operation: `/subsystem=elytron/virtual-security-domain=<virtual-security-domain name>:read-attribute(name=outflow-anonymous)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `virtual-security-domain` `outflow-anonymous`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `virtual-security-domain` `outflow-security-domains`
the list of security domains that the security identity from this virtual domain should automatically outflow to.
get the `elytron` `virtual-security-domain` `outflow-security-domains` attribute.
operation: `/subsystem=elytron/virtual-security-domain=<virtual-security-domain name>:read-attribute(name=outflow-security-domains)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `virtual-security-domain` `outflow-security-domains`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `kerberos-security-factory`
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-resource()`
To get the list of all the `elytron` `kerberos-security-factory` use '*' for `<kerberos-security-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `kerberos-security-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `debug`
should the `jaas` step of obtaining the credential have debug logging enabled.
get the `elytron` `kerberos-security-factory` `debug` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=debug)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `debug`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `fail-cache`
amount of seconds before new try to obtain server credential should be done if it has failed last time.
get the `elytron` `kerberos-security-factory` `fail-cache` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=fail-cache)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `fail-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `mechanism-names`
the mechanism names the credential should be usable with. names will be converted to `oids` and used together with `oids` from `mechanism-oids` attribute.
get the `elytron` `kerberos-security-factory` `mechanism-names` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=mechanism-names)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `mechanism-names`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `mechanism-oids`
the mechanism `oids` the credential should be usable with. will be used together with `oids` derived from names from `mechanism-names` attribute.
get the `elytron` `kerberos-security-factory` `mechanism-oids` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=mechanism-oids)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `mechanism-oids`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `minimum-remaining-lifetime`
how much lifetime (in seconds) should a cached credential have remaining before it is recreated.
get the `elytron` `kerberos-security-factory` `minimum-remaining-lifetime` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=minimum-remaining-lifetime)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `minimum-remaining-lifetime`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `obtain-kerberos-ticket`
should the `kerberosticket` also be obtained and associated with the credential. this is required to be true where credentials are delegated to the server.
get the `elytron` `kerberos-security-factory` `obtain-kerberos-ticket` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=obtain-kerberos-ticket)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `obtain-kerberos-ticket`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `options`
the `krb5loginmodule` additional options.
get the `elytron` `kerberos-security-factory` `options` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=options)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `path`
the path of the `keytab` to load to obtain the credential.
get the `elytron` `kerberos-security-factory` `path` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `principal`
the principal represented by the `keytab`
get the `elytron` `kerberos-security-factory` `principal` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=principal)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `principal`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `relative-to`
the name of another previously named path, or of one of the standard paths provided by the system. if '`relative-to`' is provided, the value of the 'path' attribute is treated as relative to the path specified by this attribute.
get the `elytron` `kerberos-security-factory` `relative-to` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `request-lifetime`
how much lifetime (in seconds) should be requested for newly created credentials.
get the `elytron` `kerberos-security-factory` `request-lifetime` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=request-lifetime)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `request-lifetime`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `required`
is the `keytab` file with adequate principal required to exist at the time the service starts?
get the `elytron` `kerberos-security-factory` `required` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=required)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `server`
if this for use server side or client side?
get the `elytron` `kerberos-security-factory` `server` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=server)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `kerberos-security-factory` `wrap-gss-credential`
should generated `gss` credentials be wrapped to prevent improper disposal or not?
get the `elytron` `kerberos-security-factory` `wrap-gss-credential` attribute.
operation: `/subsystem=elytron/kerberos-security-factory=<kerberos-security-factory name>:read-attribute(name=wrap-gss-credential)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `kerberos-security-factory` `wrap-gss-credential`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `authentication-configuration`
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-resource()`
To get the list of all the `elytron` `authentication-configuration` use '*' for `<authentication-configuration name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `authentication-configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `anonymous`
enables anonymous authentication.
get the `elytron` `authentication-configuration` `anonymous` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=anonymous)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `anonymous`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `authentication-name`
the authentication name to use.
get the `elytron` `authentication-configuration` `authentication-name` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=authentication-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `authentication-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `authorization-name`
the authorization name to use.
get the `elytron` `authentication-configuration` `authorization-name` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=authorization-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `authorization-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `credential-reference`
the reference to credential stored in `credentialstore` under defined alias or clear text password.
get the `elytron` `authentication-configuration` `credential-reference` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `extends`
a previously defined authentication configuration to extend.
get the `elytron` `authentication-configuration` `extends` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=extends)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `extends`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `forwarding-mode`
the type of security identity forwarding to use. a mode of 'authentication' forwarding forwards the principal and credential. a mode of 'authorization' forwards the authorization id, allowing for a different authentication identity.
get the `elytron` `authentication-configuration` `forwarding-mode` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=forwarding-mode)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `forwarding-mode`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `host`
the host to use.
get the `elytron` `authentication-configuration` `host` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=host)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `kerberos-security-factory`
reference to a `kerberos` security factory used to obtain a `gss` `kerberos` credential
get the `elytron` `authentication-configuration` `kerberos-security-factory` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=kerberos-security-factory)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `kerberos-security-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `mechanism-properties`
configuration properties for the `sasl` authentication mechanism.
get the `elytron` `authentication-configuration` `mechanism-properties` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=mechanism-properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `mechanism-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `port`
the port to use.
get the `elytron` `authentication-configuration` `port` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=port)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `protocol`
the protocol to use.
get the `elytron` `authentication-configuration` `protocol` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=protocol)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `protocol`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `realm`
the realm to use.
get the `elytron` `authentication-configuration` `realm` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `sasl-mechanism-selector`
the `sasl` mechanism selector string.
get the `elytron` `authentication-configuration` `sasl-mechanism-selector` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=sasl-mechanism-selector)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `sasl-mechanism-selector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `security-domain`
reference to a security domain to obtain a forwarded identity.
get the `elytron` `authentication-configuration` `security-domain` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `authentication-configuration` `webservices`
web services client configuration definition.
get the `elytron` `authentication-configuration` `webservices` attribute.
operation: `/subsystem=elytron/authentication-configuration=<authentication-configuration name>:read-attribute(name=webservices)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `authentication-configuration` `webservices`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-principal-decoder`
operation: `/subsystem=elytron/custom-principal-decoder=<custom-principal-decoder name>:read-resource()`
To get the list of all the `elytron` `custom-principal-decoder` use '*' for `<custom-principal-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-principal-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-principal-decoder` `class-name`
fully qualified class name of the principal decoder
get the `elytron` `custom-principal-decoder` `class-name` attribute.
operation: `/subsystem=elytron/custom-principal-decoder=<custom-principal-decoder name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-principal-decoder` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-principal-decoder` `configuration`
the optional `kay/value` configuration for the principal decoder
get the `elytron` `custom-principal-decoder` `configuration` attribute.
operation: `/subsystem=elytron/custom-principal-decoder=<custom-principal-decoder name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-principal-decoder` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-principal-decoder` `module`
name of the module to use to load the principal decoder
get the `elytron` `custom-principal-decoder` `module` attribute.
operation: `/subsystem=elytron/custom-principal-decoder=<custom-principal-decoder name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-principal-decoder` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `identity-realm`
operation: `/subsystem=elytron/identity-realm=<identity-realm name>:read-resource()`
To get the list of all the `elytron` `identity-realm` use '*' for `<identity-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `identity-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `identity-realm` `attribute-name`
the name of the attribute associated with this identity.
get the `elytron` `identity-realm` `attribute-name` attribute.
operation: `/subsystem=elytron/identity-realm=<identity-realm name>:read-attribute(name=attribute-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `identity-realm` `attribute-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `identity-realm` `attribute-values`
the values associated with the identity attributes.
get the `elytron` `identity-realm` `attribute-values` attribute.
operation: `/subsystem=elytron/identity-realm=<identity-realm name>:read-attribute(name=attribute-values)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `identity-realm` `attribute-values`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `identity-realm` `identity`
the name of the identity available from the security realm.
get the `elytron` `identity-realm` `identity` attribute.
operation: `/subsystem=elytron/identity-realm=<identity-realm name>:read-attribute(name=identity)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `identity-realm` `identity`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `expression` `encryption` `default-resolver`
the default expression resolver to use if not specified within the expression.  if not set there is no default.
get the `elytron` `expression` `encryption` `default-resolver` attribute.
operation: `/subsystem=elytron/expression=encryption:read-attribute(name=default-resolver)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `expression` `encryption` `default-resolver`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `expression` `encryption` `prefix`
the prefix in use for encrypted expressions.
get the `elytron` `expression` `encryption` `prefix` attribute.
operation: `/subsystem=elytron/expression=encryption:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `expression` `encryption` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `expression` `encryption` `resolvers`
list of expressions resolver definitions.
get the `elytron` `expression` `encryption` `resolvers` attribute.
operation: `/subsystem=elytron/expression=encryption:read-attribute(name=resolvers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `expression` `encryption` `resolvers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `jaas-realm`
operation: `/subsystem=elytron/jaas-realm=<jaas-realm name>:read-resource()`
To get the list of all the `elytron` `jaas-realm` use '*' for `<jaas-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `jaas-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaas-realm` `callback-handler`
callback handler to use with the login context. security property "`auth.login.defaultcallbackhandler`" can be used instead. the default callback handler of the realm will be used if none of these are defined.
get the `elytron` `jaas-realm` `callback-handler` attribute.
operation: `/subsystem=elytron/jaas-realm=<jaas-realm name>:read-attribute(name=callback-handler)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaas-realm` `callback-handler`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaas-realm` `entry`
`jaas` configuration file entry name.
get the `elytron` `jaas-realm` `entry` attribute.
operation: `/subsystem=elytron/jaas-realm=<jaas-realm name>:read-attribute(name=entry)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaas-realm` `entry`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaas-realm` `module`
the module to use to obtain the `classloader` to load the custom `loginmodules` and custom `callbackhandler`. the `classloader` that loads the resource will be used if none defined.
get the `elytron` `jaas-realm` `module` attribute.
operation: `/subsystem=elytron/jaas-realm=<jaas-realm name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaas-realm` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaas-realm` `path`
path to the `jaas` login context configuration file. you can also specify the location of the configuration with java system property "`java.security.auth.login.config`" or with java security property "`login.config.url`".
get the `elytron` `jaas-realm` `path` attribute.
operation: `/subsystem=elytron/jaas-realm=<jaas-realm name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaas-realm` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jaas-realm` `relative-to`
the base path of the `jaas` configuration file.
get the `elytron` `jaas-realm` `relative-to` attribute.
operation: `/subsystem=elytron/jaas-realm=<jaas-realm name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jaas-realm` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `file-audit-log`
operation: `/subsystem=elytron/file-audit-log=<file-audit-log name>:read-resource()`
To get the list of all the `elytron` `file-audit-log` use '*' for `<file-audit-log name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `file-audit-log`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `file-audit-log` `autoflush`
whether every event should be immediately flushed to disk (if undefined will default to the value of synchronized).
get the `elytron` `file-audit-log` `autoflush` attribute.
operation: `/subsystem=elytron/file-audit-log=<file-audit-log name>:read-attribute(name=autoflush)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `file-audit-log` `autoflush`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `file-audit-log` `encoding`
the audit file encoding. default is `utf_8`.
get the `elytron` `file-audit-log` `encoding` attribute.
operation: `/subsystem=elytron/file-audit-log=<file-audit-log name>:read-attribute(name=encoding)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `file-audit-log` `encoding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `file-audit-log` `format`
the format to use to record the audit event.
get the `elytron` `file-audit-log` `format` attribute.
operation: `/subsystem=elytron/file-audit-log=<file-audit-log name>:read-attribute(name=format)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `file-audit-log` `format`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `file-audit-log` `path`
path of the file to be written.
get the `elytron` `file-audit-log` `path` attribute.
operation: `/subsystem=elytron/file-audit-log=<file-audit-log name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `file-audit-log` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `file-audit-log` `relative-to`
the relative path to the audit log.
get the `elytron` `file-audit-log` `relative-to` attribute.
operation: `/subsystem=elytron/file-audit-log=<file-audit-log name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `file-audit-log` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `file-audit-log` `synchronized`
whether every event should be immediately synchronised to disk.
get the `elytron` `file-audit-log` `synchronized` attribute.
operation: `/subsystem=elytron/file-audit-log=<file-audit-log name>:read-attribute(name=synchronized)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `file-audit-log` `synchronized`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-realm-mapper`
operation: `/subsystem=elytron/custom-realm-mapper=<custom-realm-mapper name>:read-resource()`
To get the list of all the `elytron` `custom-realm-mapper` use '*' for `<custom-realm-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-realm-mapper` `class-name`
fully qualified class name of the `realmmapper`
get the `elytron` `custom-realm-mapper` `class-name` attribute.
operation: `/subsystem=elytron/custom-realm-mapper=<custom-realm-mapper name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-realm-mapper` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-realm-mapper` `configuration`
the optional `kay/value` configuration for the `realmmapper`
get the `elytron` `custom-realm-mapper` `configuration` attribute.
operation: `/subsystem=elytron/custom-realm-mapper=<custom-realm-mapper name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-realm-mapper` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-realm-mapper` `module`
name of the module to use to load the `realmmapper`
get the `elytron` `custom-realm-mapper` `module` attribute.
operation: `/subsystem=elytron/custom-realm-mapper=<custom-realm-mapper name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-realm-mapper` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-role-decoder`
operation: `/subsystem=elytron/aggregate-role-decoder=<aggregate-role-decoder name>:read-resource()`
To get the list of all the `elytron` `aggregate-role-decoder` use '*' for `<aggregate-role-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-role-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-role-decoder` `role-decoders`
the referenced role decoders to aggregate.
get the `elytron` `aggregate-role-decoder` `role-decoders` attribute.
operation: `/subsystem=elytron/aggregate-role-decoder=<aggregate-role-decoder name>:read-attribute(name=role-decoders)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-role-decoder` `role-decoders`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `trust-manager`
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-resource()`
To get the list of all the `elytron` `trust-manager` use '*' for `<trust-manager name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `algorithm`
the name of the algorithm to use to create the underlying `trustmanagerfactory`.
get the `elytron` `trust-manager` `algorithm` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `alias-filter`
a filter to apply to the aliases returned from the `keystore`, can either be a comma separated list of aliases to return or one of the following formats `all:-alias1:-alias2`, `none:+alias1:+alias2`
get the `elytron` `trust-manager` `alias-filter` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=alias-filter)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `alias-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `certificate-revocation-list`
enables certificate revocation list checks to a trust manager.
get the `elytron` `trust-manager` `certificate-revocation-list` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=certificate-revocation-list)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `certificate-revocation-list`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `certificate-revocation-lists`
enables certificate revocation list checks to a trust manager using multiple certificate revocation lists.
get the `elytron` `trust-manager` `certificate-revocation-lists` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=certificate-revocation-lists)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `certificate-revocation-lists`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `key-store`
reference to the `keystore` to use to initialise the underlying `trustmanagerfactory`.
get the `elytron` `trust-manager` `key-store` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=key-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `maximum-cert-path`
the maximum number of `non-self-issued` intermediate certificates that may exist in a certification path for `ocsp` and crl checks. if neither `ocsp` and crl is configured, this attribute has no effect.
get the `elytron` `trust-manager` `maximum-cert-path` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=maximum-cert-path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `maximum-cert-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `ocsp`
enables online certificate status protocol checks to a trust manager.
get the `elytron` `trust-manager` `ocsp` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=ocsp)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `ocsp`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `only-leaf-cert`
whether only leaf certificate should be checked for revocation status.
get the `elytron` `trust-manager` `only-leaf-cert` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=only-leaf-cert)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `only-leaf-cert`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `provider-name`
the name of the provider to use to create the underlying `trustmanagerfactory`.
get the `elytron` `trust-manager` `provider-name` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=provider-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `provider-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `providers`
reference to obtain the provider[] to use when creating the underlying `trustmanagerfactory`.
get the `elytron` `trust-manager` `providers` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `trust-manager` `soft-fail`
whether a certificate with unknown `ocsp` response should be accepted.
get the `elytron` `trust-manager` `soft-fail` attribute.
operation: `/subsystem=elytron/trust-manager=<trust-manager name>:read-attribute(name=soft-fail)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `trust-manager` `soft-fail`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `provider-sasl-server-factory`
operation: `/subsystem=elytron/provider-sasl-server-factory=<provider-sasl-server-factory name>:read-resource()`
To get the list of all the `elytron` `provider-sasl-server-factory` use '*' for `<provider-sasl-server-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `provider-sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-sasl-server-factory` `available-mechanisms`
the `sasl` mechanisms available from this factory after all filtering has been applied.
get the `elytron` `provider-sasl-server-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/provider-sasl-server-factory=<provider-sasl-server-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-sasl-server-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-sasl-server-factory` `providers`
the providers to use to locate the factories, if not specified the globally registered list of providers will be used.
get the `elytron` `provider-sasl-server-factory` `providers` attribute.
operation: `/subsystem=elytron/provider-sasl-server-factory=<provider-sasl-server-factory name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-sasl-server-factory` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `jdbc-realm`
operation: `/subsystem=elytron/jdbc-realm=<jdbc-realm name>:read-resource()`
To get the list of all the `elytron` `jdbc-realm` use '*' for `<jdbc-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `jdbc-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jdbc-realm` `hash-charset`
the character set to use when converting the password string to a byte array.
get the `elytron` `jdbc-realm` `hash-charset` attribute.
operation: `/subsystem=elytron/jdbc-realm=<jdbc-realm name>:read-attribute(name=hash-charset)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jdbc-realm` `hash-charset`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `jdbc-realm` `principal-query`
the authentication query used to authenticate users based on specific key types.
get the `elytron` `jdbc-realm` `principal-query` attribute.
operation: `/subsystem=elytron/jdbc-realm=<jdbc-realm name>:read-attribute(name=principal-query)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `jdbc-realm` `principal-query`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `key-store-realm`
operation: `/subsystem=elytron/key-store-realm=<key-store-realm name>:read-resource()`
To get the list of all the `elytron` `key-store-realm` use '*' for `<key-store-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `key-store-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store-realm` `key-store`
reference to the `keystore` that should be used to back this security realm.
get the `elytron` `key-store-realm` `key-store` attribute.
operation: `/subsystem=elytron/key-store-realm=<key-store-realm name>:read-attribute(name=key-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store-realm` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `security-domain`
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-resource()`
To get the list of all the `elytron` `security-domain` use '*' for `<security-domain name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `default-realm`
the default realm contained by this security domain.
get the `elytron` `security-domain` `default-realm` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=default-realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `default-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `evidence-decoder`
a reference to an `evidencedecoder` to be used by this domain.
get the `elytron` `security-domain` `evidence-decoder` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=evidence-decoder)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `evidence-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `outflow-anonymous`
when outflowing to a security domain if outflow is not possible should the anonymous identity be used?  outflowing anonymous has the effect of clearing any identity already established for that domain.
get the `elytron` `security-domain` `outflow-anonymous` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=outflow-anonymous)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `outflow-anonymous`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `outflow-security-domains`
the list of security domains that the security identity from this domain should automatically outflow to.
get the `elytron` `security-domain` `outflow-security-domains` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=outflow-security-domains)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `outflow-security-domains`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `permission-mapper`
a reference to a `permissionmapper` to be used by this domain.
get the `elytron` `security-domain` `permission-mapper` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=permission-mapper)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `permission-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `post-realm-principal-transformer`
a reference to a principal transformer to be applied after the realm has operated on the supplied identity name.
get the `elytron` `security-domain` `post-realm-principal-transformer` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=post-realm-principal-transformer)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `post-realm-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `pre-realm-principal-transformer`
a reference to a principal transformer to be applied before the realm is selected.
get the `elytron` `security-domain` `pre-realm-principal-transformer` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=pre-realm-principal-transformer)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `pre-realm-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `principal-decoder`
a reference to a `principaldecoder` to be used by this domain.
get the `elytron` `security-domain` `principal-decoder` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=principal-decoder)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `principal-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `realm-mapper`
reference to the `realmmapper` to be used by this domain.
get the `elytron` `security-domain` `realm-mapper` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=realm-mapper)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `realms`
the list of realms contained by this security domain.
get the `elytron` `security-domain` `realms` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=realms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `realms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `role-decoder`
reference to the `roledecoder` to be used by this domain.
get the `elytron` `security-domain` `role-decoder` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=role-decoder)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `role-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `role-mapper`
reference to the `rolemapper` to be used by this domain.
get the `elytron` `security-domain` `role-mapper` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=role-mapper)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `security-event-listener`
reference to a listener for security events.
get the `elytron` `security-domain` `security-event-listener` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=security-event-listener)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `security-event-listener`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `trusted-security-domains`
the list of security domains that are trusted by this security domain.
get the `elytron` `security-domain` `trusted-security-domains` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=trusted-security-domains)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `trusted-security-domains`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `security-domain` `trusted-virtual-security-domains`
the list of virtual security domains that are trusted by this security domain.
get the `elytron` `security-domain` `trusted-virtual-security-domains` attribute.
operation: `/subsystem=elytron/security-domain=<security-domain name>:read-attribute(name=trusted-virtual-security-domains)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `security-domain` `trusted-virtual-security-domains`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `constant-realm-mapper`
operation: `/subsystem=elytron/constant-realm-mapper=<constant-realm-mapper name>:read-resource()`
To get the list of all the `elytron` `constant-realm-mapper` use '*' for `<constant-realm-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `constant-realm-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `constant-realm-mapper` `realm-name`
the name of the constant realm to return.
get the `elytron` `constant-realm-mapper` `realm-name` attribute.
operation: `/subsystem=elytron/constant-realm-mapper=<constant-realm-mapper name>:read-attribute(name=realm-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `constant-realm-mapper` `realm-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `source-address-role-decoder`
operation: `/subsystem=elytron/source-address-role-decoder=<source-address-role-decoder name>:read-resource()`
To get the list of all the `elytron` `source-address-role-decoder` use '*' for `<source-address-role-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `source-address-role-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `source-address-role-decoder` `pattern`
a regular expression that specifies the `ip` address to match.
get the `elytron` `source-address-role-decoder` `pattern` attribute.
operation: `/subsystem=elytron/source-address-role-decoder=<source-address-role-decoder name>:read-attribute(name=pattern)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `source-address-role-decoder` `pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `source-address-role-decoder` `roles`
the list of roles to assign if the `ip` address of the remote client matches.
get the `elytron` `source-address-role-decoder` `roles` attribute.
operation: `/subsystem=elytron/source-address-role-decoder=<source-address-role-decoder name>:read-attribute(name=roles)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `source-address-role-decoder` `roles`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `source-address-role-decoder` `source-address`
the `ip` address to match.
get the `elytron` `source-address-role-decoder` `source-address` attribute.
operation: `/subsystem=elytron/source-address-role-decoder=<source-address-role-decoder name>:read-attribute(name=source-address)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `source-address-role-decoder` `source-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-realm`
operation: `/subsystem=elytron/aggregate-realm=<aggregate-realm name>:read-resource()`
To get the list of all the `elytron` `aggregate-realm` use '*' for `<aggregate-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-realm` `authentication-realm`
reference to the security realm to use for authentication steps (obtaining or validating credentials).
get the `elytron` `aggregate-realm` `authentication-realm` attribute.
operation: `/subsystem=elytron/aggregate-realm=<aggregate-realm name>:read-attribute(name=authentication-realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-realm` `authentication-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-realm` `authorization-realm`
reference to the security realm to use for loading the identity for authorization steps (loading of the identity).
get the `elytron` `aggregate-realm` `authorization-realm` attribute.
operation: `/subsystem=elytron/aggregate-realm=<aggregate-realm name>:read-attribute(name=authorization-realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-realm` `authorization-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-realm` `authorization-realms`
reference to one or more security realms to use for loading the identity for authorization steps and aggregating the attributes (loading of the identity).
get the `elytron` `aggregate-realm` `authorization-realms` attribute.
operation: `/subsystem=elytron/aggregate-realm=<aggregate-realm name>:read-attribute(name=authorization-realms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-realm` `authorization-realms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-realm` `principal-transformer`
reference to a principal transformer to apply between loading the identity for authentication and loading the identity for authorization
get the `elytron` `aggregate-realm` `principal-transformer` attribute.
operation: `/subsystem=elytron/aggregate-realm=<aggregate-realm name>:read-attribute(name=principal-transformer)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-realm` `principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-providers`
operation: `/subsystem=elytron/aggregate-providers=<aggregate-providers name>:read-resource()`
To get the list of all the `elytron` `aggregate-providers` use '*' for `<aggregate-providers name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-providers` `providers`
the referenced provider[] resources to aggregate.
get the `elytron` `aggregate-providers` `providers` attribute.
operation: `/subsystem=elytron/aggregate-providers=<aggregate-providers name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-providers` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `logical-permission-mapper`
operation: `/subsystem=elytron/logical-permission-mapper=<logical-permission-mapper name>:read-resource()`
To get the list of all the `elytron` `logical-permission-mapper` use '*' for `<logical-permission-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `logical-permission-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `logical-permission-mapper` `left`
reference to the permission mapper to use to the left of the operation.
get the `elytron` `logical-permission-mapper` `left` attribute.
operation: `/subsystem=elytron/logical-permission-mapper=<logical-permission-mapper name>:read-attribute(name=left)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `logical-permission-mapper` `left`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `logical-permission-mapper` `logical-operation`
the logical operation to use to combine the permission mappers.
get the `elytron` `logical-permission-mapper` `logical-operation` attribute.
operation: `/subsystem=elytron/logical-permission-mapper=<logical-permission-mapper name>:read-attribute(name=logical-operation)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `logical-permission-mapper` `logical-operation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `logical-permission-mapper` `right`
reference to the permission mapper to use to the right of the operation.
get the `elytron` `logical-permission-mapper` `right` attribute.
operation: `/subsystem=elytron/logical-permission-mapper=<logical-permission-mapper name>:read-attribute(name=right)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `logical-permission-mapper` `right`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `constant-principal-transformer`
operation: `/subsystem=elytron/constant-principal-transformer=<constant-principal-transformer name>:read-resource()`
To get the list of all the `elytron` `constant-principal-transformer` use '*' for `<constant-principal-transformer name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `constant-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `constant-principal-transformer` `constant`
the constant value this `principaltransformer` will always return.
get the `elytron` `constant-principal-transformer` `constant` attribute.
operation: `/subsystem=elytron/constant-principal-transformer=<constant-principal-transformer name>:read-attribute(name=constant)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `constant-principal-transformer` `constant`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `dynamic-client-ssl-context`
operation: `/subsystem=elytron/dynamic-client-ssl-context=<dynamic-client-ssl-context name>:read-resource()`
To get the list of all the `elytron` `dynamic-client-ssl-context` use '*' for `<dynamic-client-ssl-context name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `dynamic-client-ssl-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `dynamic-client-ssl-context` `authentication-context`
the authentication context that will be queried for `ssl` context based on peer information.
get the `elytron` `dynamic-client-ssl-context` `authentication-context` attribute.
operation: `/subsystem=elytron/dynamic-client-ssl-context=<dynamic-client-ssl-context name>:read-attribute(name=authentication-context)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `dynamic-client-ssl-context` `authentication-context`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `provider-http-server-mechanism-factory`
operation: `/subsystem=elytron/provider-http-server-mechanism-factory=<provider-http-server-mechanism-factory name>:read-resource()`
To get the list of all the `elytron` `provider-http-server-mechanism-factory` use '*' for `<provider-http-server-mechanism-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `provider-http-server-mechanism-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-http-server-mechanism-factory` `available-mechanisms`
the `http` mechanisms available from this factory instance.
get the `elytron` `provider-http-server-mechanism-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/provider-http-server-mechanism-factory=<provider-http-server-mechanism-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-http-server-mechanism-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `provider-http-server-mechanism-factory` `providers`
the providers to use to locate the factories, if not specified the globally registered list of providers will be used.
get the `elytron` `provider-http-server-mechanism-factory` `providers` attribute.
operation: `/subsystem=elytron/provider-http-server-mechanism-factory=<provider-http-server-mechanism-factory name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `provider-http-server-mechanism-factory` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `constant-role-mapper`
operation: `/subsystem=elytron/constant-role-mapper=<constant-role-mapper name>:read-resource()`
To get the list of all the `elytron` `constant-role-mapper` use '*' for `<constant-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `constant-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `constant-role-mapper` `roles`
the constant roles to be returned by this role mapper.
get the `elytron` `constant-role-mapper` `roles` attribute.
operation: `/subsystem=elytron/constant-role-mapper=<constant-role-mapper name>:read-attribute(name=roles)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `constant-role-mapper` `roles`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `service-loader-sasl-server-factory`
operation: `/subsystem=elytron/service-loader-sasl-server-factory=<service-loader-sasl-server-factory name>:read-resource()`
To get the list of all the `elytron` `service-loader-sasl-server-factory` use '*' for `<service-loader-sasl-server-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `service-loader-sasl-server-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `service-loader-sasl-server-factory` `available-mechanisms`
the `sasl` mechanisms available from this factory after all filtering has been applied.
get the `elytron` `service-loader-sasl-server-factory` `available-mechanisms` attribute.
operation: `/subsystem=elytron/service-loader-sasl-server-factory=<service-loader-sasl-server-factory name>:read-attribute(name=available-mechanisms)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `service-loader-sasl-server-factory` `available-mechanisms`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `service-loader-sasl-server-factory` `module`
the module to use to obtain the `classloader` to load the factories, if not specified the `classloader` to load the resource will be used instead.
get the `elytron` `service-loader-sasl-server-factory` `module` attribute.
operation: `/subsystem=elytron/service-loader-sasl-server-factory=<service-loader-sasl-server-factory name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `service-loader-sasl-server-factory` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `caching-realm`
operation: `/subsystem=elytron/caching-realm=<caching-realm name>:read-resource()`
To get the list of all the `elytron` `caching-realm` use '*' for `<caching-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `caching-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `caching-realm` `maximum-age`
the time in milliseconds that an item can stay in the cache.
get the `elytron` `caching-realm` `maximum-age` attribute.
operation: `/subsystem=elytron/caching-realm=<caching-realm name>:read-attribute(name=maximum-age)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `caching-realm` `maximum-age`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `caching-realm` `maximum-entries`
the maximum number of entries to keep in the cache.
get the `elytron` `caching-realm` `maximum-entries` attribute.
operation: `/subsystem=elytron/caching-realm=<caching-realm name>:read-attribute(name=maximum-entries)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `caching-realm` `maximum-entries`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `caching-realm` `realm`
a reference to a `cacheable` security realm.
get the `elytron` `caching-realm` `realm` attribute.
operation: `/subsystem=elytron/caching-realm=<caching-realm name>:read-attribute(name=realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `caching-realm` `realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `concatenating-principal-decoder`
operation: `/subsystem=elytron/concatenating-principal-decoder=<concatenating-principal-decoder name>:read-resource()`
To get the list of all the `elytron` `concatenating-principal-decoder` use '*' for `<concatenating-principal-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `concatenating-principal-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `concatenating-principal-decoder` `joiner`
the string to use to join the results of the referenced principal decoders.
get the `elytron` `concatenating-principal-decoder` `joiner` attribute.
operation: `/subsystem=elytron/concatenating-principal-decoder=<concatenating-principal-decoder name>:read-attribute(name=joiner)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `concatenating-principal-decoder` `joiner`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `concatenating-principal-decoder` `principal-decoders`
the referenced principal decoders to concatenate.
get the `elytron` `concatenating-principal-decoder` `principal-decoders` attribute.
operation: `/subsystem=elytron/concatenating-principal-decoder=<concatenating-principal-decoder name>:read-attribute(name=principal-decoders)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `concatenating-principal-decoder` `principal-decoders`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `credential-store`
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-resource()`
To get the list of all the `elytron` `credential-store` use '*' for `<credential-store name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `credential-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `create`
specifies whether credential store should create storage when it `doesn't` exist.
get the `elytron` `credential-store` `create` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=create)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `create`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `credential-reference`
credential reference to be used to create protection parameter.
get the `elytron` `credential-store` `credential-reference` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `implementation-properties`
map of credentials store implementation specific properties.
get the `elytron` `credential-store` `implementation-properties` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=implementation-properties)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `implementation-properties`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `location`
file name of credential store storage.
get the `elytron` `credential-store` `location` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=location)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `location`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `modifiable`
specifies whether credential store is modifiable.
get the `elytron` `credential-store` `modifiable` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=modifiable)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `modifiable`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `other-providers`
the name of the providers defined within the subsystem to obtain the providers to search for the one that can create the required jakarta connectors objects within credential store. this is valid only for `key-store` based `credentialstore`. if this is not specified then the global list of providers is used instead.
get the `elytron` `credential-store` `other-providers` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=other-providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `other-providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `path`
file name of credential store storage.
get the `elytron` `credential-store` `path` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `provider-name`
the name of the provider to use to instantiate the `credentialstorespi`. if the provider is not specified then the first provider found that can create an instance of the specified 'type' will be used.
get the `elytron` `credential-store` `provider-name` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=provider-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `provider-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `providers`
the name of the providers defined within the subsystem to obtain the providers to search for the one that can create the required `credentialstore` type. if this is not specified then the global list of providers is used instead.
get the `elytron` `credential-store` `providers` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `relative-to`
a reference to a previously defined path that the file name is relative to.
get the `elytron` `credential-store` `relative-to` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `state`
the state of the underlying service that represents this credential store at runtime.
get the `elytron` `credential-store` `state` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=state)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `credential-store` `type`
the credential store type, `e.g`. `keystorecredentialstore`.
get the `elytron` `credential-store` `type` attribute.
operation: `/subsystem=elytron/credential-store=<credential-store name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `credential-store` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-modifiable-realm`
operation: `/subsystem=elytron/custom-modifiable-realm=<custom-modifiable-realm name>:read-resource()`
To get the list of all the `elytron` `custom-modifiable-realm` use '*' for `<custom-modifiable-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-modifiable-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-modifiable-realm` `class-name`
the class name of the implementation of the custom realm.
get the `elytron` `custom-modifiable-realm` `class-name` attribute.
operation: `/subsystem=elytron/custom-modifiable-realm=<custom-modifiable-realm name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-modifiable-realm` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-modifiable-realm` `configuration`
the optional `key/value` configuration for the custom realm.
get the `elytron` `custom-modifiable-realm` `configuration` attribute.
operation: `/subsystem=elytron/custom-modifiable-realm=<custom-modifiable-realm name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-modifiable-realm` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-modifiable-realm` `module`
the module to use to load the custom realm.
get the `elytron` `custom-modifiable-realm` `module` attribute.
operation: `/subsystem=elytron/custom-modifiable-realm=<custom-modifiable-realm name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-modifiable-realm` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-credential-security-factory`
operation: `/subsystem=elytron/custom-credential-security-factory=<custom-credential-security-factory name>:read-resource()`
To get the list of all the `elytron` `custom-credential-security-factory` use '*' for `<custom-credential-security-factory name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-credential-security-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-credential-security-factory` `class-name`
the class name of the implementation of the custom security factory.
get the `elytron` `custom-credential-security-factory` `class-name` attribute.
operation: `/subsystem=elytron/custom-credential-security-factory=<custom-credential-security-factory name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-credential-security-factory` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-credential-security-factory` `configuration`
the optional `key/value` configuration for the custom security factory.
get the `elytron` `custom-credential-security-factory` `configuration` attribute.
operation: `/subsystem=elytron/custom-credential-security-factory=<custom-credential-security-factory name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-credential-security-factory` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-credential-security-factory` `module`
the module to use to load the custom security factory.
get the `elytron` `custom-credential-security-factory` `module` attribute.
operation: `/subsystem=elytron/custom-credential-security-factory=<custom-credential-security-factory name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-credential-security-factory` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `key-store`
operation: `/subsystem=elytron/key-store=<key-store name>:read-resource()`
To get the list of all the `elytron` `key-store` use '*' for `<key-store name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `key-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `alias-filter`
a filter to apply to the aliases returned from the `keystore`, can either be a comma separated list of aliases to return or one of the following formats `all:-alias1:-alias2`, `none:+alias1:+alias2`
get the `elytron` `key-store` `alias-filter` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=alias-filter)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `alias-filter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `credential-reference`
the reference to credential stored in `credentialstore` under defined alias or clear text password.
get the `elytron` `key-store` `credential-reference` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=credential-reference)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `credential-reference`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `loaded-provider`
information about the provider that was used for this `keystore`.
get the `elytron` `key-store` `loaded-provider` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=loaded-provider)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `loaded-provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `modified`
indicates if the `in-memory` representation of the `keystore` has been changed since it was last loaded or stored.  note: for some providers updates may be immediate without further load or store calls.
get the `elytron` `key-store` `modified` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=modified)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `modified`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `path`
the path to the `keystore` file.
get the `elytron` `key-store` `path` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `provider-name`
the name of the provider to use to load the `keystore`, disables searching for the first provider that can create a `keystore` of the specified type.
get the `elytron` `key-store` `provider-name` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=provider-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `provider-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `providers`
a reference to the providers that should be used to obtain the list of provider instances to search, if not specified the global list of providers will be used instead.
get the `elytron` `key-store` `providers` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=providers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `providers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `relative-to`
the base path this store is relative to.
get the `elytron` `key-store` `relative-to` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `required`
is the file required to exist at the time the `keystore` service starts?
get the `elytron` `key-store` `required` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=required)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `size`
the number of entries in the `keystore`.
get the `elytron` `key-store` `size` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=size)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `state`
the state of the underlying service that represents this `keystore` at runtime, if it is anything other than up runtime operations will not be available.
get the `elytron` `key-store` `state` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=state)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `state`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `synchronized`
the time this `keystore` was last loaded or saved. note: some providers may continue to apply updates after the `keystore` was loaded within the application server.
get the `elytron` `key-store` `synchronized` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=synchronized)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `synchronized`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `key-store` `type`
the type of the `keystore`, used when creating the new `keystore` instance.
get the `elytron` `key-store` `type` attribute.
operation: `/subsystem=elytron/key-store=<key-store name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `key-store` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-role-decoder`
operation: `/subsystem=elytron/custom-role-decoder=<custom-role-decoder name>:read-resource()`
To get the list of all the `elytron` `custom-role-decoder` use '*' for `<custom-role-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-role-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-role-decoder` `class-name`
fully qualified class name of the `roledecoder`
get the `elytron` `custom-role-decoder` `class-name` attribute.
operation: `/subsystem=elytron/custom-role-decoder=<custom-role-decoder name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-role-decoder` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-role-decoder` `configuration`
the optional `kay/value` configuration for the `roledecoder`
get the `elytron` `custom-role-decoder` `configuration` attribute.
operation: `/subsystem=elytron/custom-role-decoder=<custom-role-decoder name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-role-decoder` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-role-decoder` `module`
name of the module to use to load the `roledecoder`
get the `elytron` `custom-role-decoder` `module` attribute.
operation: `/subsystem=elytron/custom-role-decoder=<custom-role-decoder name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-role-decoder` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `simple-role-decoder`
operation: `/subsystem=elytron/simple-role-decoder=<simple-role-decoder name>:read-resource()`
To get the list of all the `elytron` `simple-role-decoder` use '*' for `<simple-role-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `simple-role-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `simple-role-decoder` `attribute`
the name of the attribute from the identity to map directly to roles.
get the `elytron` `simple-role-decoder` `attribute` attribute.
operation: `/subsystem=elytron/simple-role-decoder=<simple-role-decoder name>:read-attribute(name=attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `simple-role-decoder` `attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-principal-transformer`
operation: `/subsystem=elytron/aggregate-principal-transformer=<aggregate-principal-transformer name>:read-resource()`
To get the list of all the `elytron` `aggregate-principal-transformer` use '*' for `<aggregate-principal-transformer name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-principal-transformer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-principal-transformer` `principal-transformers`
the referenced principal transformers to aggregate.
get the `elytron` `aggregate-principal-transformer` `principal-transformers` attribute.
operation: `/subsystem=elytron/aggregate-principal-transformer=<aggregate-principal-transformer name>:read-attribute(name=principal-transformers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-principal-transformer` `principal-transformers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `x500-subject-evidence-decoder`
operation: `/subsystem=elytron/x500-subject-evidence-decoder=<x500-subject-evidence-decoder name>:read-resource()`
To get the list of all the `elytron` `x500-subject-evidence-decoder` use '*' for `<x500-subject-evidence-decoder name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `x500-subject-evidence-decoder`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `aggregate-role-mapper`
operation: `/subsystem=elytron/aggregate-role-mapper=<aggregate-role-mapper name>:read-resource()`
To get the list of all the `elytron` `aggregate-role-mapper` use '*' for `<aggregate-role-mapper name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `aggregate-role-mapper`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `aggregate-role-mapper` `role-mappers`
the referenced role mappers to aggregate.
get the `elytron` `aggregate-role-mapper` `role-mappers` attribute.
operation: `/subsystem=elytron/aggregate-role-mapper=<aggregate-role-mapper name>:read-attribute(name=role-mappers)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `aggregate-role-mapper` `role-mappers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron` `custom-realm`
operation: `/subsystem=elytron/custom-realm=<custom-realm name>:read-resource()`
To get the list of all the `elytron` `custom-realm` use '*' for `<custom-realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron` `custom-realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-realm` `class-name`
the class name of the implementation of the custom realm.
get the `elytron` `custom-realm` `class-name` attribute.
operation: `/subsystem=elytron/custom-realm=<custom-realm name>:read-attribute(name=class-name)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-realm` `class-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-realm` `configuration`
the optional `key/value` configuration for the custom realm.
get the `elytron` `custom-realm` `configuration` attribute.
operation: `/subsystem=elytron/custom-realm=<custom-realm name>:read-attribute(name=configuration)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-realm` `configuration`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron` `custom-realm` `module`
the module to use to load the custom realm.
get the `elytron` `custom-realm` `module` attribute.
operation: `/subsystem=elytron/custom-realm=<custom-realm name>:read-attribute(name=module)`" metadata = {parent=, title=syntax of the operation to get the `elytron` `custom-realm` `module`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jsf` `default-jsf-impl-slot`
default jakarta server faces implementation slot
get the `jsf` `default-jsf-impl-slot` attribute.
operation: `/subsystem=jsf:read-attribute(name=default-jsf-impl-slot)`" metadata = {parent=, title=syntax of the operation to get the `jsf` `default-jsf-impl-slot`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `jsf` `disallow-doctype-decl`
specifies whether or not `doctype` declarations in jakarta server faces deployments should be disallowed. this setting can be overridden at the deployment level.
get the `jsf` `disallow-doctype-decl` attribute.
operation: `/subsystem=jsf:read-attribute(name=disallow-doctype-decl)`" metadata = {parent=, title=syntax of the operation to get the `jsf` `disallow-doctype-decl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `default-tracer`
default tracer for the deployments if none is defined.
get the `microprofile-opentracing-smallrye` `default-tracer` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye:read-attribute(name=default-tracer)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `default-tracer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `microprofile-opentracing-smallrye` `jaeger-tracer`
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-resource()`
To get the list of all the `microprofile-opentracing-smallrye` `jaeger-tracer` use '*' for `<jaeger-tracer name>`." metadata = {parent=, title=syntax of the operation to get a `microprofile-opentracing-smallrye` `jaeger-tracer`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `propagation`
list of formats to use for propagating the trace context.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `propagation` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=propagation)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `propagation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-flush-interval`
the flush interval when reporting spans remotely.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-flush-interval` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=reporter-flush-interval)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-flush-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-log-spans`
whether the reporter should log the spans.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-log-spans` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=reporter-log-spans)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-log-spans`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-max-queue-size`
the maximum queue size for use when reporting spans remotely.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-max-queue-size` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=reporter-max-queue-size)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `reporter-max-queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-manager-host-port`
the jaeger sampler host port.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-manager-host-port` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sampler-manager-host-port)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-manager-host-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-param`
the jaeger sampler parameter. for a 'constant' sampler `0` means no trace and `1` means all traces. for a 'probabilistic' sample this is the probability of sampling. for a 'rate limiting' sampler this define the number of traces per second.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-param` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sampler-param)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-param`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-type`
the jaeger sampler type. there are `4` supported type: 'const', 'probabilistic', '`ratelimiting`' and 'remote'.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-type` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sampler-type)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sampler-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-password`
the basic auth password to be added on authorization headers for requests sent to the endpoint.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-password` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sender-auth-password)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-token`
the auth token to be added as "bearer" on authorization headers for requests sent to the endpoint.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-token` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sender-auth-token)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-user`
the basic auth `username` to be added on authorization headers for requests sent to the endpoint.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-user` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sender-auth-user)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-auth-user`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-binding`
the outbound binding used to connect to the agent.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-binding` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sender-binding)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-binding`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-endpoint`
the full `url` to the traces endpoint, like `https://jaeger-collector:14268/api/traces`
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-endpoint` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=sender-endpoint)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `sender-endpoint`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `tags`
the tracer level tags.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `tags` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=tags)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `tags`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `tracer_id_128bit`
`opt-in` to use `128` bit `traceids`. by default, uses `64` bits.
get the `microprofile-opentracing-smallrye` `jaeger-tracer` `tracer_id_128bit` attribute.
operation: `/subsystem=microprofile-opentracing-smallrye/jaeger-tracer=<jaeger-tracer name>:read-attribute(name=tracer_id_128bit)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-opentracing-smallrye` `jaeger-tracer` `tracer_id_128bit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `default-job-repository`
the name of the default job repository.
get the `batch-jberet` `default-job-repository` attribute.
operation: `/subsystem=batch-jberet:read-attribute(name=default-job-repository)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `default-job-repository`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `default-thread-pool`
the name of the default `thread-pool`.
get the `batch-jberet` `default-thread-pool` attribute.
operation: `/subsystem=batch-jberet:read-attribute(name=default-thread-pool)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `default-thread-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `restart-jobs-on-resume`
if set to true when a resume operation has been invoked after a suspend operation any jobs stopped during the suspend will be restarted. a value of false will leave the jobs in a stopped state.
get the `batch-jberet` `restart-jobs-on-resume` attribute.
operation: `/subsystem=batch-jberet:read-attribute(name=restart-jobs-on-resume)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `restart-jobs-on-resume`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `security-domain`
references the security domain for batch jobs. this can only be defined if the elytron subsystem is available.
get the `batch-jberet` `security-domain` attribute.
operation: `/subsystem=batch-jberet:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `batch-jberet` `in-memory-job-repository`
operation: `/subsystem=batch-jberet/in-memory-job-repository=<in-memory-job-repository name>:read-resource()`
To get the list of all the `batch-jberet` `in-memory-job-repository` use '*' for `<in-memory-job-repository name>`." metadata = {parent=, title=syntax of the operation to get a `batch-jberet` `in-memory-job-repository`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `in-memory-job-repository` `execution-records-limit`
the maximum number of job execution records that should be returned by the job repository.
get the `batch-jberet` `in-memory-job-repository` `execution-records-limit` attribute.
operation: `/subsystem=batch-jberet/in-memory-job-repository=<in-memory-job-repository name>:read-attribute(name=execution-records-limit)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `in-memory-job-repository` `execution-records-limit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `batch-jberet` `thread-pool`
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-resource()`
To get the list of all the `batch-jberet` `thread-pool` use '*' for `<thread-pool name>`." metadata = {parent=, title=syntax of the operation to get a `batch-jberet` `thread-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `active-count`
the approximate number of threads that are actively executing tasks.
get the `batch-jberet` `thread-pool` `active-count` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=active-count)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `active-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `completed-task-count`
the approximate total number of tasks that have completed execution.
get the `batch-jberet` `thread-pool` `completed-task-count` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=completed-task-count)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `completed-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `current-thread-count`
the current number of threads in the pool.
get the `batch-jberet` `thread-pool` `current-thread-count` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `keepalive-time`
used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `batch-jberet` `thread-pool` `keepalive-time` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool.
get the `batch-jberet` `thread-pool` `largest-thread-count` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `max-threads`
the maximum thread pool size. note this should always be greater than `3`. two threads are reserved to ensure partition jobs can execute as expected.
get the `batch-jberet` `thread-pool` `max-threads` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `name`
the name of the thread pool.
get the `batch-jberet` `thread-pool` `name` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `queue-size`
the queue size.
get the `batch-jberet` `thread-pool` `queue-size` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `rejected-count`
the number of tasks that have been rejected.
get the `batch-jberet` `thread-pool` `rejected-count` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=rejected-count)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `rejected-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `task-count`
the approximate total number of tasks that have ever been scheduled for execution.
get the `batch-jberet` `thread-pool` `task-count` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=task-count)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-pool` `thread-factory`
specifies the name of a specific thread factory to use to create worker threads. if not defined an appropriate default thread factory will be used.
get the `batch-jberet` `thread-pool` `thread-factory` attribute.
operation: `/subsystem=batch-jberet/thread-pool=<thread-pool name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-pool` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `batch-jberet` `thread-factory`
operation: `/subsystem=batch-jberet/thread-factory=<thread-factory name>:read-resource()`
To get the list of all the `batch-jberet` `thread-factory` use '*' for `<thread-factory name>`." metadata = {parent=, title=syntax of the operation to get a `batch-jberet` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-factory` `group-name`
specifies the name of a  thread group to create for this thread factory.
get the `batch-jberet` `thread-factory` `group-name` attribute.
operation: `/subsystem=batch-jberet/thread-factory=<thread-factory name>:read-attribute(name=group-name)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-factory` `group-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-factory` `name`
the name of the created thread factory.
get the `batch-jberet` `thread-factory` `name` attribute.
operation: `/subsystem=batch-jberet/thread-factory=<thread-factory name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-factory` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-factory` `priority`
may be used to specify the thread priority of created threads.
get the `batch-jberet` `thread-factory` `priority` attribute.
operation: `/subsystem=batch-jberet/thread-factory=<thread-factory name>:read-attribute(name=priority)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-factory` `priority`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `thread-factory` `thread-name-pattern`
the template used to create names for threads.  the following patterns may be used:
%% - emit a percent sign
%t - emit the `per-factory` thread sequence number
%g - emit the global thread sequence number
%f - emit the factory sequence number
%i - emit the thread id.
get the `batch-jberet` `thread-factory` `thread-name-pattern` attribute.
operation: `/subsystem=batch-jberet/thread-factory=<thread-factory name>:read-attribute(name=thread-name-pattern)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `thread-factory` `thread-name-pattern`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `batch-jberet` `jdbc-job-repository`
operation: `/subsystem=batch-jberet/jdbc-job-repository=<jdbc-job-repository name>:read-resource()`
To get the list of all the `batch-jberet` `jdbc-job-repository` use '*' for `<jdbc-job-repository name>`." metadata = {parent=, title=syntax of the operation to get a `batch-jberet` `jdbc-job-repository`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `jdbc-job-repository` `data-source`
the data source name used to connect to the database.
get the `batch-jberet` `jdbc-job-repository` `data-source` attribute.
operation: `/subsystem=batch-jberet/jdbc-job-repository=<jdbc-job-repository name>:read-attribute(name=data-source)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `jdbc-job-repository` `data-source`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `batch-jberet` `jdbc-job-repository` `execution-records-limit`
the maximum number of job execution records that should be returned by the job repository.
get the `batch-jberet` `jdbc-job-repository` `execution-records-limit` attribute.
operation: `/subsystem=batch-jberet/jdbc-job-repository=<jdbc-job-repository name>:read-attribute(name=execution-records-limit)`" metadata = {parent=, title=syntax of the operation to get the `batch-jberet` `jdbc-job-repository` `execution-records-limit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-health-smallrye` `empty-liveness-checks-status`
defines the global status returned by the health checks endpoints if no liveness probes have been defined in deployments.
get the `microprofile-health-smallrye` `empty-liveness-checks-status` attribute.
operation: `/subsystem=microprofile-health-smallrye:read-attribute(name=empty-liveness-checks-status)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-health-smallrye` `empty-liveness-checks-status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-health-smallrye` `empty-readiness-checks-status`
defines the global status returned by the health checks endpoints if no readiness probes have been defined in deployments.
get the `microprofile-health-smallrye` `empty-readiness-checks-status` attribute.
operation: `/subsystem=microprofile-health-smallrye:read-attribute(name=empty-readiness-checks-status)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-health-smallrye` `empty-readiness-checks-status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-health-smallrye` `empty-startup-checks-status`
defines the global status returned by the health checks endpoints if no startup probes have been defined in deployments.
get the `microprofile-health-smallrye` `empty-startup-checks-status` attribute.
operation: `/subsystem=microprofile-health-smallrye:read-attribute(name=empty-startup-checks-status)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-health-smallrye` `empty-startup-checks-status`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-health-smallrye` `security-enabled`
true if authentication is required to access the `http` endpoints on the `http` management interface.
get the `microprofile-health-smallrye` `security-enabled` attribute.
operation: `/subsystem=microprofile-health-smallrye:read-attribute(name=security-enabled)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-health-smallrye` `security-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `provider`
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-resource()`
To get the list of all the `elytron-oidc-client` `provider` use '*' for `<provider name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `allow-any-hostname`
if set to 'true', `hostname` verification is skipped when communicating with the `openid` provider over `https`. this can be useful in testing environments. this should never be set to 'true' in production environments as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `provider` `allow-any-hostname` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=allow-any-hostname)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `allow-any-hostname`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `always-refresh-token`
if set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to the `openid` provider to obtain a new access token. this can result in a higher load on the `openid` provider and may impact the performance of the application.
get the `elytron-oidc-client` `provider` `always-refresh-token` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=always-refresh-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `always-refresh-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `auth-server-url`
the base `url` of the `keycloak` authorization server. this is `keycloak-specific`. it is recommended to use the '`provider-url`' instead.
get the `elytron-oidc-client` `provider` `auth-server-url` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=auth-server-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `auth-server-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `autodetect-bearer-only`
whether to `auto-detect` soap or rest clients based on headers like '`x-requested-with`', '`soapaction`' or 'accept'. if set to 'true', the subsystem sends an `http` `401` status code to unauthenticated soap or rest clients instead of redirecting them to the `openid` provider login page. set the value to 'true' if your application serves both applications and web services.
get the `elytron-oidc-client` `provider` `autodetect-bearer-only` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=autodetect-bearer-only)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `autodetect-bearer-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `client-key-password`
the password for the client key. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `provider` `client-key-password` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=client-key-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `client-key-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `client-keystore`
the path to the client `keystore` to use when communicating with the `openid` provider over `https`. this is optional.
get the `elytron-oidc-client` `provider` `client-keystore` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=client-keystore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `client-keystore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `client-keystore-password`
the password for the client `keystore`. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `provider` `client-keystore-password` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=client-keystore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `client-keystore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `confidential-port`
the confidential port used by the `openid` provider when communicating securely over `ssl/tls`.
get the `elytron-oidc-client` `provider` `confidential-port` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=confidential-port)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `confidential-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `connection-pool-size`
the connection pool size to use when communicating with the `openid` provider.
get the `elytron-oidc-client` `provider` `connection-pool-size` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=connection-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `connection-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `connection-timeout-millis`
the timeout for establishing a connection with the remote host in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `provider` `connection-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=connection-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `connection-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `connection-ttl-millis`
the amount of time in milliseconds for the connection to be kept alive. a value less than or equal to zero is interpreted as an infinite value.
get the `elytron-oidc-client` `provider` `connection-ttl-millis` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=connection-ttl-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `connection-ttl-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `cors-allowed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `provider` `cors-allowed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=cors-allowed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `cors-allowed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `cors-allowed-methods`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-methods`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `provider` `cors-allowed-methods` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=cors-allowed-methods)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `cors-allowed-methods`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `cors-exposed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-expose-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `provider` `cors-exposed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=cors-exposed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `cors-exposed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `cors-max-age`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-max-age`' header. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `provider` `cors-max-age` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=cors-max-age)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `cors-max-age`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `disable-trust-manager`
whether or not to make use of a trust manager when communicating with the `openid` provider over `https`. this is optional. this should be set to 'true' only during development and never in production as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `provider` `disable-trust-manager` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=disable-trust-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `disable-trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `enable-cors`
enable the `keycloak` `cross-origin` resource sharing (`cors`) support. this is optional. this is `keycloak-specific`.
get the `elytron-oidc-client` `provider` `enable-cors` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=enable-cors)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `enable-cors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `expose-token`
if set to 'true', an authenticated browser client can obtain the signed access token (through a `javascript` `http` invocation) via the `url` '`root/k_query_bearer_token`'. this is optional.
get the `elytron-oidc-client` `provider` `expose-token` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=expose-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `expose-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `ignore-oauth-query-parameter`
disable query parameter parsing for the '`access_token`'. users will not be able to authenticate if they only pass in an '`access_token`'.
get the `elytron-oidc-client` `provider` `ignore-oauth-query-parameter` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=ignore-oauth-query-parameter)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `ignore-oauth-query-parameter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `principal-attribute`
indicates which value from the id token to use as the principal for the identity. the principal defaults to the value of the 'sub' if the token attribute is null.
get the `elytron-oidc-client` `provider` `principal-attribute` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=principal-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `principal-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `provider-url`
the `openid` provider `url`.
get the `elytron-oidc-client` `provider` `provider-url` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=provider-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `provider-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `proxy-url`
the `url` for the `http` proxy if one is used.
get the `elytron-oidc-client` `provider` `proxy-url` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=proxy-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `proxy-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `realm-public-key`
the public key of the `openid` provider in `pem` format. this is optional. it is not recommended to set it. if the public key is not set, the subsystem downloads the public key from the `openid` provider when needed. if the public key is set, the subsystem never downloads new keys from the `openid` provider, breaking the subsystem when the `openid` provider rotates its keys.
get the `elytron-oidc-client` `provider` `realm-public-key` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=realm-public-key)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `realm-public-key`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `register-node-at-startup`
if set to 'true', the subsystem sends a registration request to the `openid` provider. this attribute is useful only when your application is clustered.
get the `elytron-oidc-client` `provider` `register-node-at-startup` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=register-node-at-startup)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `register-node-at-startup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `register-node-period`
if '`register-node-at-startup`' is set to 'true', this specifies the frequency (in seconds) at which the node should be `re-registered`.
get the `elytron-oidc-client` `provider` `register-node-period` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=register-node-period)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `register-node-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `socket-timeout-millis`
the timeout for the socket waiting for data after establishing the connection in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `provider` `socket-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=socket-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `socket-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `ssl-required`
whether the communication with the `openid` provider should be over `https`. valid values are: 'all' - to always require `https`, 'external' - to only require `https` for external requests, 'none' - if `https` is not required. this should be set to 'all' in production environments.
get the `elytron-oidc-client` `provider` `ssl-required` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=ssl-required)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `ssl-required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `token-signature-algorithm`
the token signature algorithm used by the `openid` provider.
get the `elytron-oidc-client` `provider` `token-signature-algorithm` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=token-signature-algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `token-signature-algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `token-store`
defines whether to store account information in an `http` session or in a cookie.
get the `elytron-oidc-client` `provider` `token-store` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=token-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `token-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `truststore`
the path to the `truststore` to use when communicating with `keycloak` over `https`. prefix the path with '`classpath`:' to obtain the `truststore` from the `deployment's` `classpath`.
get the `elytron-oidc-client` `provider` `truststore` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=truststore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `truststore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `truststore-password`
the password for the `truststore`.
get the `elytron-oidc-client` `provider` `truststore-password` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=truststore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `truststore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `provider` `verify-token-audience`
if set to 'true', then during `bearer-only` authentication, the subsystem verifies if the token contains the client name defined as an audience. it is recommended to set the value to 'true' for improved security.
get the `elytron-oidc-client` `provider` `verify-token-audience` attribute.
operation: `/subsystem=elytron-oidc-client/provider=<provider name>:read-attribute(name=verify-token-audience)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `provider` `verify-token-audience`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `secure-server`
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-resource()`
To get the list of all the `elytron-oidc-client` `secure-server` use '*' for `<secure-server name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `secure-server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `adapter-state-cookie-path`
if set, this defines the path used in cookies set by the subsystem. this is useful when deploying an application in the root context path.
get the `elytron-oidc-client` `secure-server` `adapter-state-cookie-path` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=adapter-state-cookie-path)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `adapter-state-cookie-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `allow-any-hostname`
if set to 'true', `hostname` verification is skipped when communicating with the `openid` provider over `https`. this can be useful in testing environments. this should never be set to 'true' in production environments as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `secure-server` `allow-any-hostname` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=allow-any-hostname)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `allow-any-hostname`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `always-refresh-token`
if set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to the `openid` provider to obtain a new access token. this can result in a higher load on the `openid` provider and may impact the performance of the application.
get the `elytron-oidc-client` `secure-server` `always-refresh-token` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=always-refresh-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `always-refresh-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `auth-server-url`
the base `url` of the `keycloak` authorization server. this is `keycloak-specific`. it is recommended to use '`provider-url`' instead.
get the `elytron-oidc-client` `secure-server` `auth-server-url` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=auth-server-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `auth-server-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `autodetect-bearer-only`
whether to `auto-detect` soap or rest clients based on headers like '`x-requested-with`', '`soapaction`' or 'accept'. if set to 'true', the subsystem sends an `http` `401` status code to unauthenticated soap or rest clients instead of redirecting them to the `openid` provider login page. set the value to 'true' if your application serves both applications and web services.
get the `elytron-oidc-client` `secure-server` `autodetect-bearer-only` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=autodetect-bearer-only)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `autodetect-bearer-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `bearer-only`
enable `bearer-token` only authentication. set this to 'true' if your application serves only web services and does not authenticate users.
get the `elytron-oidc-client` `secure-server` `bearer-only` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=bearer-only)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `bearer-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-id`
the unique identifier for a client application registered in the `openid` provider.
get the `elytron-oidc-client` `secure-server` `client-id` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-key-password`
the password for the client key. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `secure-server` `client-key-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=client-key-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-key-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-keystore`
the path to the client `keystore` to use when communicating with the `openid` provider over `https`. this is optional.
get the `elytron-oidc-client` `secure-server` `client-keystore` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=client-keystore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-keystore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-keystore-password`
the password for the client `keystore`. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `secure-server` `client-keystore-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=client-keystore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `client-keystore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `confidential-port`
the confidential port used by the `openid` provider when communicating securely over `ssl/tls`.
get the `elytron-oidc-client` `secure-server` `confidential-port` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=confidential-port)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `confidential-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `connection-pool-size`
the connection pool size to use when communicating with the `openid` provider.
get the `elytron-oidc-client` `secure-server` `connection-pool-size` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=connection-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `connection-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `connection-timeout-millis`
the timeout for establishing a connection with the remote host in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `secure-server` `connection-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=connection-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `connection-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `connection-ttl-millis`
the amount of time in milliseconds for the connection to be kept alive. a value less than or equal to zero is interpreted as an infinite value.
get the `elytron-oidc-client` `secure-server` `connection-ttl-millis` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=connection-ttl-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `connection-ttl-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-allowed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-server` `cors-allowed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=cors-allowed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-allowed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-allowed-methods`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-methods`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-server` `cors-allowed-methods` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=cors-allowed-methods)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-allowed-methods`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-exposed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-expose-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-server` `cors-exposed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=cors-exposed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-exposed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-max-age`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-max-age`' header. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-server` `cors-max-age` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=cors-max-age)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `cors-max-age`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential`
the credential used to communicate with the `openid` connect provider.
get the `elytron-oidc-client` `secure-server` `credential` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=credential)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `disable-trust-manager`
whether or not to make use of a trust manager when communicating with the `openid` provider over `https`. this is optional. this should be set to 'true' only during development and never in production as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `secure-server` `disable-trust-manager` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=disable-trust-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `disable-trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `enable-basic-auth`
enable basic authentication. this is not supported in the current release.
get the `elytron-oidc-client` `secure-server` `enable-basic-auth` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=enable-basic-auth)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `enable-basic-auth`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `enable-cors`
enable the `keycloak` `cross-origin` resource sharing (`cors`) support. this is optional. this is `keycloak-specific`.
get the `elytron-oidc-client` `secure-server` `enable-cors` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=enable-cors)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `enable-cors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `expose-token`
if set to 'true', an authenticated browser client can obtain the signed access token (through a `javascript` `http` invocation) via the `url` '`root/k_query_bearer_token`'. this is optional.
get the `elytron-oidc-client` `secure-server` `expose-token` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=expose-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `expose-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `ignore-oauth-query-parameter`
disable query parameter parsing for the '`access_token`'. users will not be able to authenticate if they only pass in an '`access_token`'.
get the `elytron-oidc-client` `secure-server` `ignore-oauth-query-parameter` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=ignore-oauth-query-parameter)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `ignore-oauth-query-parameter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `min-time-between-jwks-requests`
if the subsystem recognizes a token signed by an unknown public key, it will try to download a new public key from the server. the subsystem `won't` try to download a public key if it already tried last in less than '`min-time-between-jwks-requests`' seconds.
get the `elytron-oidc-client` `secure-server` `min-time-between-jwks-requests` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=min-time-between-jwks-requests)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `min-time-between-jwks-requests`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `principal-attribute`
indicates which value from the id token to use as the principal for the identity. the principal defaults to the value of the 'sub' if the token attribute is null.
get the `elytron-oidc-client` `secure-server` `principal-attribute` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=principal-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `principal-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `provider`
the `openid` connect provider to use for authentication.
get the `elytron-oidc-client` `secure-server` `provider` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=provider)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `provider-url`
the `openid` provider `url`.
get the `elytron-oidc-client` `secure-server` `provider-url` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=provider-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `provider-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `proxy-url`
the `url` for the `http` proxy if one is used.
get the `elytron-oidc-client` `secure-server` `proxy-url` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=proxy-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `proxy-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `public-client`
if set to 'true', no client credentials are sent when communicating with the `openid` provider.
get the `elytron-oidc-client` `secure-server` `public-client` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=public-client)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `public-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `public-key-cache-ttl`
the maximum interval between two requests to retrieve new public keys in seconds. new public keys are downloaded when the subsystem recognizes a token signed by an unknown public key. even if the `token's` key is already known, new public keys are downloaded periodically as per the interval set here at least once.
get the `elytron-oidc-client` `secure-server` `public-key-cache-ttl` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=public-key-cache-ttl)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `public-key-cache-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `realm`
the `keycloak` realm to use for authentication.
get the `elytron-oidc-client` `secure-server` `realm` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `realm-public-key`
the public key of the `openid` provider in `pem` format. this is optional. it is not recommended to set it. if the public key is not set, the subsystem downloads the public key from the `openid` provider when needed. if the public key is set, the subsystem never downloads new keys from the `openid` provider, breaking the subsystem when the `openid` provider rotates its keys.
get the `elytron-oidc-client` `secure-server` `realm-public-key` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=realm-public-key)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `realm-public-key`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `redirect-rewrite-rule`
the rewrite rule for the redirect uri. the rewrite rule is an object notation, where the key is a regular expression with which the redirect uri is matched and the value is the replacement string.
get the `elytron-oidc-client` `secure-server` `redirect-rewrite-rule` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=redirect-rewrite-rule)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `redirect-rewrite-rule`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `register-node-at-startup`
if set to 'true', the subsystem sends a registration request to the `openid` provider. this attribute is useful only when your application is clustered.
get the `elytron-oidc-client` `secure-server` `register-node-at-startup` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=register-node-at-startup)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `register-node-at-startup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `register-node-period`
if '`register-node-at-startup`' is set to 'true', this specifies the frequency (in seconds) at which the node should be `re-registered`.
get the `elytron-oidc-client` `secure-server` `register-node-period` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=register-node-period)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `register-node-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `resource`
the unique, legacy identifier for a client application registered in the `openid` provider. it is recommended to use the '`client-id`'.
get the `elytron-oidc-client` `secure-server` `resource` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=resource)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `resource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `socket-timeout-millis`
the timeout for the socket waiting for data after establishing the connection in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `secure-server` `socket-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=socket-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `socket-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `ssl-required`
whether the communication with the `openid` provider should be over `https`. valid values are: 'all' - to always require `https`, 'external' - to only require `https` for external requests, 'none' - if `https` is not required. this should be set to 'all' in production environments.
get the `elytron-oidc-client` `secure-server` `ssl-required` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=ssl-required)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `ssl-required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `token-minimum-time-to-live`
the subsystem will refresh the token if it will expire within the duration specified in '`token-minimum-time-to-live`' seconds. this value should never exceed the access token lifespan. if the value is set to `0` seconds, the subsystem will refresh the token only if the token has expired.
get the `elytron-oidc-client` `secure-server` `token-minimum-time-to-live` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=token-minimum-time-to-live)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `token-minimum-time-to-live`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `token-signature-algorithm`
the token signature algorithm used by the `openid` provider.
get the `elytron-oidc-client` `secure-server` `token-signature-algorithm` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=token-signature-algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `token-signature-algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `token-store`
defines whether to store account information in an `http` session or in a cookie.
get the `elytron-oidc-client` `secure-server` `token-store` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=token-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `token-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `truststore`
the path to the `truststore` to use when communicating with `keycloak` over `https`. prefix the path with '`classpath`:' to obtain the `truststore` from the `deployment's` `classpath`.
get the `elytron-oidc-client` `secure-server` `truststore` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=truststore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `truststore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `truststore-password`
the password for the `truststore`.
get the `elytron-oidc-client` `secure-server` `truststore-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=truststore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `truststore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `turn-off-change-session-id-on-login`
the session id is changed by default on a successful login. set this to 'true' if you want to turn this off.
get the `elytron-oidc-client` `secure-server` `turn-off-change-session-id-on-login` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=turn-off-change-session-id-on-login)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `turn-off-change-session-id-on-login`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `use-resource-role-mappings`
if set to 'true', the subsystem will look inside the token for `application-level` role mappings for a user. if set to 'false', the subsystem will look at the `realm-level` for `user-role` mappings. this is optional.
get the `elytron-oidc-client` `secure-server` `use-resource-role-mappings` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=use-resource-role-mappings)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `use-resource-role-mappings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `verify-token-audience`
if set to 'true', then during `bearer-only` authentication, the subsystem verifies if the token contains the client name defined as an audience. it is recommended to set the value to 'true' for improved security.
get the `elytron-oidc-client` `secure-server` `verify-token-audience` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>:read-attribute(name=verify-token-audience)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `verify-token-audience`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `secure-server` `redirect-rewrite-rule`
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/redirect-rewrite-rule=<redirect-rewrite-rule name>:read-resource()`
To get the list of all the `elytron-oidc-client` `secure-server` `redirect-rewrite-rule` use '*' for `<redirect-rewrite-rule name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `secure-server` `redirect-rewrite-rule`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `redirect-rewrite-rule` `replacement`
the replacement string in the rewrite rule for the redirect uri.
get the `elytron-oidc-client` `secure-server` `redirect-rewrite-rule` `replacement` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/redirect-rewrite-rule=<redirect-rewrite-rule name>:read-attribute(name=replacement)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `redirect-rewrite-rule` `replacement`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `secure-server` `credential`
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-resource()`
To get the list of all the `elytron-oidc-client` `secure-server` `credential` use '*' for `<credential name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `secure-server` `credential`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `algorithm`
the credential signature algorithm used by the `openid` provider.
get the `elytron-oidc-client` `secure-server` `credential` `algorithm` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-key-alias`
the client key alias when the credential provider is used.
get the `elytron-oidc-client` `secure-server` `credential` `client-key-alias` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=client-key-alias)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-key-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-key-password`
the password for the client key when the credential provider is used. this is required if '`client-keystore-file`' has been specified.
get the `elytron-oidc-client` `secure-server` `credential` `client-key-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=client-key-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-key-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-file`
the path to the client `keystore` when the credential provider is used. this is optional.
get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-file` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=client-keystore-file)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-password`
the password for the client `keystore` when the credential provider is used. this is required if '`client-keystore-file`' has been specified.
get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=client-keystore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-type`
the client `keystore` type when the credential provider is used.
get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-type` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=client-keystore-type)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `client-keystore-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `secret`
the client secret that was registered with the `openid` provider.
get the `elytron-oidc-client` `secure-server` `credential` `secret` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=secret)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `secret`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `token-timeout`
the amount of time after which the token expires and can no longer be used to authenticate requests.
get the `elytron-oidc-client` `secure-server` `credential` `token-timeout` attribute.
operation: `/subsystem=elytron-oidc-client/secure-server=<secure-server name>/credential=<credential name>:read-attribute(name=token-timeout)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-server` `credential` `token-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `secure-deployment`
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-resource()`
To get the list of all the `elytron-oidc-client` `secure-deployment` use '*' for `<secure-deployment name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `secure-deployment`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `adapter-state-cookie-path`
if set, this defines the path used in cookies set by the subsystem. this is useful when deploying an application in the root context path.
get the `elytron-oidc-client` `secure-deployment` `adapter-state-cookie-path` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=adapter-state-cookie-path)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `adapter-state-cookie-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `allow-any-hostname`
if set to 'true', `hostname` verification is skipped when communicating with the `openid` provider over `https`. this can be useful in testing environments. this should never be set to 'true' in production environments as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `secure-deployment` `allow-any-hostname` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=allow-any-hostname)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `allow-any-hostname`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `always-refresh-token`
if set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to the `openid` provider to obtain a new access token. this can result in a higher load on the `openid` provider and may impact the performance of the application.
get the `elytron-oidc-client` `secure-deployment` `always-refresh-token` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=always-refresh-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `always-refresh-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `auth-server-url`
the base `url` of the `keycloak` authorization server. this is `keycloak-specific`. it is recommended to use '`provider-url`' instead.
get the `elytron-oidc-client` `secure-deployment` `auth-server-url` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=auth-server-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `auth-server-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `autodetect-bearer-only`
whether to `auto-detect` soap or rest clients based on headers like '`x-requested-with`', '`soapaction`' or 'accept'. if set to 'true', the subsystem sends an `http` `401` status code to unauthenticated soap or rest clients instead of redirecting them to the `openid` provider login page. set the value to 'true' if your application serves both applications and web services.
get the `elytron-oidc-client` `secure-deployment` `autodetect-bearer-only` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=autodetect-bearer-only)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `autodetect-bearer-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `bearer-only`
enable `bearer-token` only authentication. set this to 'true' if your application serves only web services and does not authenticate users.
get the `elytron-oidc-client` `secure-deployment` `bearer-only` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=bearer-only)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `bearer-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-id`
the unique identifier for a client application registered in the `openid` provider.
get the `elytron-oidc-client` `secure-deployment` `client-id` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=client-id)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-id`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-key-password`
the password for the client key. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `secure-deployment` `client-key-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=client-key-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-key-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-keystore`
the path to the client `keystore` to use when communicating with the `openid` provider over `https`. this is optional.
get the `elytron-oidc-client` `secure-deployment` `client-keystore` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=client-keystore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-keystore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-keystore-password`
the password for the client `keystore`. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `secure-deployment` `client-keystore-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=client-keystore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `client-keystore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `confidential-port`
the confidential port used by the `openid` provider when communicating securely over `ssl/tls`.
get the `elytron-oidc-client` `secure-deployment` `confidential-port` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=confidential-port)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `confidential-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `connection-pool-size`
the connection pool size to use when communicating with the `openid` provider.
get the `elytron-oidc-client` `secure-deployment` `connection-pool-size` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=connection-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `connection-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `connection-timeout-millis`
the timeout for establishing a connection with the remote host in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `secure-deployment` `connection-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=connection-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `connection-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `connection-ttl-millis`
the amount of time in milliseconds for the connection to be kept alive. a value less than or equal to zero is interpreted as an infinite value.
get the `elytron-oidc-client` `secure-deployment` `connection-ttl-millis` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=connection-ttl-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `connection-ttl-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-allowed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-deployment` `cors-allowed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=cors-allowed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-allowed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-allowed-methods`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-methods`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-deployment` `cors-allowed-methods` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=cors-allowed-methods)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-allowed-methods`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-exposed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-expose-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-deployment` `cors-exposed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=cors-exposed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-exposed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-max-age`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-max-age`' header. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `secure-deployment` `cors-max-age` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=cors-max-age)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `cors-max-age`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential`
the credential used to communicate with the `openid` connect provider.
get the `elytron-oidc-client` `secure-deployment` `credential` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=credential)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `disable-trust-manager`
whether or not to make use of a trust manager when communicating with the `openid` provider over `https`. this is optional. this should be set to 'true' only during development and never in production as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `secure-deployment` `disable-trust-manager` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=disable-trust-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `disable-trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `enable-basic-auth`
enable basic authentication. this is not supported in the current release.
get the `elytron-oidc-client` `secure-deployment` `enable-basic-auth` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=enable-basic-auth)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `enable-basic-auth`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `enable-cors`
enable the `keycloak` `cross-origin` resource sharing (`cors`) support. this is optional. this is `keycloak-specific`.
get the `elytron-oidc-client` `secure-deployment` `enable-cors` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=enable-cors)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `enable-cors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `expose-token`
if set to 'true', an authenticated browser client can obtain the signed access token (through a `javascript` `http` invocation) via the `url` '`root/k_query_bearer_token`'. this is optional.
get the `elytron-oidc-client` `secure-deployment` `expose-token` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=expose-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `expose-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `ignore-oauth-query-parameter`
disable query parameter parsing for the '`access_token`'. users will not be able to authenticate if they only pass in an '`access_token`'.
get the `elytron-oidc-client` `secure-deployment` `ignore-oauth-query-parameter` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=ignore-oauth-query-parameter)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `ignore-oauth-query-parameter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `min-time-between-jwks-requests`
if the subsystem recognizes a token signed by an unknown public key, it will try to download a new public key from the server. the subsystem `won't` try to download a public key if it already tried last in less than '`min-time-between-jwks-requests`' seconds.
get the `elytron-oidc-client` `secure-deployment` `min-time-between-jwks-requests` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=min-time-between-jwks-requests)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `min-time-between-jwks-requests`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `principal-attribute`
indicates which value from the id token to use as the principal for the identity. the principal defaults to the value of the 'sub' if the token attribute is null.
get the `elytron-oidc-client` `secure-deployment` `principal-attribute` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=principal-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `principal-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `provider`
the `openid` connect provider to use for authentication.
get the `elytron-oidc-client` `secure-deployment` `provider` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=provider)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `provider`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `provider-url`
the `openid` provider `url`.
get the `elytron-oidc-client` `secure-deployment` `provider-url` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=provider-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `provider-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `proxy-url`
the `url` for the `http` proxy if one is used.
get the `elytron-oidc-client` `secure-deployment` `proxy-url` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=proxy-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `proxy-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `public-client`
if set to 'true', no client credentials are sent when communicating with the `openid` provider.
get the `elytron-oidc-client` `secure-deployment` `public-client` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=public-client)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `public-client`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `public-key-cache-ttl`
the maximum interval between two requests to retrieve new public keys in seconds. new public keys are downloaded when the subsystem recognizes a token signed by an unknown public key. even if the `token's` key is already known, new public keys are downloaded periodically as per the interval set here at least once.
get the `elytron-oidc-client` `secure-deployment` `public-key-cache-ttl` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=public-key-cache-ttl)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `public-key-cache-ttl`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `realm`
the `keycloak` realm to use for authentication.
get the `elytron-oidc-client` `secure-deployment` `realm` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=realm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `realm-public-key`
the public key of the `openid` provider in `pem` format. this is optional. it is not recommended to set it. if the public key is not set, the subsystem downloads the public key from the `openid` provider when needed. if the public key is set, the subsystem never downloads new keys from the `openid` provider, breaking the subsystem when the `openid` provider rotates its keys.
get the `elytron-oidc-client` `secure-deployment` `realm-public-key` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=realm-public-key)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `realm-public-key`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule`
the rewrite rule for the redirect uri. the rewrite rule is an object notation, where the key is a regular expression with which the redirect uri is matched and the value is the replacement string.
get the `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=redirect-rewrite-rule)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `register-node-at-startup`
if set to 'true', the subsystem sends a registration request to the `openid` provider. this attribute is useful only when your application is clustered.
get the `elytron-oidc-client` `secure-deployment` `register-node-at-startup` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=register-node-at-startup)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `register-node-at-startup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `register-node-period`
if '`register-node-at-startup`' is set to 'true', this specifies the frequency (in seconds) at which the node should be `re-registered`.
get the `elytron-oidc-client` `secure-deployment` `register-node-period` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=register-node-period)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `register-node-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `resource`
the unique, legacy identifier for a client application registered in the `openid` provider. it is recommended to use the '`client-id`'.
get the `elytron-oidc-client` `secure-deployment` `resource` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=resource)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `resource`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `socket-timeout-millis`
the timeout for the socket waiting for data after establishing the connection in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `secure-deployment` `socket-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=socket-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `socket-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `ssl-required`
whether the communication with the `openid` provider should be over `https`. valid values are: 'all' - to always require `https`, 'external' - to only require `https` for external requests, 'none' - if `https` is not required. this should be set to 'all' in production environments.
get the `elytron-oidc-client` `secure-deployment` `ssl-required` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=ssl-required)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `ssl-required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `token-minimum-time-to-live`
the subsystem will refresh the token if it will expire within the duration specified in '`token-minimum-time-to-live`' seconds. this value should never exceed the access token lifespan. if the value is set to `0` seconds, the subsystem will refresh the token only if the token has expired.
get the `elytron-oidc-client` `secure-deployment` `token-minimum-time-to-live` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=token-minimum-time-to-live)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `token-minimum-time-to-live`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `token-signature-algorithm`
the token signature algorithm used by the `openid` provider.
get the `elytron-oidc-client` `secure-deployment` `token-signature-algorithm` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=token-signature-algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `token-signature-algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `token-store`
defines whether to store account information in an `http` session or in a cookie.
get the `elytron-oidc-client` `secure-deployment` `token-store` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=token-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `token-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `truststore`
the path to the `truststore` to use when communicating with `keycloak` over `https`. prefix the path with '`classpath`:' to obtain the `truststore` from the `deployment's` `classpath`.
get the `elytron-oidc-client` `secure-deployment` `truststore` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=truststore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `truststore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `truststore-password`
the password for the `truststore`.
get the `elytron-oidc-client` `secure-deployment` `truststore-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=truststore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `truststore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `turn-off-change-session-id-on-login`
the session id is changed by default on a successful login. set this to 'true' if you want to turn this off.
get the `elytron-oidc-client` `secure-deployment` `turn-off-change-session-id-on-login` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=turn-off-change-session-id-on-login)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `turn-off-change-session-id-on-login`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `use-resource-role-mappings`
if set to 'true', the subsystem will look inside the token for `application-level` role mappings for a user. if set to 'false', the subsystem will look at the `realm-level` for `user-role` mappings. this is optional.
get the `elytron-oidc-client` `secure-deployment` `use-resource-role-mappings` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=use-resource-role-mappings)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `use-resource-role-mappings`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `verify-token-audience`
if set to 'true', then during `bearer-only` authentication, the subsystem verifies if the token contains the client name defined as an audience. it is recommended to set the value to 'true' for improved security.
get the `elytron-oidc-client` `secure-deployment` `verify-token-audience` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>:read-attribute(name=verify-token-audience)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `verify-token-audience`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule`
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/redirect-rewrite-rule=<redirect-rewrite-rule name>:read-resource()`
To get the list of all the `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule` use '*' for `<redirect-rewrite-rule name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule` `replacement`
the replacement string in the rewrite rule for the redirect uri.
get the `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule` `replacement` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/redirect-rewrite-rule=<redirect-rewrite-rule name>:read-attribute(name=replacement)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `redirect-rewrite-rule` `replacement`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `secure-deployment` `credential`
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-resource()`
To get the list of all the `elytron-oidc-client` `secure-deployment` `credential` use '*' for `<credential name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `secure-deployment` `credential`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `algorithm`
the credential signature algorithm used by the `openid` provider.
get the `elytron-oidc-client` `secure-deployment` `credential` `algorithm` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-key-alias`
the client key alias when the credential provider is used.
get the `elytron-oidc-client` `secure-deployment` `credential` `client-key-alias` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=client-key-alias)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-key-alias`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-key-password`
the password for the client key when the credential provider is used. this is required if '`client-keystore-file`' has been specified.
get the `elytron-oidc-client` `secure-deployment` `credential` `client-key-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=client-key-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-key-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-file`
the path to the client `keystore` when the credential provider is used. this is optional.
get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-file` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=client-keystore-file)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-file`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-password`
the password for the client `keystore` when the credential provider is used. this is required if '`client-keystore-file`' has been specified.
get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-password` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=client-keystore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-type`
the client `keystore` type when the credential provider is used.
get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-type` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=client-keystore-type)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `client-keystore-type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `secret`
the client secret that was registered with the `openid` provider.
get the `elytron-oidc-client` `secure-deployment` `credential` `secret` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=secret)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `secret`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `token-timeout`
the amount of time after which the token expires and can no longer be used to authenticate requests.
get the `elytron-oidc-client` `secure-deployment` `credential` `token-timeout` attribute.
operation: `/subsystem=elytron-oidc-client/secure-deployment=<secure-deployment name>/credential=<credential name>:read-attribute(name=token-timeout)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `secure-deployment` `credential` `token-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `elytron-oidc-client` `realm`
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-resource()`
To get the list of all the `elytron-oidc-client` `realm` use '*' for `<realm name>`." metadata = {parent=, title=syntax of the operation to get a `elytron-oidc-client` `realm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `allow-any-hostname`
if set to 'true', `hostname` verification will be skipped when communicating with `keycloak` over `https`. this can be useful in testing environments. this should never be set to 'true' in production environments as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `realm` `allow-any-hostname` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=allow-any-hostname)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `allow-any-hostname`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `always-refresh-token`
if set to 'true', the subsystem refreshes the token every time your application receives a web request, and a new request is sent to `keycloak` to obtain a new access token. this can result in a higher load on the `keycloak` and may impact the performance of the application.
get the `elytron-oidc-client` `realm` `always-refresh-token` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=always-refresh-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `always-refresh-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `auth-server-url`
the base `url` of the `keycloak` authorization server. it is recommended to use the '`provider-url`' instead.
get the `elytron-oidc-client` `realm` `auth-server-url` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=auth-server-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `auth-server-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `autodetect-bearer-only`
whether to `auto-detect` soap or rest clients based on headers like '`x-requested-with`', '`soapaction`' or 'accept'. if set to 'true', the subsystem sends an `http` `401` status code to unauthenticated soap or rest clients instead of redirecting them to the `keycloak` login page. set the value to 'true' if your application serves both applications and web services.
get the `elytron-oidc-client` `realm` `autodetect-bearer-only` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=autodetect-bearer-only)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `autodetect-bearer-only`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `client-key-password`
the password for the client key. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `realm` `client-key-password` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=client-key-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `client-key-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `client-keystore`
the path to the client `keystore` to use when communicating with `keycloak` over `https`. this is optional.
get the `elytron-oidc-client` `realm` `client-keystore` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=client-keystore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `client-keystore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `client-keystore-password`
the password for the client `keystore`. this is required if '`client-keystore`' has been specified.
get the `elytron-oidc-client` `realm` `client-keystore-password` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=client-keystore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `client-keystore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `confidential-port`
the confidential port used by `keycloak` when communicating securely over `ssl/tls`.
get the `elytron-oidc-client` `realm` `confidential-port` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=confidential-port)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `confidential-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `connection-pool-size`
the connection pool size to use when communicating with `keycloak`.
get the `elytron-oidc-client` `realm` `connection-pool-size` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=connection-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `connection-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `connection-timeout-millis`
the timeout for establishing a connection with the remote host in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `realm` `connection-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=connection-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `connection-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `connection-ttl-millis`
the amount of time in milliseconds for the connection to be kept alive. a value less than or equal to zero is interpreted as an infinite value.
get the `elytron-oidc-client` `realm` `connection-ttl-millis` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=connection-ttl-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `connection-ttl-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `cors-allowed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `realm` `cors-allowed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=cors-allowed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `cors-allowed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `cors-allowed-methods`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-allow-methods`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `realm` `cors-allowed-methods` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=cors-allowed-methods)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `cors-allowed-methods`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `cors-exposed-headers`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-expose-headers`' header. this should be a `comma-separated` string. this is optional. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `realm` `cors-exposed-headers` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=cors-exposed-headers)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `cors-exposed-headers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `cors-max-age`
if `cross-origin` resource sharing (`cors`) is enabled, this sets the value of the '`access-control-max-age`' header. if not set, this header is not returned in `cors` responses.
get the `elytron-oidc-client` `realm` `cors-max-age` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=cors-max-age)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `cors-max-age`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `disable-trust-manager`
whether or not to make use of a trust manager when communicating with `keycloak` over `https`. this is optional. this should be set to 'true' only during development and never in production as it disables verification of `ssl` certificates.
get the `elytron-oidc-client` `realm` `disable-trust-manager` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=disable-trust-manager)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `disable-trust-manager`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `enable-cors`
enable the `keycloak` `cross-origin` resource sharing (`cors`) support. this is optional.
get the `elytron-oidc-client` `realm` `enable-cors` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=enable-cors)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `enable-cors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `expose-token`
if set to 'true', an authenticated browser client can obtain the signed access token (through a `javascript` `http` invocation) via the `url` '`root/k_query_bearer_token`'. this is optional.
get the `elytron-oidc-client` `realm` `expose-token` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=expose-token)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `expose-token`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `ignore-oauth-query-parameter`
disable query parameter parsing for the '`access_token`'. users will not be able to authenticate if they only pass in an '`access_token`'.
get the `elytron-oidc-client` `realm` `ignore-oauth-query-parameter` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=ignore-oauth-query-parameter)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `ignore-oauth-query-parameter`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `principal-attribute`
indicates which value from the id token to use as the principal for the identity. the principal defaults to the value of the 'sub' if the token attribute is null.
get the `elytron-oidc-client` `realm` `principal-attribute` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=principal-attribute)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `principal-attribute`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `provider-url`
the `openid` provider `url`.
get the `elytron-oidc-client` `realm` `provider-url` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=provider-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `provider-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `proxy-url`
the `url` for the `http` proxy if one is used.
get the `elytron-oidc-client` `realm` `proxy-url` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=proxy-url)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `proxy-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `realm-public-key`
the public key of the `keycloak` realm in `pem` format. this is optional. it is not recommended to set it. if the public key is not set, the subsystem downloads the public key from `keycloak` when needed. if the public key is set, the subsystem never downloads new keys from `keycloak`, breaking the subsystem when `keycloak` rotates its keys.
get the `elytron-oidc-client` `realm` `realm-public-key` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=realm-public-key)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `realm-public-key`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `register-node-at-startup`
if set to 'true', the subsystem sends a registration request to `keycloak`. this attribute is useful only when your application is clustered.
get the `elytron-oidc-client` `realm` `register-node-at-startup` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=register-node-at-startup)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `register-node-at-startup`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `register-node-period`
if '`register-node-at-startup`' is set to 'true', this specifies the frequency (in seconds) at which the node should be `re-registered`.
get the `elytron-oidc-client` `realm` `register-node-period` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=register-node-period)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `register-node-period`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `socket-timeout-millis`
the timeout for the socket waiting for data after establishing the connection in milliseconds. a timeout value of zero is interpreted as an infinite timeout, and a negative value is interpreted as undefined.
get the `elytron-oidc-client` `realm` `socket-timeout-millis` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=socket-timeout-millis)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `socket-timeout-millis`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `ssl-required`
whether the communication with `keycloak` should be over `https`. valid values are: 'all' - to always require `https`, 'external' - to only require `https` for external requests, 'none' - if `https` is not required. this should be set to 'all' in production environments.
get the `elytron-oidc-client` `realm` `ssl-required` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=ssl-required)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `ssl-required`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `token-signature-algorithm`
the token signature algorithm used by `keycloak`.
get the `elytron-oidc-client` `realm` `token-signature-algorithm` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=token-signature-algorithm)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `token-signature-algorithm`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `token-store`
defines whether to store account information in an `http` session or in a cookie.
get the `elytron-oidc-client` `realm` `token-store` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=token-store)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `token-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `truststore`
the path to the `truststore` to use when communicating with `keycloak` over `https`. prefix the path with '`classpath`:' to obtain the `truststore` from the `deployment's` `classpath`.
get the `elytron-oidc-client` `realm` `truststore` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=truststore)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `truststore`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `truststore-password`
the password for the `truststore`.
get the `elytron-oidc-client` `realm` `truststore-password` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=truststore-password)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `truststore-password`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `elytron-oidc-client` `realm` `verify-token-audience`
if set to 'true', then during `bearer-only` authentication, the subsystem verifies if the token contains the client name defined as an audience. it is recommended to set to 'true' for improved security.
get the `elytron-oidc-client` `realm` `verify-token-audience` attribute.
operation: `/subsystem=elytron-oidc-client/realm=<realm name>:read-attribute(name=verify-token-audience)`" metadata = {parent=, title=syntax of the operation to get the `elytron-oidc-client` `realm` `verify-token-audience`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `default-worker`
specifies the default `i/o` worker
get the `io` `default-worker` attribute.
operation: `/subsystem=io:read-attribute(name=default-worker)`" metadata = {parent=, title=syntax of the operation to get the `io` `default-worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `io` `worker`
operation: `/subsystem=io/worker=<worker name>:read-resource()`
To get the list of all the `io` `worker` use '*' for `<worker name>`." metadata = {parent=, title=syntax of the operation to get a `io` `worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `busy-task-thread-count`
an estimate of busy threads in the task worker thread pool
get the `io` `worker` `busy-task-thread-count` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=busy-task-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `busy-task-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `core-pool-size`
minimum number of threads to keep in the underlying thread pool even if they are idle. threads over this limit will be terminated over time specified by `task-keepalive` attribute.
get the `io` `worker` `core-pool-size` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=core-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `core-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `io-thread-count`
`i/o` thread count
get the `io` `worker` `io-thread-count` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=io-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `io-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `io-threads`
specify the number of `i/o` threads to create for the worker.  if not specified, a default will be chosen, which is calculated by `cpucount` * `2`
get the `io` `worker` `io-threads` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=io-threads)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `io-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `max-pool-size`
the maximum number of threads allowed in the worker task thread pool. depending on the pool implementation, when this limit is reached tasks which cannot be queued may be rejected. this can be configured using the '`task-max-threads`' attribute; see the description of that attribute for details on how this value is determined.
get the `io` `worker` `max-pool-size` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `queue-size`
an estimate of the number of tasks in the worker queue.
get the `io` `worker` `queue-size` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `shutdown-requested`
true is shutdown of the pool was requested
get the `io` `worker` `shutdown-requested` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=shutdown-requested)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `shutdown-requested`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `stack-size`
the stack size (in bytes) to attempt to use for worker threads.
get the `io` `worker` `stack-size` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=stack-size)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `stack-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `task-core-threads`
specify the starting number of threads for the worker task thread pool.
get the `io` `worker` `task-core-threads` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=task-core-threads)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `task-core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `task-keepalive`
specify the number of milliseconds to keep `non-core` task threads alive.
get the `io` `worker` `task-keepalive` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=task-keepalive)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `task-keepalive`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `task-max-threads`
specify the maximum number of threads for the worker task thread `pool.if` not set, a default value used which is calculated by the formula `cpucount` * `16,as` long as the `maxfiledescriptorcount` `jmx` property allows that number; otherwise the calculation takes that max into account and adjusts accordingly.
get the `io` `worker` `task-max-threads` attribute.
operation: `/subsystem=io/worker=<worker name>:read-attribute(name=task-max-threads)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `task-max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `io` `worker` `outbound-bind-address`
operation: `/subsystem=io/worker=<worker name>/outbound-bind-address=<outbound-bind-address name>:read-resource()`
To get the list of all the `io` `worker` `outbound-bind-address` use '*' for `<outbound-bind-address name>`." metadata = {parent=, title=syntax of the operation to get a `io` `worker` `outbound-bind-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `outbound-bind-address` `bind-address`
the address to bind to when the destination address matches
get the `io` `worker` `outbound-bind-address` `bind-address` attribute.
operation: `/subsystem=io/worker=<worker name>/outbound-bind-address=<outbound-bind-address name>:read-attribute(name=bind-address)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `outbound-bind-address` `bind-address`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `outbound-bind-address` `bind-port`
the port number to bind to when the destination address matches
get the `io` `worker` `outbound-bind-address` `bind-port` attribute.
operation: `/subsystem=io/worker=<worker name>/outbound-bind-address=<outbound-bind-address name>:read-attribute(name=bind-port)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `outbound-bind-address` `bind-port`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `outbound-bind-address` `match`
the destination address range to match
get the `io` `worker` `outbound-bind-address` `match` attribute.
operation: `/subsystem=io/worker=<worker name>/outbound-bind-address=<outbound-bind-address name>:read-attribute(name=match)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `outbound-bind-address` `match`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `io` `worker` `server`
operation: `/subsystem=io/worker=<worker name>/server=<server name>:read-resource()`
To get the list of all the `io` `worker` `server` use '*' for `<server name>`." metadata = {parent=, title=syntax of the operation to get a `io` `worker` `server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `server` `connection-count`
estimate of the current connection count
get the `io` `worker` `server` `connection-count` attribute.
operation: `/subsystem=io/worker=<worker name>/server=<server name>:read-attribute(name=connection-count)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `server` `connection-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `server` `connection-limit-high-water-mark`
if the connection count hits this number, no new connections will be accepted until the count drops below the `low-water` mark.
get the `io` `worker` `server` `connection-limit-high-water-mark` attribute.
operation: `/subsystem=io/worker=<worker name>/server=<server name>:read-attribute(name=connection-limit-high-water-mark)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `server` `connection-limit-high-water-mark`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `worker` `server` `connection-limit-low-water-mark`
if the connection count has previously hit the high water mark, once it drops back down below this count, connections will be accepted again.
get the `io` `worker` `server` `connection-limit-low-water-mark` attribute.
operation: `/subsystem=io/worker=<worker name>/server=<server name>:read-attribute(name=connection-limit-low-water-mark)`" metadata = {parent=, title=syntax of the operation to get the `io` `worker` `server` `connection-limit-low-water-mark`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `io` `buffer-pool`
operation: `/subsystem=io/buffer-pool=<buffer-pool name>:read-resource()`
To get the list of all the `io` `buffer-pool` use '*' for `<buffer-pool name>`." metadata = {parent=, title=syntax of the operation to get a `io` `buffer-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `buffer-pool` `buffer-size`
the size of each buffer slice in bytes, if not set optimal value is calculated based on available ram resources in your system.
get the `io` `buffer-pool` `buffer-size` attribute.
operation: `/subsystem=io/buffer-pool=<buffer-pool name>:read-attribute(name=buffer-size)`" metadata = {parent=, title=syntax of the operation to get the `io` `buffer-pool` `buffer-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `buffer-pool` `buffers-per-slice`
how many buffers per slice, if not set optimal value is calculated based on available ram resources in your system.
get the `io` `buffer-pool` `buffers-per-slice` attribute.
operation: `/subsystem=io/buffer-pool=<buffer-pool name>:read-attribute(name=buffers-per-slice)`" metadata = {parent=, title=syntax of the operation to get the `io` `buffer-pool` `buffers-per-slice`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `io` `buffer-pool` `direct-buffers`
does the buffer pool use direct buffers, some platforms `don't` support direct buffers
get the `io` `buffer-pool` `direct-buffers` attribute.
operation: `/subsystem=io/buffer-pool=<buffer-pool name>:read-attribute(name=direct-buffers)`" metadata = {parent=, title=syntax of the operation to get the `io` `buffer-pool` `direct-buffers`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `allow-ejb-name-regex`
if this is true then regular expressions can be used in interceptor bindings to allow interceptors to be mapped to all beans that match the regular expression
get the `ejb3` `allow-ejb-name-regex` attribute.
operation: `/subsystem=ejb3:read-attribute(name=allow-ejb-name-regex)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `allow-ejb-name-regex`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `client-interceptors`
client interceptor definitions.
get the `ejb3` `client-interceptors` attribute.
operation: `/subsystem=ejb3:read-attribute(name=client-interceptors)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `client-interceptors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-clustered-sfsb-cache`
name of the default stateful bean cache, which will be applicable to all clustered stateful jakarta enterprise beans, unless overridden at the deployment or bean level
get the `ejb3` `default-clustered-sfsb-cache` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-clustered-sfsb-cache)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-clustered-sfsb-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-distinct-name`
the default distinct name that is applied to every jakarta enterprise beans deployed on this server
get the `ejb3` `default-distinct-name` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-distinct-name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-distinct-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-entity-bean-instance-pool`
name of the default entity bean instance pool, which will be applicable to all entity beans, unless overridden at the deployment or bean level
get the `ejb3` `default-entity-bean-instance-pool` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-entity-bean-instance-pool)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-entity-bean-instance-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-entity-bean-optimistic-locking`
if set to true entity beans will use optimistic locking by default
get the `ejb3` `default-entity-bean-optimistic-locking` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-entity-bean-optimistic-locking)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-entity-bean-optimistic-locking`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-mdb-instance-pool`
name of the default `mdb` instance pool, which will be applicable to all `mdbs`, unless overridden at the deployment or bean level
get the `ejb3` `default-mdb-instance-pool` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-mdb-instance-pool)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-mdb-instance-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-missing-method-permissions-deny-access`
if this is set to true then methods on jakarta enterprise beans with a security domain specified or with other methods with security `metadata` will have an implicit @`denyall` unless other security `metadata` is present
get the `ejb3` `default-missing-method-permissions-deny-access` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-missing-method-permissions-deny-access)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-missing-method-permissions-deny-access`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-resource-adapter-name`
name of the default resource adapter name that will be used by `mdbs`, unless overridden at the deployment or bean level
get the `ejb3` `default-resource-adapter-name` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-resource-adapter-name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-resource-adapter-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-security-domain`
the default security domain that will be used for jakarta enterprise beans if the bean `doesn't` explicitly specify one
get the `ejb3` `default-security-domain` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-security-domain)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-sfsb-cache`
name of the default stateful bean cache, which will be applicable to all stateful jakarta enterprise beans, unless overridden at the deployment or bean level
get the `ejb3` `default-sfsb-cache` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-sfsb-cache)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-sfsb-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-sfsb-passivation-disabled-cache`
name of the default stateful bean cache, which will be applicable to all stateful jakarta enterprise beans that have passivation disabled. each deployment or jakarta enterprise beans can optionally override this cache name.
get the `ejb3` `default-sfsb-passivation-disabled-cache` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-sfsb-passivation-disabled-cache)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-sfsb-passivation-disabled-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-singleton-bean-access-timeout`
the default access timeout for singleton beans
get the `ejb3` `default-singleton-bean-access-timeout` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-singleton-bean-access-timeout)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-singleton-bean-access-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-slsb-instance-pool`
name of the default stateless bean instance pool, which will be applicable to all stateless jakarta enterprise beans, unless overridden at the deployment or bean level
get the `ejb3` `default-slsb-instance-pool` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-slsb-instance-pool)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-slsb-instance-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-stateful-bean-access-timeout`
the default access timeout for stateful beans
get the `ejb3` `default-stateful-bean-access-timeout` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-stateful-bean-access-timeout)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-stateful-bean-access-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `default-stateful-bean-session-timeout`
the default session timeout for stateful beans. modification to this attribute takes effect immediately for subsequent deployments; for jakarta enterprise beans already deployed, redeploying is needed to use the new value.
get the `ejb3` `default-stateful-bean-session-timeout` attribute.
operation: `/subsystem=ejb3:read-attribute(name=default-stateful-bean-session-timeout)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `default-stateful-bean-session-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `disable-default-ejb-permissions`
this deprecated attribute has no effect and will be removed in a future release; it may never be set to a "false" value
get the `ejb3` `disable-default-ejb-permissions` attribute.
operation: `/subsystem=ejb3:read-attribute(name=disable-default-ejb-permissions)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `disable-default-ejb-permissions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `enable-graceful-txn-shutdown`
enabling `txn` graceful shutdown will make the server wait for active remote jakarta enterprise `beans-related` transactions to complete before suspending. for that reason, if the server is running on a cluster, the suspending cluster node may receive jakarta enterprise beans requests until all active remote transactions are complete. to avoid this behavior, omit this tag. this attribute has no effect on local jakarta enterprise `beans-related` transactions.
get the `ejb3` `enable-graceful-txn-shutdown` attribute.
operation: `/subsystem=ejb3:read-attribute(name=enable-graceful-txn-shutdown)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `enable-graceful-txn-shutdown`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `enable-statistics`
if set to true, enable the collection of invocation statistics. deprecated in favour of "`statistics-enabled`"
get the `ejb3` `enable-statistics` attribute.
operation: `/subsystem=ejb3:read-attribute(name=enable-statistics)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `enable-statistics`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `in-vm-remote-interface-invocation-pass-by-value`
if set to false, the parameters to invocations on the remote interface of a jakarta enterprise beans, will be passed by reference. else, the parameters will be passed by value.
get the `ejb3` `in-vm-remote-interface-invocation-pass-by-value` attribute.
operation: `/subsystem=ejb3:read-attribute(name=in-vm-remote-interface-invocation-pass-by-value)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `in-vm-remote-interface-invocation-pass-by-value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `log-system-exceptions`
if this is true then all jakarta enterprise beans system (not application) exceptions will be logged. the jakarta enterprise beans spec mandates this behaviour, however, it is not recommended as it will often result in exceptions being logged twice (once by the jakarta enterprise beans and once by the calling code)
get the `ejb3` `log-system-exceptions` attribute.
operation: `/subsystem=ejb3:read-attribute(name=log-system-exceptions)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `log-system-exceptions`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `server-interceptors`
server interceptor definitions.
get the `ejb3` `server-interceptors` attribute.
operation: `/subsystem=ejb3:read-attribute(name=server-interceptors)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `server-interceptors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `statistics-enabled`
if set to true, enable the collection of invocation statistics.
get the `ejb3` `statistics-enabled` attribute.
operation: `/subsystem=ejb3:read-attribute(name=statistics-enabled)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `statistics-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `remoting-profile`
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>:read-resource()`
To get the list of all the `ejb3` `remoting-profile` use '*' for `<remoting-profile name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `remoting-profile`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `exclude-local-receiver`
if set no local receiver is used in this profile
get the `ejb3` `remoting-profile` `exclude-local-receiver` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>:read-attribute(name=exclude-local-receiver)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `exclude-local-receiver`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `local-receiver-pass-by-value`
if set local receiver will pass `ejb` beans by value
get the `ejb3` `remoting-profile` `local-receiver-pass-by-value` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>:read-attribute(name=local-receiver-pass-by-value)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `local-receiver-pass-by-value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `static-ejb-discovery`
describes static discovery `config` for jakarta enterprise `beans's`
get the `ejb3` `remoting-profile` `static-ejb-discovery` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>:read-attribute(name=static-ejb-discovery)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `static-ejb-discovery`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `remoting-profile` `remoting-ejb-receiver`
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remoting-ejb-receiver=<remoting-ejb-receiver name>:read-resource()`
To get the list of all the `ejb3` `remoting-profile` `remoting-ejb-receiver` use '*' for `<remoting-ejb-receiver name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `remoting-profile` `remoting-ejb-receiver`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `connect-timeout`
`remoting` `ejb` receiver connect timeout
get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `connect-timeout` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remoting-ejb-receiver=<remoting-ejb-receiver name>:read-attribute(name=connect-timeout)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `connect-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `outbound-connection-ref`
name of outbound connection that will be used by the `ejb` receiver
get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `outbound-connection-ref` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remoting-ejb-receiver=<remoting-ejb-receiver name>:read-attribute(name=outbound-connection-ref)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `outbound-connection-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options`
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remoting-ejb-receiver=<remoting-ejb-receiver name>/channel-creation-options=<channel-creation-options name>:read-resource()`
To get the list of all the `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options` use '*' for `<channel-creation-options name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options` `type`
the type of the channel creation option
get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options` `type` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remoting-ejb-receiver=<remoting-ejb-receiver name>/channel-creation-options=<channel-creation-options name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options` `value`
the value for the jakarta enterprise beans remote channel creation option
get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options` `value` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remoting-ejb-receiver=<remoting-ejb-receiver name>/channel-creation-options=<channel-creation-options name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `remoting-ejb-receiver` `channel-creation-options` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `remoting-profile` `remote-http-connection`
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remote-http-connection=<remote-http-connection name>:read-resource()`
To get the list of all the `ejb3` `remoting-profile` `remote-http-connection` use '*' for `<remote-http-connection name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `remoting-profile` `remote-http-connection`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `remoting-profile` `remote-http-connection` `uri`
remote `http` connection uri
get the `ejb3` `remoting-profile` `remote-http-connection` `uri` attribute.
operation: `/subsystem=ejb3/remoting-profile=<remoting-profile name>/remote-http-connection=<remote-http-connection name>:read-attribute(name=uri)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `remoting-profile` `remote-http-connection` `uri`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `mdb-delivery-group`
operation: `/subsystem=ejb3/mdb-delivery-group=<mdb-delivery-group name>:read-resource()`
To get the list of all the `ejb3` `mdb-delivery-group` use '*' for `<mdb-delivery-group name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `mdb-delivery-group`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `mdb-delivery-group` `active`
indicates if delivery for all `mdbs` belonging to this group is active
get the `ejb3` `mdb-delivery-group` `active` attribute.
operation: `/subsystem=ejb3/mdb-delivery-group=<mdb-delivery-group name>:read-attribute(name=active)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `mdb-delivery-group` `active`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `application-security-domain`
operation: `/subsystem=ejb3/application-security-domain=<application-security-domain name>:read-resource()`
To get the list of all the `ejb3` `application-security-domain` use '*' for `<application-security-domain name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `application-security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `application-security-domain` `enable-jacc`
enable authorization using jakarta authorization
get the `ejb3` `application-security-domain` `enable-jacc` attribute.
operation: `/subsystem=ejb3/application-security-domain=<application-security-domain name>:read-attribute(name=enable-jacc)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `application-security-domain` `enable-jacc`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `application-security-domain` `legacy-compliant-principal-propagation`
option to switch between legacy compliant principal propagation or elytron principal propagation
get the `ejb3` `application-security-domain` `legacy-compliant-principal-propagation` attribute.
operation: `/subsystem=ejb3/application-security-domain=<application-security-domain name>:read-attribute(name=legacy-compliant-principal-propagation)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `application-security-domain` `legacy-compliant-principal-propagation`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `application-security-domain` `referencing-deployments`
the deployments currently referencing this mapping
get the `ejb3` `application-security-domain` `referencing-deployments` attribute.
operation: `/subsystem=ejb3/application-security-domain=<application-security-domain name>:read-attribute(name=referencing-deployments)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `application-security-domain` `referencing-deployments`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `application-security-domain` `security-domain`
the elytron security domain to be used by deployments that reference the mapped security domain
get the `ejb3` `application-security-domain` `security-domain` attribute.
operation: `/subsystem=ejb3/application-security-domain=<application-security-domain name>:read-attribute(name=security-domain)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `application-security-domain` `security-domain`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `thread-pool`
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-resource()`
To get the list of all the `ejb3` `thread-pool` use '*' for `<thread-pool name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `thread-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `active-count`
the approximate number of threads that are actively executing tasks.
get the `ejb3` `thread-pool` `active-count` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=active-count)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `active-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `completed-task-count`
the approximate total number of tasks that have completed execution.
get the `ejb3` `thread-pool` `completed-task-count` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=completed-task-count)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `completed-task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `core-threads`
the core thread pool size which is smaller than the maximum pool size. if undefined, the core thread pool size is the same as the maximum thread pool size.
get the `ejb3` `thread-pool` `core-threads` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=core-threads)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `core-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `current-thread-count`
the current number of threads in the pool.
get the `ejb3` `thread-pool` `current-thread-count` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=current-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `current-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `keepalive-time`
used to specify the amount of time that pool threads should be kept running when idle; if not specified, threads will run until the executor is shut down.
get the `ejb3` `thread-pool` `keepalive-time` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=keepalive-time)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `keepalive-time`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `largest-thread-count`
the largest number of threads that have ever simultaneously been in the pool.
get the `ejb3` `thread-pool` `largest-thread-count` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=largest-thread-count)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `largest-thread-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `max-threads`
the maximum thread pool size.
get the `ejb3` `thread-pool` `max-threads` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=max-threads)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `max-threads`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `name`
the name of the thread pool.
get the `ejb3` `thread-pool` `name` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `queue-size`
the queue size.
get the `ejb3` `thread-pool` `queue-size` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=queue-size)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `queue-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `rejected-count`
the number of tasks that have been rejected.
get the `ejb3` `thread-pool` `rejected-count` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=rejected-count)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `rejected-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `task-count`
the approximate total number of tasks that have ever been scheduled for execution.
get the `ejb3` `thread-pool` `task-count` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=task-count)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `task-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `thread-pool` `thread-factory`
specifies the name of a specific thread factory to use to create worker threads. if not defined an appropriate default thread factory will be used.
get the `ejb3` `thread-pool` `thread-factory` attribute.
operation: `/subsystem=ejb3/thread-pool=<thread-pool name>:read-attribute(name=thread-factory)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `thread-pool` `thread-factory`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `remote` `cluster`
the name of the clustered cache container which will be used to `store/access` the `client-mappings` of the jakarta enterprise beans `remoting` `connector's` `socket-binding` on each node, in the cluster
get the `ejb3` `service` `remote` `cluster` attribute.
operation: `/subsystem=ejb3/service=remote:read-attribute(name=cluster)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `remote` `cluster`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `remote` `connector-ref`
the name of the connector on which the enterprise beans `3` `remoting` channel is registered.
get the `ejb3` `service` `remote` `connector-ref` attribute.
operation: `/subsystem=ejb3/service=remote:read-attribute(name=connector-ref)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `remote` `connector-ref`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `remote` `connectors`
a list of names of connectors on which the enterprise beans `3` invocations are received.
get the `ejb3` `service` `remote` `connectors` attribute.
operation: `/subsystem=ejb3/service=remote:read-attribute(name=connectors)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `remote` `connectors`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `remote` `execute-in-worker`
if this is true the jakarta enterprise beans request will be executed in the io subsystems worker, otherwise it will dispatch to the jakarta enterprise beans thread pool
get the `ejb3` `service` `remote` `execute-in-worker` attribute.
operation: `/subsystem=ejb3/service=remote:read-attribute(name=execute-in-worker)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `remote` `execute-in-worker`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `remote` `thread-pool-name`
the name of the thread pool that handles remote invocations
get the `ejb3` `service` `remote` `thread-pool-name` attribute.
operation: `/subsystem=ejb3/service=remote:read-attribute(name=thread-pool-name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `remote` `thread-pool-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `service` `remote` `channel-creation-options`
operation: `/subsystem=ejb3/service=remote/channel-creation-options=<channel-creation-options name>:read-resource()`
To get the list of all the `ejb3` `service` `remote` `channel-creation-options` use '*' for `<channel-creation-options name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `service` `remote` `channel-creation-options`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `remote` `channel-creation-options` `type`
the type of the channel creation option
get the `ejb3` `service` `remote` `channel-creation-options` `type` attribute.
operation: `/subsystem=ejb3/service=remote/channel-creation-options=<channel-creation-options name>:read-attribute(name=type)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `remote` `channel-creation-options` `type`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `remote` `channel-creation-options` `value`
the value for the jakarta enterprise beans remote channel creation option
get the `ejb3` `service` `remote` `channel-creation-options` `value` attribute.
operation: `/subsystem=ejb3/service=remote/channel-creation-options=<channel-creation-options name>:read-attribute(name=value)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `remote` `channel-creation-options` `value`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `iiop` `enable-by-default`
if this is true jakarta enterprise `beans's` will be exposed over `iiop` by default, otherwise it needs to be explicitly enabled in the deployment descriptor
get the `ejb3` `service` `iiop` `enable-by-default` attribute.
operation: `/subsystem=ejb3/service=iiop:read-attribute(name=enable-by-default)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `iiop` `enable-by-default`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `iiop` `use-qualified-name`
if true jakarta enterprise beans names will be bound into the naming service with the application and module name prepended to the name (`e.g`. `myapp/mymodule/myejb`)
get the `ejb3` `service` `iiop` `use-qualified-name` attribute.
operation: `/subsystem=ejb3/service=iiop:read-attribute(name=use-qualified-name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `iiop` `use-qualified-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `default-data-store`
the default data store used for persistent timers
get the `ejb3` `service` `timer-service` `default-data-store` attribute.
operation: `/subsystem=ejb3/service=timer-service:read-attribute(name=default-data-store)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `default-data-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `default-persistent-timer-management`
the default timer management to use for persistent timers.
get the `ejb3` `service` `timer-service` `default-persistent-timer-management` attribute.
operation: `/subsystem=ejb3/service=timer-service:read-attribute(name=default-persistent-timer-management)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `default-persistent-timer-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `default-transient-timer-management`
the default timer management to use for transient timers.
get the `ejb3` `service` `timer-service` `default-transient-timer-management` attribute.
operation: `/subsystem=ejb3/service=timer-service:read-attribute(name=default-transient-timer-management)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `default-transient-timer-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `thread-pool-name`
the name of the thread pool used to run timer service invocations
get the `ejb3` `service` `timer-service` `thread-pool-name` attribute.
operation: `/subsystem=ejb3/service=timer-service:read-attribute(name=thread-pool-name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `thread-pool-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `service` `timer-service` `database-data-store`
operation: `/subsystem=ejb3/service=timer-service/database-data-store=<database-data-store name>:read-resource()`
To get the list of all the `ejb3` `service` `timer-service` `database-data-store` use '*' for `<database-data-store name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `service` `timer-service` `database-data-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `allow-execution`
if this node is allowed to execute timers. if this is false then the timers will be added to the database, and another node may execute them. note that depending on your refresh interval if you add timers with a very short delay they will not be executed until another node refreshes.
get the `ejb3` `service` `timer-service` `database-data-store` `allow-execution` attribute.
operation: `/subsystem=ejb3/service=timer-service/database-data-store=<database-data-store name>:read-attribute(name=allow-execution)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `allow-execution`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `database`
the type of database that is in use. `sql` can be `customised` per database type. common values are: `postgresql`, `mysql`, `mariadb`, `db2`, `hsql`, `h2`, oracle, `mssql` and `sybase`.
get the `ejb3` `service` `timer-service` `database-data-store` `database` attribute.
operation: `/subsystem=ejb3/service=timer-service/database-data-store=<database-data-store name>:read-attribute(name=database)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `database`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `datasource-jndi-name`
the `datasource` that is used to persist the timers
get the `ejb3` `service` `timer-service` `database-data-store` `datasource-jndi-name` attribute.
operation: `/subsystem=ejb3/service=timer-service/database-data-store=<database-data-store name>:read-attribute(name=datasource-jndi-name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `datasource-jndi-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `partition`
the partition name. this should be set to a different value for every node that is sharing a database to prevent the same timer being loaded by multiple noded.
get the `ejb3` `service` `timer-service` `database-data-store` `partition` attribute.
operation: `/subsystem=ejb3/service=timer-service/database-data-store=<database-data-store name>:read-attribute(name=partition)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `partition`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `refresh-interval`
interval between refreshing the current timer set against the underlying database. a low value means timers get picked up more quickly, but increase load on the database.
get the `ejb3` `service` `timer-service` `database-data-store` `refresh-interval` attribute.
operation: `/subsystem=ejb3/service=timer-service/database-data-store=<database-data-store name>:read-attribute(name=refresh-interval)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `database-data-store` `refresh-interval`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `service` `timer-service` `file-data-store`
operation: `/subsystem=ejb3/service=timer-service/file-data-store=<file-data-store name>:read-resource()`
To get the list of all the `ejb3` `service` `timer-service` `file-data-store` use '*' for `<file-data-store name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `service` `timer-service` `file-data-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `file-data-store` `path`
the directory to store persistent timer information in
get the `ejb3` `service` `timer-service` `file-data-store` `path` attribute.
operation: `/subsystem=ejb3/service=timer-service/file-data-store=<file-data-store name>:read-attribute(name=path)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `file-data-store` `path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `timer-service` `file-data-store` `relative-to`
the relative path that is used to resolve the timer data store location
get the `ejb3` `service` `timer-service` `file-data-store` `relative-to` attribute.
operation: `/subsystem=ejb3/service=timer-service/file-data-store=<file-data-store name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `timer-service` `file-data-store` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `identity` `outflow-security-domains`
references to security domains to attempt to outflow any established identity to
get the `ejb3` `service` `identity` `outflow-security-domains` attribute.
operation: `/subsystem=ejb3/service=identity:read-attribute(name=outflow-security-domains)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `identity` `outflow-security-domains`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `service` `async` `thread-pool-name`
the name of the thread pool which handles asynchronous invocations
get the `ejb3` `service` `async` `thread-pool-name` attribute.
operation: `/subsystem=ejb3/service=async:read-attribute(name=thread-pool-name)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `service` `async` `thread-pool-name`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `cluster-passivation-store`
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-resource()`
To get the list of all the `ejb3` `cluster-passivation-store` use '*' for `<cluster-passivation-store name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `cluster-passivation-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cluster-passivation-store` `bean-cache`
the name of the cache used to store bean instances.
get the `ejb3` `cluster-passivation-store` `bean-cache` attribute.
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-attribute(name=bean-cache)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cluster-passivation-store` `bean-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cluster-passivation-store` `cache-container`
the name of the cache container used for the bean and `client-mappings` caches
get the `ejb3` `cluster-passivation-store` `cache-container` attribute.
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cluster-passivation-store` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cluster-passivation-store` `client-mappings-cache`
the name of the cache used to store `client-mappings` of the jakarta enterprise beans `remoting` `connector's` `socket-bindings`
get the `ejb3` `cluster-passivation-store` `client-mappings-cache` attribute.
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-attribute(name=client-mappings-cache)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cluster-passivation-store` `client-mappings-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cluster-passivation-store` `idle-timeout`
the timeout in units specified by `idle-timeout-unit`, after which a bean will passivate
get the `ejb3` `cluster-passivation-store` `idle-timeout` attribute.
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-attribute(name=idle-timeout)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cluster-passivation-store` `idle-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cluster-passivation-store` `idle-timeout-unit`
the unit of `idle-timeout`
get the `ejb3` `cluster-passivation-store` `idle-timeout-unit` attribute.
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-attribute(name=idle-timeout-unit)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cluster-passivation-store` `idle-timeout-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cluster-passivation-store` `max-size`
the maximum number of beans this cache should store before forcing old beans to passivate
get the `ejb3` `cluster-passivation-store` `max-size` attribute.
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-attribute(name=max-size)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cluster-passivation-store` `max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cluster-passivation-store` `passivate-events-on-replicate`
indicates whether replication should trigger passivation events on the bean
get the `ejb3` `cluster-passivation-store` `passivate-events-on-replicate` attribute.
operation: `/subsystem=ejb3/cluster-passivation-store=<cluster-passivation-store name>:read-attribute(name=passivate-events-on-replicate)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cluster-passivation-store` `passivate-events-on-replicate`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `simple-cache`
operation: `/subsystem=ejb3/simple-cache=<simple-cache name>:read-resource()`
To get the list of all the `ejb3` `simple-cache` use '*' for `<simple-cache name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `simple-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `distributable-cache`
operation: `/subsystem=ejb3/distributable-cache=<distributable-cache name>:read-resource()`
To get the list of all the `ejb3` `distributable-cache` use '*' for `<distributable-cache name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `distributable-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `distributable-cache` `bean-management`
name of the bean management provider for the distributable cache
get the `ejb3` `distributable-cache` `bean-management` attribute.
operation: `/subsystem=ejb3/distributable-cache=<distributable-cache name>:read-attribute(name=bean-management)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `distributable-cache` `bean-management`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `file-passivation-store`
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-resource()`
To get the list of all the `ejb3` `file-passivation-store` use '*' for `<file-passivation-store name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `file-passivation-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `file-passivation-store` `groups-path`
the subdirectory within the path specified by `relative-to` in which to store `passivated` bean groups
get the `ejb3` `file-passivation-store` `groups-path` attribute.
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-attribute(name=groups-path)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `file-passivation-store` `groups-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `file-passivation-store` `idle-timeout`
the timeout in units specified by `idle-timeout-unit`, after which a bean will passivate
get the `ejb3` `file-passivation-store` `idle-timeout` attribute.
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-attribute(name=idle-timeout)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `file-passivation-store` `idle-timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `file-passivation-store` `idle-timeout-unit`
the unit of `idle-timeout`
get the `ejb3` `file-passivation-store` `idle-timeout-unit` attribute.
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-attribute(name=idle-timeout-unit)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `file-passivation-store` `idle-timeout-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `file-passivation-store` `max-size`
the maximum number of beans this cache should store before forcing old beans to passivate
get the `ejb3` `file-passivation-store` `max-size` attribute.
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-attribute(name=max-size)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `file-passivation-store` `max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `file-passivation-store` `relative-to`
the root path used to store `passivated` beans
get the `ejb3` `file-passivation-store` `relative-to` attribute.
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-attribute(name=relative-to)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `file-passivation-store` `relative-to`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `file-passivation-store` `sessions-path`
the subdirectory within the path specified by `relative-to` in which to store `passivated` beans
get the `ejb3` `file-passivation-store` `sessions-path` attribute.
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-attribute(name=sessions-path)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `file-passivation-store` `sessions-path`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `file-passivation-store` `subdirectory-count`
specifies the number of subdirectories into which stored state should be divided, used to minimize the number of files created per directory
get the `ejb3` `file-passivation-store` `subdirectory-count` attribute.
operation: `/subsystem=ejb3/file-passivation-store=<file-passivation-store name>:read-attribute(name=subdirectory-count)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `file-passivation-store` `subdirectory-count`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `strict-max-bean-instance-pool`
operation: `/subsystem=ejb3/strict-max-bean-instance-pool=<strict-max-bean-instance-pool name>:read-resource()`
To get the list of all the `ejb3` `strict-max-bean-instance-pool` use '*' for `<strict-max-bean-instance-pool name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `strict-max-bean-instance-pool`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `derive-size`
specifies if and what the max pool size should be derived from. an undefined value (or the deprecated value 'none' which is converted to undefined) indicates that the explicit value of `max-pool-size` should be used. a value of '`from-worker-pools`' indicates that the max pool size should be derived from the size of the total threads for all worker pools configured on the system. a value of '`from-cpu-count`' indicates that the max pool size should be derived from the total number of processors available on the system. note that the computation `isn't` a `1:1` mapping, the values may or may not be augmented by other factors.
get the `ejb3` `strict-max-bean-instance-pool` `derive-size` attribute.
operation: `/subsystem=ejb3/strict-max-bean-instance-pool=<strict-max-bean-instance-pool name>:read-attribute(name=derive-size)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `derive-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `derived-size`
derived maximum number of bean instances that the pool can hold at a given point in time
get the `ejb3` `strict-max-bean-instance-pool` `derived-size` attribute.
operation: `/subsystem=ejb3/strict-max-bean-instance-pool=<strict-max-bean-instance-pool name>:read-attribute(name=derived-size)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `derived-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `max-pool-size`
configured maximum number of bean instances that the pool can hold at a given point in time
get the `ejb3` `strict-max-bean-instance-pool` `max-pool-size` attribute.
operation: `/subsystem=ejb3/strict-max-bean-instance-pool=<strict-max-bean-instance-pool name>:read-attribute(name=max-pool-size)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `max-pool-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `timeout`
the maximum amount of time to wait for a bean instance to be available from the pool
get the `ejb3` `strict-max-bean-instance-pool` `timeout` attribute.
operation: `/subsystem=ejb3/strict-max-bean-instance-pool=<strict-max-bean-instance-pool name>:read-attribute(name=timeout)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `timeout`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `timeout-unit`
the instance acquisition timeout unit
get the `ejb3` `strict-max-bean-instance-pool` `timeout-unit` attribute.
operation: `/subsystem=ejb3/strict-max-bean-instance-pool=<strict-max-bean-instance-pool name>:read-attribute(name=timeout-unit)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `strict-max-bean-instance-pool` `timeout-unit`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `passivation-store`
operation: `/subsystem=ejb3/passivation-store=<passivation-store name>:read-resource()`
To get the list of all the `ejb3` `passivation-store` use '*' for `<passivation-store name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `passivation-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `passivation-store` `bean-cache`
the name of the cache used to store bean instances.
get the `ejb3` `passivation-store` `bean-cache` attribute.
operation: `/subsystem=ejb3/passivation-store=<passivation-store name>:read-attribute(name=bean-cache)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `passivation-store` `bean-cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `passivation-store` `cache-container`
the name of the cache container used for the bean and `client-mappings` caches
get the `ejb3` `passivation-store` `cache-container` attribute.
operation: `/subsystem=ejb3/passivation-store=<passivation-store name>:read-attribute(name=cache-container)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `passivation-store` `cache-container`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `passivation-store` `max-size`
the maximum number of beans this cache should store before forcing old beans to passivate
get the `ejb3` `passivation-store` `max-size` attribute.
operation: `/subsystem=ejb3/passivation-store=<passivation-store name>:read-attribute(name=max-size)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `passivation-store` `max-size`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get a `ejb3` `cache`
operation: `/subsystem=ejb3/cache=<cache name>:read-resource()`
To get the list of all the `ejb3` `cache` use '*' for `<cache name>`." metadata = {parent=, title=syntax of the operation to get a `ejb3` `cache`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cache` `aliases`
the aliases by which this cache may also be referenced
get the `ejb3` `cache` `aliases` attribute.
operation: `/subsystem=ejb3/cache=<cache name>:read-attribute(name=aliases)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cache` `aliases`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `ejb3` `cache` `passivation-store`
the passivation store used by this cache
get the `ejb3` `cache` `passivation-store` attribute.
operation: `/subsystem=ejb3/cache=<cache name>:read-attribute(name=passivation-store)`" metadata = {parent=, title=syntax of the operation to get the `ejb3` `cache` `passivation-store`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-lra-participant` `lra-coordinator-url`
configuration of the `lra-coordinator-url`, used by the `lra` participant subsystem.
get the `microprofile-lra-participant` `lra-coordinator-url` attribute.
operation: `/subsystem=microprofile-lra-participant:read-attribute(name=lra-coordinator-url)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-lra-participant` `lra-coordinator-url`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-lra-participant` `proxy-host`
name of the undertow subsystem 'host' resource that the `lra` participant proxy will be deployed to.
get the `microprofile-lra-participant` `proxy-host` attribute.
operation: `/subsystem=microprofile-lra-participant:read-attribute(name=proxy-host)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-lra-participant` `proxy-host`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-lra-participant` `proxy-server`
name of the undertow subsystem 'server' resource that the `lra` participant proxy will be deployed to.
get the `microprofile-lra-participant` `proxy-server` attribute.
operation: `/subsystem=microprofile-lra-participant:read-attribute(name=proxy-server)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-lra-participant` `proxy-server`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-metrics-smallrye` `exposed-subsystems`
the names of the `wildfly` subsystems that exposes their metrics (or '*' to expose any subsystem metrics).
get the `microprofile-metrics-smallrye` `exposed-subsystems` attribute.
operation: `/subsystem=microprofile-metrics-smallrye:read-attribute(name=exposed-subsystems)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-metrics-smallrye` `exposed-subsystems`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-metrics-smallrye` `prefix`
prefix prepended to the name of the `wildfly` metrics exposed by the `http` endpoints.
get the `microprofile-metrics-smallrye` `prefix` attribute.
operation: `/subsystem=microprofile-metrics-smallrye:read-attribute(name=prefix)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-metrics-smallrye` `prefix`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-metrics-smallrye` `security-enabled`
true if authentication is required to access the `http` endpoint on the `http` management `interface.this` attribute overrides the value specified in the `security-enabled` attribute of the /`subsystem=metrics` resource.
get the `microprofile-metrics-smallrye` `security-enabled` attribute.
operation: `/subsystem=microprofile-metrics-smallrye:read-attribute(name=security-enabled)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-metrics-smallrye` `security-enabled`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-reactive-messaging-smallrye` `opentelemetry-tracing` `config` `amqp-connector`
configure `opentelemetry` tracing for the `ampq` connector
get the `microprofile-reactive-messaging-smallrye` `opentelemetry-tracing` `config` `amqp-connector` attribute.
operation: `/subsystem=microprofile-reactive-messaging-smallrye/opentelemetry-tracing=config:read-attribute(name=amqp-connector)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-reactive-messaging-smallrye` `opentelemetry-tracing` `config` `amqp-connector`} }
-------------------

-------------------
TextSegment { text = "syntax of the operation to get the `microprofile-reactive-messaging-smallrye` `opentelemetry-tracing` `config` `kafka-connector`
configure `opentelemetry` tracing for the kafka connector
get the `microprofile-reactive-messaging-smallrye` `opentelemetry-tracing` `config` `kafka-connector` attribute.
operation: `/subsystem=microprofile-reactive-messaging-smallrye/opentelemetry-tracing=config:read-attribute(name=kafka-connector)`" metadata = {parent=, title=syntax of the operation to get the `microprofile-reactive-messaging-smallrye` `opentelemetry-tracing` `config` `kafka-connector`} }
-------------------
